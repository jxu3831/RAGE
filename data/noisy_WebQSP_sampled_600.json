[
  {
    "QuestionId": "WebQTest-1484",
    "RawQuestion": "what prompted shakespeare to write poetry?",
    "ProcessedQuestion": "what prompted shakespeare to write poetry",
    "Parses": [
      {
        "ParseId": "WebQTest-1484.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081k8 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PotentialTopicEntityMention": "shakespeare",
        "TopicEntityName": "William Shakespeare",
        "TopicEntityMid": "m.081k8",
        "InferentialChain": [
          "influence.influence_node.influenced_by"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01612m",
            "EntityName": "Lucian"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01r7z",
            "EntityName": "Christopher Marlowe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lqj",
            "EntityName": "Edmund Spenser"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03b_m",
            "EntityName": "Geoffrey Chaucer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cdqxx",
            "EntityName": "John Pory"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.060yy",
            "EntityName": "Plautus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.063_9",
            "EntityName": "Plutarch"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07hl9",
            "EntityName": "Thomas More"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07km7",
            "EntityName": "Terence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07yhg",
            "EntityName": "Virgil"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09fdm",
            "EntityName": "Ovid"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c2cl",
            "EntityName": "Michel de Montaigne"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c5h0",
            "EntityName": "Thomas Kyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j_8y",
            "EntityName": "Seneca the Younger"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.081k8": "William Shakespeare"
    },
    "qid_topic_entity": {
      "Q692": "William Shakespeare"
    },
    "NoisyQuestion": "what prompted shakespaere to write poerty?"
  },
  {
    "QuestionId": "WebQTest-1797",
    "RawQuestion": "who fought in the battle of vicksburg?",
    "ProcessedQuestion": "who fought in the battle of vicksburg",
    "Parses": [
      {
        "ParseId": "WebQTest-1797.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hf7f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hf7f ns:base.culturalevent.event.entity_involved ?x .\n}\n",
        "PotentialTopicEntityMention": "vicksburg",
        "TopicEntityName": "Siege of Vicksburg",
        "TopicEntityMid": "m.01hf7f",
        "InferentialChain": [
          "base.culturalevent.event.entity_involved"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02_qg_",
            "EntityName": "John C. Pemberton"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020d5",
            "EntityName": "Confederate States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fp48",
            "EntityName": "Union"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07t2k",
            "EntityName": "Ulysses S. Grant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1797.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hf7f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hf7f ns:military.military_conflict.combatants ?y .\n?y ns:military.military_combatant_group.combatants ?x .\n}\n",
        "PotentialTopicEntityMention": "vicksburg",
        "TopicEntityName": "Siege of Vicksburg",
        "TopicEntityMid": "m.01hf7f",
        "InferentialChain": [
          "military.military_conflict.combatants",
          "military.military_combatant_group.combatants"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020d5",
            "EntityName": "Confederate States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fp48",
            "EntityName": "Union"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1797.P2",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hf7f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hf7f ns:military.military_conflict.commanders ?y .\n?y ns:military.military_command.military_combatant ?x .\n}\n",
        "PotentialTopicEntityMention": "vicksburg",
        "TopicEntityName": "Siege of Vicksburg",
        "TopicEntityMid": "m.01hf7f",
        "InferentialChain": [
          "military.military_conflict.commanders",
          "military.military_command.military_combatant"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020d5",
            "EntityName": "Confederate States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fp48",
            "EntityName": "Union"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1797.P3",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hf7f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hf7f ns:military.military_conflict.commanders ?y .\n?y ns:military.military_command.military_commander ?x .\n}\n",
        "PotentialTopicEntityMention": "vicksburg",
        "TopicEntityName": "Siege of Vicksburg",
        "TopicEntityMid": "m.01hf7f",
        "InferentialChain": [
          "military.military_conflict.commanders",
          "military.military_command.military_commander"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02_qg_",
            "EntityName": "John C. Pemberton"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07t2k",
            "EntityName": "Ulysses S. Grant"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01hf7f": "Siege of Vicksburg"
    },
    "qid_topic_entity": {
      "Q1066253": "Siege of Vicksburg"
    },
    "NoisyQuestion": "who fought in the battle of vicksburk?"
  },
  {
    "QuestionId": "WebQTest-561",
    "RawQuestion": "when was abe lincoln president?",
    "ProcessedQuestion": "when was abe lincoln president",
    "Parses": [
      {
        "ParseId": "WebQTest-561.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gzh ns:base.inaugurations.inauguration_speaker.inauguration ?x .\n}\n",
        "PotentialTopicEntityMention": "abe lincoln",
        "TopicEntityName": "Abraham Lincoln",
        "TopicEntityMid": "m.0gzh",
        "InferentialChain": [
          "base.inaugurations.inauguration_speaker.inauguration"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05brd51",
            "EntityName": "Abraham Lincoln 1861 presidential inauguration"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05brd5c",
            "EntityName": "Abraham Lincoln 1865 presidential inauguration"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0gzh": "Abraham Lincoln"
    },
    "qid_topic_entity": {
      "Q91": "Abraham Lincoln"
    },
    "NoisyQuestion": "when was Abe Lincoln president?"
  },
  {
    "QuestionId": "WebQTest-843",
    "RawQuestion": "where did theodor schwann study?",
    "ProcessedQuestion": "where did theodor schwann study",
    "Parses": [
      {
        "ParseId": "WebQTest-843.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.040000)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.040000 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "theodor schwann",
        "TopicEntityName": "Theodor Schwann",
        "TopicEntityMid": "m.040000",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01stzp",
            "EntityName": "Humboldt University of Berlin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03563j",
            "EntityName": "University of Würzburg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0m7yh",
            "EntityName": "University of Bonn"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.040000": "Theodor Schwann"
    },
    "qid_topic_entity": {
      "Q76745": "Theodor Schwann"
    },
    "NoisyQuestion": "where did Theodor Schwann study?"
  },
  {
    "QuestionId": "WebQTest-1402",
    "RawQuestion": "what is the kentucky state bird?",
    "ProcessedQuestion": "what is the kentucky state bird",
    "Parses": [
      {
        "ParseId": "WebQTest-1402.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0498y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0498y ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.04627hw .\n}\n",
        "PotentialTopicEntityMention": "kentucky",
        "TopicEntityName": "Kentucky",
        "TopicEntityMid": "m.0498y",
        "InferentialChain": [
          "government.governmental_jurisdiction.official_symbols",
          "location.location_symbol_relationship.symbol"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04627hw",
            "EntityName": "State bird",
            "SourceNodeIndex": 0,
            "NodePredicate": "location.location_symbol_relationship.Kind_of_symbol",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01m0p1",
            "EntityName": "Cardinal"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0498y": "Kentucky"
    },
    "qid_topic_entity": {
      "Q1603": "Kentucky"
    },
    "NoisyQuestion": "what is the kentucky state bird?"
  },
  {
    "QuestionId": "WebQTest-446",
    "RawQuestion": "what music period did beethoven live in?",
    "ProcessedQuestion": "what music period did beethoven live in",
    "Parses": [
      {
        "ParseId": "WebQTest-446.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04k15)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04k15 ns:music.artist.genre ?x .\n}\n",
        "PotentialTopicEntityMention": "beethoven",
        "TopicEntityName": "Ludwig van Beethoven",
        "TopicEntityMid": "m.04k15",
        "InferentialChain": [
          "music.artist.genre"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05lls",
            "EntityName": "Opera"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ggq0m",
            "EntityName": "Classical music"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04k15": "Ludwig van Beethoven"
    },
    "qid_topic_entity": {
      "Q255": "Ludwig van Beethoven"
    },
    "NoisyQuestion": "what music period did Beethoven live in?"
  },
  {
    "QuestionId": "WebQTest-1600",
    "RawQuestion": "what honor did agatha christie receive in 1971?",
    "ProcessedQuestion": "what honor did agatha christie receive in 1971",
    "Parses": [
      {
        "ParseId": "WebQTest-1600.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ldd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ldd ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\nFILTER(NOT EXISTS {?y ns:award.award_honor.year ?sk0} || \nEXISTS {?y ns:award.award_honor.year ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"1971-01-01\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:award.award_honor.year ?sk2} || \nEXISTS {?y ns:award.award_honor.year ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"1971-12-31\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "agatha christie",
        "TopicEntityName": "Agatha Christie",
        "TopicEntityMid": "m.0ldd",
        "InferentialChain": [
          "award.award_winner.awards_won",
          "award.award_honor.award"
        ],
        "Constraints": [
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "1971-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "award.award_honor.year",
            "ValueType": "DateTime"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "1971-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "award.award_honor.year",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "1971-01-01",
          "End": "1971-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "1971"
        },
        "Order": null,
        "Answers": []
      }
    ],
    "topic_entity": {
      "m.0ldd": "Agatha Christie"
    },
    "qid_topic_entity": {
      "Q35064": "Agatha Christie"
    },
    "NoisyQuestion": "what honor did agatha chrisite receive in 1971?"
  },
  {
    "QuestionId": "WebQTest-132",
    "RawQuestion": "who is michael j fox wife?",
    "ProcessedQuestion": "who is michael j fox wife",
    "Parses": [
      {
        "ParseId": "WebQTest-132.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hz_1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hz_1 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PotentialTopicEntityMention": "michael j fox",
        "TopicEntityName": "Michael J. Fox",
        "TopicEntityMid": "m.0hz_1",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gpck",
            "EntityName": "Tracy Pollan"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0hz_1": "Michael J. Fox"
    },
    "qid_topic_entity": {
      "Q395274": "Michael J. Fox"
    },
    "NoisyQuestion": "who is michael j fox wife?"
  },
  {
    "QuestionId": "WebQTest-418",
    "RawQuestion": "what league are the indianapolis colts in?",
    "ProcessedQuestion": "what league are the indianapolis colts in",
    "Parses": [
      {
        "ParseId": "WebQTest-418.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wnh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wnh ns:sports.sports_team.league ?y .\n?y ns:sports.sports_league_participation.league ?x .\n}\n",
        "PotentialTopicEntityMention": "indianapolis colts",
        "TopicEntityName": "Indianapolis Colts",
        "TopicEntityMid": "m.03wnh",
        "InferentialChain": [
          "sports.sports_team.league",
          "sports.sports_league_participation.league"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059yj",
            "EntityName": "National Football League"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.068g_2",
            "EntityName": "AFC South"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hh4",
            "EntityName": "American Football Conference"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03wnh": "Indianapolis Colts"
    },
    "qid_topic_entity": {
      "Q193753": "Indianapolis Colts"
    },
    "NoisyQuestion": "what league are the indianapolis colts in?"
  },
  {
    "QuestionId": "WebQTest-630",
    "RawQuestion": "what language do colombian people speak?",
    "ProcessedQuestion": "what language do colombian people speak",
    "Parses": [
      {
        "ParseId": "WebQTest-630.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ls2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ls2 ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "colombian",
        "TopicEntityName": "Colombia",
        "TopicEntityMid": "m.01ls2",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.1q6h_1_4j",
            "EntityName": "Piratapuyo Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01yppj",
            "EntityName": "Cocama language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025syhx",
            "EntityName": "Bora Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026wqvr",
            "EntityName": "Wayuu Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hw_7r",
            "EntityName": "Malayo Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwglw",
            "EntityName": "Quechua, Napo Lowland Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwgnw",
            "EntityName": "Curripaco Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwgxh",
            "EntityName": "Hupdë Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwh2x",
            "EntityName": "Baudo language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwl4_",
            "EntityName": "Siona Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwl46",
            "EntityName": "Cabiyarí Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwmth",
            "EntityName": "Nukak language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwnpn",
            "EntityName": "Barí Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwnwm",
            "EntityName": "Tama Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwpxb",
            "EntityName": "Awa-Cuaiquer Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwqkg",
            "EntityName": "Guanano Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwqrn",
            "EntityName": "Tanimuca-Retuarã Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwqww",
            "EntityName": "Cagua Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwr84",
            "EntityName": "Runa Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwrvb",
            "EntityName": "Coyaima Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwt3q",
            "EntityName": "Ponares Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwv5q",
            "EntityName": "Macaguaje Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwv8r",
            "EntityName": "Inga, Jungle Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwvm1",
            "EntityName": "Coxima Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hww1x",
            "EntityName": "Tomedes Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwwlp",
            "EntityName": "Natagaimas Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwwxk",
            "EntityName": "Cumeral Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwxg4",
            "EntityName": "Carijona Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwxgh",
            "EntityName": "Tunebo, Barro Negro Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwyr3",
            "EntityName": "Siriano Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwzdd",
            "EntityName": "Muinane Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwzgg",
            "EntityName": "Macaguán Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwzld",
            "EntityName": "Pijao Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hx_dp",
            "EntityName": "Puinave Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hx0bf",
            "EntityName": "Cubeo Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hx2q2",
            "EntityName": "Desano Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hx2tn",
            "EntityName": "Tunebo, Central Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hx5w4",
            "EntityName": "Guayabero Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hx8nb",
            "EntityName": "Arhuaco Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxb1x",
            "EntityName": "Tunebo, Western Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxb4m",
            "EntityName": "Totoro Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxb6s",
            "EntityName": "Palenquero Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxdd2",
            "EntityName": "Kogi Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxdfd",
            "EntityName": "Barasana Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxds7",
            "EntityName": "Yukpa Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxf1r",
            "EntityName": "Waimajã Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxfkq",
            "EntityName": "Colombian Sign Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxh5f",
            "EntityName": "Guambiano Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxhrz",
            "EntityName": "Minica Huitoto"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxj6x",
            "EntityName": "Piaroa Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxksk",
            "EntityName": "Emberá, Northern Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxl2t",
            "EntityName": "Ocaina Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxlpz",
            "EntityName": "Anserma Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxnf6",
            "EntityName": "Carabayo Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxp1v",
            "EntityName": "Macuna Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxs7q",
            "EntityName": "Omejes Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxs9_",
            "EntityName": "Andoque Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxssc",
            "EntityName": "Chipiajes Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxswb",
            "EntityName": "Inga Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxsy4",
            "EntityName": "Piapoco Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxsz8",
            "EntityName": "Tunebo, Angosturas Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxtwj",
            "EntityName": "Catio language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxv46",
            "EntityName": "Koreguaje Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxvjw",
            "EntityName": "Kuna, Border Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxxcv",
            "EntityName": "Andaqui Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxy04",
            "EntityName": "Sáliba Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxy6v",
            "EntityName": "Camsá Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxz2z",
            "EntityName": "Murui Huitoto language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxzv2",
            "EntityName": "Yucuna Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02ppbb5",
            "EntityName": "Guahibo language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02ppbg9",
            "EntityName": "Cuiba language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02ppbnh",
            "EntityName": "Playero language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02pq8qn",
            "EntityName": "Uwa language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h0wpt",
            "EntityName": "Achawa language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03w6b4",
            "EntityName": "Ticuna language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05tnswp",
            "EntityName": "Islander Creole English"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06gdhz",
            "EntityName": "Nheengatu language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nm1",
            "EntityName": "Spanish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07k4r10",
            "EntityName": "Tinigua language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.085vdy",
            "EntityName": "Providencia Sign Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08w0ky",
            "EntityName": "Romani, Vlax Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09gpqdh",
            "EntityName": "Tuyuca language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09k4cp",
            "EntityName": "Tucano Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b7mcv",
            "EntityName": "Páez language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bm08x",
            "EntityName": "Cofán Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0km3ztb",
            "EntityName": "Nonuya language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-630.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ls2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ls2 ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "colombian",
        "TopicEntityName": "Colombia",
        "TopicEntityMid": "m.01ls2",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nm1",
            "EntityName": "Spanish Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01ls2": "Colombia"
    },
    "qid_topic_entity": {
      "Q739": "Colombia"
    },
    "NoisyQuestion": "what language do colomian people speak?"
  },
  {
    "QuestionId": "WebQTest-706",
    "RawQuestion": "where did troy aikman play football?",
    "ProcessedQuestion": "where did troy aikman play football",
    "Parses": [
      {
        "ParseId": "WebQTest-706.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dr5g9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dr5g9 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PotentialTopicEntityMention": "troy aikman",
        "TopicEntityName": "Troy Aikman",
        "TopicEntityMid": "m.0dr5g9",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02896",
            "EntityName": "Dallas Cowboys"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0dr5g9": "Troy Aikman"
    },
    "qid_topic_entity": {
      "Q525002": "Troy Aikman"
    },
    "NoisyQuestion": "where did troy aikman play football?"
  },
  {
    "QuestionId": "WebQTest-837",
    "RawQuestion": "what year did the baltimore ravens win superbowl?",
    "ProcessedQuestion": "what year did the baltimore ravens win superbowl",
    "Parses": [
      {
        "ParseId": "WebQTest-837.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ct6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ct6 ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:m.06x5s .\n}\n",
        "PotentialTopicEntityMention": "baltimore ravens",
        "TopicEntityName": "Baltimore Ravens",
        "TopicEntityMid": "m.01ct6",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.06x5s",
            "EntityName": "Super Bowl",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_championship_event.championship",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0642vqv",
            "EntityName": "Super Bowl XLVII"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.076yq",
            "EntityName": "Super Bowl XXXV"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01ct6": "Baltimore Ravens"
    },
    "qid_topic_entity": {
      "Q276539": "Baltimore Ravens"
    },
    "NoisyQuestion": "what year did the baltimore ravens win superbowl?"
  },
  {
    "QuestionId": "WebQTest-1359",
    "RawQuestion": "what did nicolas cage name his son?",
    "ProcessedQuestion": "what did nicolas cage name his son",
    "Parses": [
      {
        "ParseId": "WebQTest-1359.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vvb4m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vvb4m ns:people.person.children ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PotentialTopicEntityMention": "nicolas cage",
        "TopicEntityName": "Nicolas Cage",
        "TopicEntityMid": "m.01vvb4m",
        "InferentialChain": [
          "people.person.children"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05zppz",
            "EntityName": "Male",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.person.gender",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03jnwc9",
            "EntityName": "Kal-El Coppola Cage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gfhlgk",
            "EntityName": "Weston Coppola Cage"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01vvb4m": "Nicolas Cage"
    },
    "qid_topic_entity": {
      "Q42869": "Nicolas Cage"
    },
    "NoisyQuestion": "what did nicolas cage name his son?"
  },
  {
    "QuestionId": "WebQTest-1022",
    "RawQuestion": "what country is nike based in?",
    "ProcessedQuestion": "what country is nike based in",
    "Parses": [
      {
        "ParseId": "WebQTest-1022.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lwkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lwkh ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.country ?x .\n}\n",
        "PotentialTopicEntityMention": "nike",
        "TopicEntityName": "Nike, Inc.",
        "TopicEntityMid": "m.0lwkh",
        "InferentialChain": [
          "organization.organization.headquarters",
          "location.mailing_address.country"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0lwkh": "Nike, Inc."
    },
    "qid_topic_entity": {
      "Q483915": "Nike, Inc."
    },
    "NoisyQuestion": "what country is niki based in?"
  },
  {
    "QuestionId": "WebQTest-825",
    "RawQuestion": "who does nolan ryan play for?",
    "ProcessedQuestion": "who does nolan ryan play for",
    "Parses": [
      {
        "ParseId": "WebQTest-825.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hctb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hctb ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "nolan ryan",
        "TopicEntityName": "Nolan Ryan",
        "TopicEntityMid": "m.0hctb",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03m1n",
            "EntityName": "Houston Astros"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05kmnv1",
            "EntityName": "California Angels"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0hctb": "Nolan Ryan"
    },
    "qid_topic_entity": {
      "Q721948": "Nolan Ryan"
    },
    "NoisyQuestion": "who does nolan ryan play for?"
  },
  {
    "QuestionId": "WebQTest-1800",
    "RawQuestion": "what year was first world series?",
    "ProcessedQuestion": "what year was first world series",
    "Parses": [
      {
        "ParseId": "WebQTest-1800.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fjp3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fjp3 ns:time.recurring_event.instances ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PotentialTopicEntityMention": "world series",
        "TopicEntityName": "World Series",
        "TopicEntityMid": "m.0fjp3",
        "InferentialChain": [
          "time.recurring_event.instances"
        ],
        "Constraints": [],
        "Time": null,
        "Order": {
          "SortOrder": "Ascending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "time.event.start_date",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.018n8",
            "EntityName": "1903 World Series"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0fjp3": "World Series"
    },
    "qid_topic_entity": {
      "Q265538": "World Series"
    },
    "NoisyQuestion": "what year was first world seris?"
  },
  {
    "QuestionId": "WebQTest-443",
    "RawQuestion": "what county is texarkana arkansas in?",
    "ProcessedQuestion": "what county is texarkana arkansas in",
    "Parses": [
      {
        "ParseId": "WebQTest-443.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d9z_y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d9z_y ns:location.hud_county_place.county ?x .\n}\n",
        "PotentialTopicEntityMention": "texarkana arkansas",
        "TopicEntityName": "Texarkana, Arkansas",
        "TopicEntityMid": "m.0d9z_y",
        "InferentialChain": [
          "location.hud_county_place.county"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0p2xk",
            "EntityName": "Miller County"
          }
        ]
      },
      {
        "ParseId": "WebQTest-443.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d9z_y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d9z_y ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.0kpym_ .\n}\n",
        "PotentialTopicEntityMention": "texarkana arkansas",
        "TopicEntityName": "Texarkana, Arkansas",
        "TopicEntityMid": "m.0d9z_y",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0kpym_",
            "EntityName": "US County",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0p2xk",
            "EntityName": "Miller County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d9z_y": "Texarkana, Arkansas"
    },
    "qid_topic_entity": {
      "Q79438": "Texarkana, Arkansas"
    },
    "NoisyQuestion": "what county is texarkana arkansaw in?"
  },
  {
    "QuestionId": "WebQTest-1956",
    "RawQuestion": "which country in europe has the largest land area?",
    "ProcessedQuestion": "which country in europe has the largest land area",
    "Parses": [
      {
        "ParseId": "WebQTest-1956.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Aggregation. Original comment: F None of the relations capture \"countries within Europe\", and then we don't have a way to filter on largest land area"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n                ns:m.02j9z ns:base.locations.continents.countries_within ?x .\n                ?x ns:location.location.area ?y .\n}\nORDER BY DESC(xsd:float(?y))\nLIMIT 1",
        "PotentialTopicEntityMention": "europe",
        "TopicEntityName": "Europe",
        "TopicEntityMid": "m.02j9z",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bnz",
            "EntityName": "Russia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02j9z": "Europe"
    },
    "qid_topic_entity": {
      "Q46": "Europe"
    },
    "NoisyQuestion": "which country in eurpe has the largest land area?"
  },
  {
    "QuestionId": "WebQTest-199",
    "RawQuestion": "what type of government does iraq have now?",
    "ProcessedQuestion": "what type of government does iraq have now",
    "Parses": [
      {
        "ParseId": "WebQTest-199.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05q4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05q4 ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "iraq",
        "TopicEntityName": "Iraq",
        "TopicEntityMid": "m.0d05q4",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.018wl5",
            "EntityName": "Parliamentary system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06cx9",
            "EntityName": "Republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0glnsx",
            "EntityName": "Parliamentary republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j729",
            "EntityName": "Federal republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d05q4": "Iraq"
    },
    "qid_topic_entity": {
      "Q796": "Iraq"
    },
    "NoisyQuestion": "what type of government does iqaa have now?"
  },
  {
    "QuestionId": "WebQTest-1075",
    "RawQuestion": "where were the great pyramids of giza built?",
    "ProcessedQuestion": "where were the great pyramids of giza built",
    "Parses": [
      {
        "ParseId": "WebQTest-1075.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.036mk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.036mk ns:architecture.building.building_complex ?x .\n}\n",
        "PotentialTopicEntityMention": "great pyramids of giza",
        "TopicEntityName": "Great Pyramid of Giza",
        "TopicEntityMid": "m.036mk",
        "InferentialChain": [
          "architecture.building.building_complex"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bkmh",
            "EntityName": "Giza Plateau"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1075.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.036mk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.036mk ns:base.ancientegypt.pyramid.site ?x .\n}\n",
        "PotentialTopicEntityMention": "great pyramids of giza",
        "TopicEntityName": "Great Pyramid of Giza",
        "TopicEntityMid": "m.036mk",
        "InferentialChain": [
          "base.ancientegypt.pyramid.site"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bkmh",
            "EntityName": "Giza Plateau"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.036mk": "Great Pyramid of Giza"
    },
    "qid_topic_entity": {
      "Q37200": "Great Pyramid of Giza"
    },
    "NoisyQuestion": "where were the great pyramids of giza built?"
  },
  {
    "QuestionId": "WebQTest-1850",
    "RawQuestion": "what religion does madonna practice?",
    "ProcessedQuestion": "what religion does madonna practice",
    "Parses": [
      {
        "ParseId": "WebQTest-1850.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vs_v8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vs_v8 ns:people.person.religion ?x .\n}\n",
        "PotentialTopicEntityMention": "madonna",
        "TopicEntityName": "Madonna",
        "TopicEntityMid": "m.01vs_v8",
        "InferentialChain": [
          "people.person.religion"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01n15n",
            "EntityName": "Jewish Renewal"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c8wxp",
            "EntityName": "Catholicism"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01vs_v8": "Madonna"
    },
    "qid_topic_entity": {
      "Q1744": "Madonna"
    },
    "NoisyQuestion": "what religion does maddona practice?"
  },
  {
    "QuestionId": "WebQTest-1937",
    "RawQuestion": "who is captain james cook facts?",
    "ProcessedQuestion": "who is captain james cook facts",
    "Parses": [
      {
        "ParseId": "WebQTest-1937.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_j8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_j8 ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "captain james cook",
        "TopicEntityName": "James Cook",
        "TopicEntityMid": "m.03_j8",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016wtf",
            "EntityName": "Sailor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.040vc4s",
            "EntityName": "Explorer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03_j8": "James Cook"
    },
    "qid_topic_entity": {
      "Q7324": "James Cook"
    },
    "NoisyQuestion": "who is captian james cook facts?"
  },
  {
    "QuestionId": "WebQTest-51",
    "RawQuestion": "who will play mr gray in the film?",
    "ProcessedQuestion": "who will play mr gray in the film",
    "Parses": [
      {
        "ParseId": "WebQTest-51.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nfjvrm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nfjvrm ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "mr gray",
        "TopicEntityName": "Christian Grey",
        "TopicEntityMid": "m.0nfjvrm",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fs4kv",
            "EntityName": "Jamie Dornan"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0nfjvrm": "Christian Grey"
    },
    "qid_topic_entity": {
      "UnknownQID": "Christian Grey"
    },
    "NoisyQuestion": "who will play mr grya in the film?"
  },
  {
    "QuestionId": "WebQTest-1569",
    "RawQuestion": "what jamaican money called?",
    "ProcessedQuestion": "what jamaican money called",
    "Parses": [
      {
        "ParseId": "WebQTest-1569.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_r3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_r3 ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "jamaican",
        "TopicEntityName": "Jamaica",
        "TopicEntityMid": "m.03_r3",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04xc2m",
            "EntityName": "Jamaican dollar"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03_r3": "Jamaica"
    },
    "qid_topic_entity": {
      "Q766": "Jamaica"
    },
    "NoisyQuestion": "what jamaicain money called?"
  },
  {
    "QuestionId": "WebQTest-1405",
    "RawQuestion": "what there to do in salt lake city utah?",
    "ProcessedQuestion": "what there to do in salt lake city utah",
    "Parses": [
      {
        "ParseId": "WebQTest-1405.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2r6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2r6 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PotentialTopicEntityMention": "salt lake city utah",
        "TopicEntityName": "Salt Lake City",
        "TopicEntityMid": "m.0f2r6",
        "InferentialChain": [
          "travel.travel_destination.tourist_attractions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.121xqqc4",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01626x",
            "EntityName": "Zion National Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0268k69",
            "EntityName": "Days of '47 Parade"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x5d6c",
            "EntityName": "Discovery Gateway"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z2sd8",
            "EntityName": "Church History Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.034zn4",
            "EntityName": "Salt Lake Temple"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.034zsf",
            "EntityName": "Temple Square"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.048fms",
            "EntityName": "Salt Lake City Public Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04p9dd",
            "EntityName": "Trolley Square"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qp9q",
            "EntityName": "Red Butte Garden and Arboretum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06mp6_",
            "EntityName": "Clark Planetarium"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b6mxyf",
            "EntityName": "Antelope Island State Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cgn__",
            "EntityName": "Sugar House Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cnsp",
            "EntityName": "Bryce Canyon National Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h231z",
            "EntityName": "Hogle Zoo"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0f2r6": "Salt Lake City"
    },
    "qid_topic_entity": {
      "Q23337": "Salt Lake City"
    },
    "NoisyQuestion": "what there to do in salt lake city utah?"
  },
  {
    "QuestionId": "WebQTest-1490",
    "RawQuestion": "what language is spoken in argentina?",
    "ProcessedQuestion": "what language is spoken in argentina",
    "Parses": [
      {
        "ParseId": "WebQTest-1490.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "argentina",
        "TopicEntityName": "Argentina",
        "TopicEntityMid": "m.0jgd",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bjrlw",
            "EntityName": "Italian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w_hsv",
            "EntityName": "Guaraní language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03d9kg",
            "EntityName": "Quechuan languages"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nm1",
            "EntityName": "Spanish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0880p",
            "EntityName": "Yiddish Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1490.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "argentina",
        "TopicEntityName": "Argentina",
        "TopicEntityMid": "m.0jgd",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nm1",
            "EntityName": "Spanish Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jgd": "Argentina"
    },
    "qid_topic_entity": {
      "Q414": "Argentina"
    },
    "NoisyQuestion": "what language is spoken in argenitna?"
  },
  {
    "QuestionId": "WebQTest-701",
    "RawQuestion": "what team is reggie bush on 2011?",
    "ProcessedQuestion": "what team is reggie bush on 2011",
    "Parses": [
      {
        "ParseId": "WebQTest-701.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05cb70)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05cb70 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "reggie bush",
        "TopicEntityName": "Reggie Bush",
        "TopicEntityMid": "m.05cb70",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2011-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2011-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2011-01-01",
          "End": "2011-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "2011"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vn5",
            "EntityName": "Miami Dolphins"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05g3v",
            "EntityName": "New Orleans Saints"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05cb70": "Reggie Bush"
    },
    "qid_topic_entity": {
      "Q555271": "Reggie Bush"
    },
    "NoisyQuestion": "what team is reggie bush on 2011?"
  },
  {
    "QuestionId": "WebQTest-652",
    "RawQuestion": "what kind of hispanic is selena gomez?",
    "ProcessedQuestion": "what kind of hispanic is selena gomez",
    "Parses": [
      {
        "ParseId": "WebQTest-652.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gs6vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gs6vr ns:people.person.ethnicity ?x .\n}\n",
        "PotentialTopicEntityMention": "selena gomez",
        "TopicEntityName": "Selena Gomez",
        "TopicEntityMid": "m.0gs6vr",
        "InferentialChain": [
          "people.person.ethnicity"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09k5jvk",
            "EntityName": "Mexicans"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0xnvg",
            "EntityName": "Italian American"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0gs6vr": "Selena Gomez"
    },
    "qid_topic_entity": {
      "Q83287": "Selena Gomez"
    },
    "NoisyQuestion": "what kind of hispanic is selena gomez?"
  },
  {
    "QuestionId": "WebQTest-1580",
    "RawQuestion": "what type of democracy is the united states?",
    "ProcessedQuestion": "what type of democracy is the united states",
    "Parses": [
      {
        "ParseId": "WebQTest-1580.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "united states",
        "TopicEntityName": "United States of America",
        "TopicEntityMid": "m.09c7w0",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d9r3",
            "EntityName": "Presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j729",
            "EntityName": "Federal republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09c7w0": "United States of America"
    },
    "qid_topic_entity": {
      "Q30": "United States of America"
    },
    "NoisyQuestion": "what type of democracy is the unitied states?"
  },
  {
    "QuestionId": "WebQTest-1782",
    "RawQuestion": "where does egypt export to?",
    "ProcessedQuestion": "where does egypt export to",
    "Parses": [
      {
        "ParseId": "WebQTest-1782.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.statistical_region.places_exported_to ?y .\n?y ns:location.imports_and_exports.exported_to ?x .\n}\n",
        "PotentialTopicEntityMention": "egypt",
        "TopicEntityName": "Egypt",
        "TopicEntityMid": "m.02k54",
        "InferentialChain": [
          "location.statistical_region.places_exported_to",
          "location.imports_and_exports.exported_to"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tw8",
            "EntityName": "Sudan"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02k54": "Egypt"
    },
    "qid_topic_entity": {
      "Q79": "Egypt"
    },
    "NoisyQuestion": "where does egypt export to?"
  },
  {
    "QuestionId": "WebQTest-1840",
    "RawQuestion": "what do they speak in norway?",
    "ProcessedQuestion": "what do they speak in norway",
    "Parses": [
      {
        "ParseId": "WebQTest-1840.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b4w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b4w ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "norway",
        "TopicEntityName": "Norway",
        "TopicEntityMid": "m.05b4w",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02glq_",
            "EntityName": "Saami, South Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04d36l",
            "EntityName": "Saami, North Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05f_3",
            "EntityName": "Norwegian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06f7kz",
            "EntityName": "Saami, Lule Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09xy1k",
            "EntityName": "Finnish, Kven Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1840.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b4w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b4w ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "norway",
        "TopicEntityName": "Norway",
        "TopicEntityMid": "m.05b4w",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01648r",
            "EntityName": "Bokmål"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016rsc",
            "EntityName": "Nynorsk"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05f_3",
            "EntityName": "Norwegian Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05b4w": "Norway"
    },
    "qid_topic_entity": {
      "Q20": "Norway"
    },
    "NoisyQuestion": "what do they speak in norwag?"
  },
  {
    "QuestionId": "WebQTest-904",
    "RawQuestion": "what state is barack obama from?",
    "ProcessedQuestion": "what state is barack obama from",
    "Parses": [
      {
        "ParseId": "WebQTest-904.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Longer chain. Original comment: F nested"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.02mjmr ns:people.person.place_of_birth ?y .\n\t?y ns:location.location.containedby ?x .\n\t?x ns:common.topic.notable_types ns:m.0kpys4 .  #US State\n}",
        "PotentialTopicEntityMention": "barack obama",
        "TopicEntityName": "Barack Obama",
        "TopicEntityMid": "m.02mjmr",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gh4",
            "EntityName": "Hawaii"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02mjmr": "Barack Obama"
    },
    "qid_topic_entity": {
      "Q76": "Barack Obama"
    },
    "NoisyQuestion": "what state is barack obama from?"
  },
  {
    "QuestionId": "WebQTest-1117",
    "RawQuestion": "where do they speak german?",
    "ProcessedQuestion": "where do they speak german",
    "Parses": [
      {
        "ParseId": "WebQTest-1117.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04306rv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04306rv ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PotentialTopicEntityMention": "german",
        "TopicEntityName": "German Language",
        "TopicEntityMid": "m.04306rv",
        "InferentialChain": [
          "language.human_language.countries_spoken_in"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0154j",
            "EntityName": "Belgium"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01mjq",
            "EntityName": "Czech Republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01ppq",
            "EntityName": "Cyprus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0345h",
            "EntityName": "Germany"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03f2w",
            "EntityName": "East Germany"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03pn9",
            "EntityName": "Second Polish Republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04g61",
            "EntityName": "Luxembourg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j53",
            "EntityName": "Liechtenstein"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06mzp",
            "EntityName": "Switzerland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ytt",
            "EntityName": "Vatican City"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.082fr",
            "EntityName": "West Germany"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h7x",
            "EntityName": "Austria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hzlz",
            "EntityName": "South Africa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k6nt",
            "EntityName": "Denmark"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04306rv": "German Language"
    },
    "qid_topic_entity": {
      "Q188": "German Language"
    },
    "NoisyQuestion": "where do they speak germna?"
  },
  {
    "QuestionId": "WebQTest-145",
    "RawQuestion": "what college did albert einstein go to?",
    "ProcessedQuestion": "what college did albert einstein go to",
    "Parses": [
      {
        "ParseId": "WebQTest-145.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jcx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jcx ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "albert einstein",
        "TopicEntityName": "Albert Einstein",
        "TopicEntityMid": "m.0jcx",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01dyk8",
            "EntityName": "ETH Zurich"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01tpvt",
            "EntityName": "University of Zurich"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jcx": "Albert Einstein"
    },
    "qid_topic_entity": {
      "Q937": "Albert Einstein"
    },
    "NoisyQuestion": "what college did albert einsteiin go to?"
  },
  {
    "QuestionId": "WebQTest-631",
    "RawQuestion": "what year did ray allen join the nba?",
    "ProcessedQuestion": "what year did ray allen join the nba",
    "Parses": [
      {
        "ParseId": "WebQTest-631.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03lh3v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03lh3v ns:sports.pro_athlete.career_start ?x .\n}\n",
        "PotentialTopicEntityMention": "ray allen",
        "TopicEntityName": "Ray Allen",
        "TopicEntityMid": "m.03lh3v",
        "InferentialChain": [
          "sports.pro_athlete.career_start"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "1996",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03lh3v": "Ray Allen"
    },
    "qid_topic_entity": {
      "Q208623": "Ray Allen"
    },
    "NoisyQuestion": "what year did ray allen join the nba?"
  },
  {
    "QuestionId": "WebQTest-206",
    "RawQuestion": "what position does brandon roy play?",
    "ProcessedQuestion": "what position does brandon roy play",
    "Parses": [
      {
        "ParseId": "WebQTest-206.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cf_p_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cf_p_ ns:basketball.basketball_player.position_s ?x .\n}\n",
        "PotentialTopicEntityMention": "brandon roy",
        "TopicEntityName": "Brandon Roy",
        "TopicEntityMid": "m.0cf_p_",
        "InferentialChain": [
          "basketball.basketball_player.position_s"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02sf_r",
            "EntityName": "Point guard"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03558l",
            "EntityName": "Shooting guard"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0355dz",
            "EntityName": "Small forward"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0cf_p_": "Brandon Roy"
    },
    "qid_topic_entity": {
      "Q313485": "Brandon Roy"
    },
    "NoisyQuestion": "what position does brandon roy play?"
  },
  {
    "QuestionId": "WebQTest-371",
    "RawQuestion": "what are the major languages spoken in greece?",
    "ProcessedQuestion": "what are the major languages spoken in greece",
    "Parses": [
      {
        "ParseId": "WebQTest-371.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035qy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035qy ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "greece",
        "TopicEntityName": "Greece",
        "TopicEntityMid": "m.035qy",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0349s",
            "EntityName": "Greek Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.035qy": "Greece"
    },
    "qid_topic_entity": {
      "Q41": "Greece"
    },
    "NoisyQuestion": "what are the major languages spoken in grecia?"
  },
  {
    "QuestionId": "WebQTest-1910",
    "RawQuestion": "where was shakespeare born at?",
    "ProcessedQuestion": "where was shakespeare born at",
    "Parses": [
      {
        "ParseId": "WebQTest-1910.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081k8 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "shakespeare",
        "TopicEntityName": "William Shakespeare",
        "TopicEntityMid": "m.081k8",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g251",
            "EntityName": "Stratford-upon-Avon"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.081k8": "William Shakespeare"
    },
    "qid_topic_entity": {
      "Q692": "William Shakespeare"
    },
    "NoisyQuestion": "where was shakspere born at?"
  },
  {
    "QuestionId": "WebQTest-749",
    "RawQuestion": "who was president in 1988 in the united states?",
    "ProcessedQuestion": "who was president in 1988 in the united states",
    "Parses": [
      {
        "ParseId": "WebQTest-749.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.060d2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.060d2 ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"1988-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"1988-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "president",
        "TopicEntityName": "President of the United States",
        "TopicEntityMid": "m.060d2",
        "InferentialChain": [
          "government.government_office_or_title.office_holders",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "1988-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "1988-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "1988-01-01",
          "End": "1988-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "1988"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06c0j",
            "EntityName": "Ronald Reagan"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.060d2": "President of the United States"
    },
    "qid_topic_entity": {
      "Q11696": "President of the United States"
    },
    "NoisyQuestion": "who was president in 1988 in the unites states?"
  },
  {
    "QuestionId": "WebQTest-1746",
    "RawQuestion": "where is burundi country?",
    "ProcessedQuestion": "where is burundi country",
    "Parses": [
      {
        "ParseId": "WebQTest-1746.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0169t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0169t ns:base.locations.countries.continent ?x .\n}\n",
        "PotentialTopicEntityMention": "burundi",
        "TopicEntityName": "Burundi",
        "TopicEntityMid": "m.0169t",
        "InferentialChain": [
          "base.locations.countries.continent"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dg3n1",
            "EntityName": "Africa"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1746.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0169t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0169t ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "burundi",
        "TopicEntityName": "Burundi",
        "TopicEntityMid": "m.0169t",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dg3n1",
            "EntityName": "Africa"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0169t": "Burundi"
    },
    "qid_topic_entity": {
      "Q967": "Burundi"
    },
    "NoisyQuestion": "where is burundi countr?"
  },
  {
    "QuestionId": "WebQTest-1641",
    "RawQuestion": "who is nicolas cage married too?",
    "ProcessedQuestion": "who is nicolas cage married too",
    "Parses": [
      {
        "ParseId": "WebQTest-1641.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vvb4m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vvb4m ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "nicolas cage",
        "TopicEntityName": "Nicolas Cage",
        "TopicEntityMid": "m.01vvb4m",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025dscf",
            "EntityName": "Alice Kim"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01vvb4m": "Nicolas Cage"
    },
    "qid_topic_entity": {
      "Q42869": "Nicolas Cage"
    },
    "NoisyQuestion": "who is nicolas cage married to?"
  },
  {
    "QuestionId": "WebQTest-966",
    "RawQuestion": "what basketball player is married to monica?",
    "ProcessedQuestion": "what basketball player is married to monica",
    "Parses": [
      {
        "ParseId": "WebQTest-966.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fs85)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fs85 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n?x ns:people.person.profession ns:m.02h664x .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "monica",
        "TopicEntityName": "Monica",
        "TopicEntityMid": "m.01fs85",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          },
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02h664x",
            "EntityName": "Basketball player",
            "SourceNodeIndex": 1,
            "NodePredicate": "people.person.profession",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            2,
            3
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f2zfl",
            "EntityName": "Shannon Brown"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01fs85": "Monica"
    },
    "qid_topic_entity": {
      "Q231487": "Monica"
    },
    "NoisyQuestion": "what basketball player is married to monica?"
  },
  {
    "QuestionId": "WebQTest-1836",
    "RawQuestion": "where laura ingalls wilder lived?",
    "ProcessedQuestion": "where laura ingalls wilder lived",
    "Parses": [
      {
        "ParseId": "WebQTest-1836.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bt87)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bt87 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PotentialTopicEntityMention": "laura ingalls wilder",
        "TopicEntityName": "Laura Ingalls Wilder",
        "TopicEntityMid": "m.01bt87",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_r0n",
            "EntityName": "De Smet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01mmj7",
            "EntityName": "Pepin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0488g",
            "EntityName": "Kansas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dz6k_",
            "EntityName": "Burr Oak"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0wg6f",
            "EntityName": "Walnut Grove"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0x14p",
            "EntityName": "Mansfield"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01bt87": "Laura Ingalls Wilder"
    },
    "qid_topic_entity": {
      "Q237514": "Laura Ingalls Wilder"
    },
    "NoisyQuestion": "where laura ingalls wilder livd?"
  },
  {
    "QuestionId": "WebQTest-403",
    "RawQuestion": "what kind of language does turkey speak?",
    "ProcessedQuestion": "what kind of language does turkey speak",
    "Parses": [
      {
        "ParseId": "WebQTest-403.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "turkey",
        "TopicEntityName": "Turkey",
        "TopicEntityMid": "m.01znc_",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwyss",
            "EntityName": "Turkish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.033xvz",
            "EntityName": "Zaza language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04p7x",
            "EntityName": "Ladino Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b1g2",
            "EntityName": "Kurdish languages"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jzc",
            "EntityName": "Arabic Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-403.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "turkey",
        "TopicEntityName": "Turkey",
        "TopicEntityMid": "m.01znc_",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwyss",
            "EntityName": "Turkish Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01znc_": "Turkey"
    },
    "qid_topic_entity": {
      "Q43": "Turkey"
    },
    "NoisyQuestion": "what kind of language does Turky speak?"
  },
  {
    "QuestionId": "WebQTest-1878",
    "RawQuestion": "what form of government does the united states use?",
    "ProcessedQuestion": "what form of government does the united states use",
    "Parses": [
      {
        "ParseId": "WebQTest-1878.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "united states",
        "TopicEntityName": "United States of America",
        "TopicEntityMid": "m.09c7w0",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d9r3",
            "EntityName": "Presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j729",
            "EntityName": "Federal republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09c7w0": "United States of America"
    },
    "qid_topic_entity": {
      "Q30": "United States of America"
    },
    "NoisyQuestion": "what form of government does the unitid states use?"
  },
  {
    "QuestionId": "WebQTest-1557",
    "RawQuestion": "where do florida panthers play?",
    "ProcessedQuestion": "where do florida panthers play",
    "Parses": [
      {
        "ParseId": "WebQTest-1557.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j8js)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j8js ns:sports.sports_team.arena_stadium ?x .\n}\n",
        "PotentialTopicEntityMention": "florida panthers",
        "TopicEntityName": "Florida Panthers",
        "TopicEntityMid": "m.0j8js",
        "InferentialChain": [
          "sports.sports_team.arena_stadium"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.038hc3",
            "EntityName": "BB&T Center"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.039xlz",
            "EntityName": "Miami Arena"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0j8js": "Florida Panthers"
    },
    "qid_topic_entity": {
      "Q204623": "Florida Panthers"
    },
    "NoisyQuestion": "where do florida panthers play?"
  },
  {
    "QuestionId": "WebQTest-1231",
    "RawQuestion": "where is chris paul from?",
    "ProcessedQuestion": "where is chris paul from",
    "Parses": [
      {
        "ParseId": "WebQTest-1231.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cymln)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cymln ns:people.person.nationality ?x .\n}\n",
        "PotentialTopicEntityMention": "chris paul",
        "TopicEntityName": "Chris Paul",
        "TopicEntityMid": "m.0cymln",
        "InferentialChain": [
          "people.person.nationality"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0cymln": "Chris Paul"
    },
    "qid_topic_entity": {
      "Q46040": "Chris Paul"
    },
    "NoisyQuestion": "where is chris pual from?"
  },
  {
    "QuestionId": "WebQTest-1947",
    "RawQuestion": "what currency do they use in switzerland?",
    "ProcessedQuestion": "what currency do they use in switzerland",
    "Parses": [
      {
        "ParseId": "WebQTest-1947.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mzp ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "switzerland",
        "TopicEntityName": "Switzerland",
        "TopicEntityMid": "m.06mzp",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_h4b",
            "EntityName": "Swiss franc"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06mzp": "Switzerland"
    },
    "qid_topic_entity": {
      "Q39": "Switzerland"
    },
    "NoisyQuestion": "what currency do they use in switzerland?"
  },
  {
    "QuestionId": "WebQTest-1700",
    "RawQuestion": "where is mt st helens located?",
    "ProcessedQuestion": "where is mt st helens located",
    "Parses": [
      {
        "ParseId": "WebQTest-1700.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.094xz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.094xz ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "mt st helens",
        "TopicEntityName": "Mount St. Helens",
        "TopicEntityMid": "m.094xz",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059g4",
            "EntityName": "North America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.081yw",
            "EntityName": "Washington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k3nk",
            "EntityName": "Cascade Range"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0mly4",
            "EntityName": "Skamania County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.094xz": "Mount St. Helens"
    },
    "qid_topic_entity": {
      "Q4675": "Mount St. Helens"
    },
    "NoisyQuestion": "where is mt st helens located?"
  },
  {
    "QuestionId": "WebQTest-662",
    "RawQuestion": "what currency does the czech republic use now?",
    "ProcessedQuestion": "what currency does the czech republic use now",
    "Parses": [
      {
        "ParseId": "WebQTest-662.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mjq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mjq ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "czech republic",
        "TopicEntityName": "Czech Republic",
        "TopicEntityMid": "m.01mjq",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04rpc3",
            "EntityName": "Czech koruna"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01mjq": "Czech Republic"
    },
    "qid_topic_entity": {
      "Q213": "Czech Republic"
    },
    "NoisyQuestion": "what currency does the czech republik use now?"
  },
  {
    "QuestionId": "WebQTest-1119",
    "RawQuestion": "what is colorado technical university?",
    "ProcessedQuestion": "what is colorado technical university",
    "Parses": [
      {
        "ParseId": "WebQTest-1119.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? meaning of \"what\" question here is not clear"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c_5g9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c_5g9 ns:common.topic.notable_types ?x .\n}\n",
        "PotentialTopicEntityMention": "colorado technical university",
        "TopicEntityName": "Colorado Technical University",
        "TopicEntityMid": "m.0c_5g9",
        "InferentialChain": [
          "common.topic.notable_types"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01y2hnl",
            "EntityName": "College/University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0c_5g9": "Colorado Technical University"
    },
    "qid_topic_entity": {
      "Q5148968": "Colorado Technical University"
    },
    "NoisyQuestion": "what is colorado technical univeristy?"
  },
  {
    "QuestionId": "WebQTest-425",
    "RawQuestion": "where english is spoken?",
    "ProcessedQuestion": "where english is spoken",
    "Parses": [
      {
        "ParseId": "WebQTest-425.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PotentialTopicEntityMention": "english",
        "TopicEntityName": "English Language",
        "TopicEntityMid": "m.02h40lc",
        "InferentialChain": [
          "language.human_language.countries_spoken_in"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0160w",
            "EntityName": "Bahamas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0162b",
            "EntityName": "Bangladesh"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0162v",
            "EntityName": "Barbados"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0164b",
            "EntityName": "Belize"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0165b",
            "EntityName": "Bermuda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0166v",
            "EntityName": "Botswana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0167v",
            "EntityName": "Brunei"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016p5p",
            "EntityName": "Transkei"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019pcs",
            "EntityName": "Ethiopia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019rg5",
            "EntityName": "Kenya"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01k0p4",
            "EntityName": "State of Palestine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nln",
            "EntityName": "Cameroon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nty",
            "EntityName": "Cayman Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01ppq",
            "EntityName": "Cyprus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020p1",
            "EntityName": "Cook Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026wtlf",
            "EntityName": "Territory of Papua and New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027nb",
            "EntityName": "Dominica"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jx1",
            "EntityName": "England"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lx0",
            "EntityName": "Timor-Leste"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wt0",
            "EntityName": "Fiji"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03__y",
            "EntityName": "Jordan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_3d",
            "EntityName": "Japan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_xj",
            "EntityName": "Jersey"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.034m8",
            "EntityName": "Guyana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.034tl",
            "EntityName": "Guam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035dk",
            "EntityName": "Ghana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035hm",
            "EntityName": "Gibraltar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035hr8",
            "EntityName": "South Yemen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035yg",
            "EntityName": "Grenada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h2c",
            "EntityName": "Honduras"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h64",
            "EntityName": "Hong Kong"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rk0",
            "EntityName": "India"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rt9",
            "EntityName": "Republic of Ireland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ryn",
            "EntityName": "Indonesia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03spz",
            "EntityName": "Israel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03t1s",
            "EntityName": "Isle of Man"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047t_",
            "EntityName": "Kiribati"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hhv",
            "EntityName": "Laos"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hvw",
            "EntityName": "Lesotho"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hzj",
            "EntityName": "Liberia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3q",
            "EntityName": "Malta"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v6v",
            "EntityName": "Marshall Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wcf",
            "EntityName": "Montserrat"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05bmq",
            "EntityName": "Namibia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05br2",
            "EntityName": "Nauru"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05cgv",
            "EntityName": "Nigeria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qkp",
            "EntityName": "Papua New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05r7t",
            "EntityName": "Puerto Rico"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05sb1",
            "EntityName": "Pakistan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05v8c",
            "EntityName": "Philippines"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065skb",
            "EntityName": "Gazankulu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0697s",
            "EntityName": "Qatar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06dfg",
            "EntityName": "Rwanda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06m_5",
            "EntityName": "Sri Lanka"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06ryl",
            "EntityName": "Saint Kitts and Nevis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s_2",
            "EntityName": "Sierra Leone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s0l",
            "EntityName": "Saint Lucia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s6l",
            "EntityName": "Saint Vincent and the Grenadines"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s9y",
            "EntityName": "Samoa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06t2t",
            "EntityName": "Singapore"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tw8",
            "EntityName": "Sudan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06v36",
            "EntityName": "Swaziland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07dzf",
            "EntityName": "Tanzania"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07f9q",
            "EntityName": "Tokelau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07fr_",
            "EntityName": "Turks and Caicos Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07fsv",
            "EntityName": "Tuvalu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ssc",
            "EntityName": "United Kingdom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07tp2",
            "EntityName": "Uganda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ytt",
            "EntityName": "Vatican City"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07z5n",
            "EntityName": "Vanuatu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.088q4",
            "EntityName": "Zimbabwe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.088vb",
            "EntityName": "Zambia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09pmkv",
            "EntityName": "Malaysia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09wfqp",
            "EntityName": "Territory of New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chghy",
            "EntityName": "Australia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ctw_b",
            "EntityName": "New Zealand"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d05w3",
            "EntityName": "China"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h44w",
            "EntityName": "Mandatory Palestine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hbgh",
            "EntityName": "Curaçao"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hdx8",
            "EntityName": "Gambia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hzlz",
            "EntityName": "South Africa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j5g9",
            "EntityName": "Wales"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0l3h",
            "EntityName": "Antigua and Barbuda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0rdr4",
            "EntityName": "Bonaire"
          }
        ]
      },
      {
        "ParseId": "WebQTest-425.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.main_country ?x .\n}\n",
        "PotentialTopicEntityMention": "english",
        "TopicEntityName": "English Language",
        "TopicEntityMid": "m.02h40lc",
        "InferentialChain": [
          "language.human_language.main_country"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.014tss",
            "EntityName": "Kingdom of Great Britain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rt9",
            "EntityName": "Republic of Ireland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ssc",
            "EntityName": "United Kingdom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chghy",
            "EntityName": "Australia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ctw_b",
            "EntityName": "New Zealand"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02h40lc": "English Language"
    },
    "qid_topic_entity": {
      "Q1860": "English Language"
    },
    "NoisyQuestion": "where englis is spoken?"
  },
  {
    "QuestionId": "WebQTest-1085",
    "RawQuestion": "who was demi lovato dating?",
    "ProcessedQuestion": "who was demi lovato dating",
    "Parses": [
      {
        "ParseId": "WebQTest-1085.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wb6yq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wb6yq ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n",
        "PotentialTopicEntityMention": "demi lovato",
        "TopicEntityName": "Demi Lovato",
        "TopicEntityMid": "m.02wb6yq",
        "InferentialChain": [
          "base.popstra.celebrity.dated",
          "base.popstra.dated.participant"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cg2rv",
            "EntityName": "Nicholas Braun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04cr6qv",
            "EntityName": "Joe Jonas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cq3wn",
            "EntityName": "Cody Linley"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1085.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wb6yq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wb6yq ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n}\n",
        "PotentialTopicEntityMention": "demi lovato",
        "TopicEntityName": "Demi Lovato",
        "TopicEntityMid": "m.02wb6yq",
        "InferentialChain": [
          "celebrities.celebrity.sexual_relationships",
          "celebrities.romantic_relationship.celebrity"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hhtj",
            "EntityName": "Wilmer Valderrama"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04cr6qv",
            "EntityName": "Joe Jonas"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02wb6yq": "Demi Lovato"
    },
    "qid_topic_entity": {
      "Q41173": "Demi Lovato"
    },
    "NoisyQuestion": "who was demi lovato datng?"
  },
  {
    "QuestionId": "WebQTest-857",
    "RawQuestion": "what other states border florida?",
    "ProcessedQuestion": "what other states border florida",
    "Parses": [
      {
        "ParseId": "WebQTest-857.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xry)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xry ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.0kpys4 .\n}\n",
        "PotentialTopicEntityMention": "florida",
        "TopicEntityName": "Florida",
        "TopicEntityMid": "m.02xry",
        "InferentialChain": [
          "location.location.adjoin_s",
          "location.adjoining_relationship.adjoins"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0kpys4",
            "EntityName": "US State",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0x8",
            "EntityName": "Georgia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gyh",
            "EntityName": "Alabama"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02xry": "Florida"
    },
    "qid_topic_entity": {
      "Q812": "Florida"
    },
    "NoisyQuestion": "what other states border florda?"
  },
  {
    "QuestionId": "WebQTest-1633",
    "RawQuestion": "what genre of art is the mona lisa?",
    "ProcessedQuestion": "what genre of art is the mona lisa",
    "Parses": [
      {
        "ParseId": "WebQTest-1633.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jbg2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jbg2 ns:visual_art.artwork.art_genre ?x .\n}\n",
        "PotentialTopicEntityMention": "mona lisa",
        "TopicEntityName": "Mona Lisa",
        "TopicEntityMid": "m.0jbg2",
        "InferentialChain": [
          "visual_art.artwork.art_genre"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01dv4h",
            "EntityName": "Portrait"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jbg2": "Mona Lisa"
    },
    "qid_topic_entity": {
      "Q12418": "Mona Lisa"
    },
    "NoisyQuestion": "what genre of art is the mona lisa?"
  },
  {
    "QuestionId": "WebQTest-741",
    "RawQuestion": "who plays caesar flickerman in the hunger games?",
    "ProcessedQuestion": "who plays caesar flickerman in the hunger games",
    "Parses": [
      {
        "ParseId": "WebQTest-741.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gkz15s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gkz15s ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0gwc3bn .\n}\n",
        "PotentialTopicEntityMention": "hunger games",
        "TopicEntityName": "The Hunger Games",
        "TopicEntityMid": "m.0gkz15s",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0gwc3bn",
            "EntityName": "Caesar Flickerman",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bj6k",
            "EntityName": "Stanley Tucci"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0gkz15s": "The Hunger Games"
    },
    "qid_topic_entity": {
      "Q212965": "The Hunger Games"
    },
    "NoisyQuestion": "who plays caesar flickerman in the hunger games?"
  },
  {
    "QuestionId": "WebQTest-1674",
    "RawQuestion": "who is the leader of north korea today?",
    "ProcessedQuestion": "who is the leader of north korea today",
    "Parses": [
      {
        "ParseId": "WebQTest-1674.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b7q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b7q ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0h7p97k .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "north korea",
        "TopicEntityName": "North Korea",
        "TopicEntityMid": "m.05b7q",
        "InferentialChain": [
          "government.governmental_jurisdiction.governing_officials",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0h7p97k",
            "EntityName": "Supreme leader",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.basic_title",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": "today"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fgw19",
            "EntityName": "Kim Jong-un"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05b7q": "North Korea"
    },
    "qid_topic_entity": {
      "Q423": "North Korea"
    },
    "NoisyQuestion": "who is the leader of north koreA today?"
  },
  {
    "QuestionId": "WebQTest-1169",
    "RawQuestion": "who did jennifer lawrence play in x men?",
    "ProcessedQuestion": "who did jennifer lawrence play in x men",
    "Parses": [
      {
        "ParseId": "WebQTest-1169.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02x0dzw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02x0dzw ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.0r3r5jz .\n}\n",
        "PotentialTopicEntityMention": "jennifer lawrence",
        "TopicEntityName": "Jennifer Lawrence",
        "TopicEntityMid": "m.02x0dzw",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0r3r5jz",
            "EntityName": "X-Men: Days of Future Past",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01jf3m",
            "EntityName": "Raven / Mystique"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02x0dzw": "Jennifer Lawrence"
    },
    "qid_topic_entity": {
      "Q189490": "Jennifer Lawrence"
    },
    "NoisyQuestion": "who did jennifer lawrence play in x men?"
  },
  {
    "QuestionId": "WebQTest-1329",
    "RawQuestion": "who played bilbo in the fellowship of the ring?",
    "ProcessedQuestion": "who played bilbo in the fellowship of the ring",
    "Parses": [
      {
        "ParseId": "WebQTest-1329.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017gl1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017gl1 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0g6z1 .\n}\n",
        "PotentialTopicEntityMention": "the fellowship of the ring",
        "TopicEntityName": "The Lord of the Rings: The Fellowship of the Ring",
        "TopicEntityMid": "m.017gl1",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0g6z1",
            "EntityName": "Old Bilbo",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016zp5",
            "EntityName": "Ian Holm"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1329.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g6z1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g6z1 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.017gl1 .\n}\n",
        "PotentialTopicEntityMention": "bilbo",
        "TopicEntityName": "Old Bilbo",
        "TopicEntityMid": "m.0g6z1",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.017gl1",
            "EntityName": "The Lord of the Rings: The Fellowship of the Ring",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016zp5",
            "EntityName": "Ian Holm"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.017gl1": "The Lord of the Rings: The Fellowship of the Ring",
      "m.0g6z1": "Old Bilbo"
    },
    "qid_topic_entity": {
      "Q127367": "The Lord of the Rings: The Fellowship of the Ring",
      "Q185737": "Old Bilbo"
    },
    "NoisyQuestion": "who played bilbo in the fellowship of the ring?"
  },
  {
    "QuestionId": "WebQTest-887",
    "RawQuestion": "what high school did maya angelou go to?",
    "ProcessedQuestion": "what high school did maya angelou go to",
    "Parses": [
      {
        "ParseId": "WebQTest-887.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01q9b9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01q9b9 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:m.0bpgx .\n}\n",
        "PotentialTopicEntityMention": "maya angelou",
        "TopicEntityName": "Maya Angelou",
        "TopicEntityMid": "m.01q9b9",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0bpgx",
            "EntityName": "High school",
            "SourceNodeIndex": 0,
            "NodePredicate": "education.education.degree",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07kldk",
            "EntityName": "George Washington High School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01q9b9": "Maya Angelou"
    },
    "qid_topic_entity": {
      "Q19526": "Maya Angelou"
    },
    "NoisyQuestion": "what high school did maya angelou go to?"
  },
  {
    "QuestionId": "WebQTest-1015",
    "RawQuestion": "what town did justin bieber grew up in?",
    "ProcessedQuestion": "what town did justin bieber grew up in",
    "Parses": [
      {
        "ParseId": "WebQTest-1015.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06w2sn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06w2sn5 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PotentialTopicEntityMention": "justin bieber",
        "TopicEntityName": "Justin Bieber",
        "TopicEntityMid": "m.06w2sn5",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01gc9t",
            "EntityName": "Stratford"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06w2sn5": "Justin Bieber"
    },
    "qid_topic_entity": {
      "Q34086": "Justin Bieber"
    },
    "NoisyQuestion": "what town did justin bieber grew up in?"
  },
  {
    "QuestionId": "WebQTest-49",
    "RawQuestion": "what did the islamic people believe in?",
    "ProcessedQuestion": "what did the islamic people believe in",
    "Parses": [
      {
        "ParseId": "WebQTest-49.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.beliefs ?x .\n}\n",
        "PotentialTopicEntityMention": "islamic",
        "TopicEntityName": "Islam",
        "TopicEntityMid": "m.0flw86",
        "InferentialChain": [
          "religion.religion.beliefs"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019vqj",
            "EntityName": "Mahdi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01bbmp",
            "EntityName": "Tawhid"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.024b22",
            "EntityName": "Prophets in Islam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025w817",
            "EntityName": "Predestination in Islam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wvcg4",
            "EntityName": "Entering Heaven alive"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04xy3",
            "EntityName": "Monotheism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0698fs",
            "EntityName": "Islamic view of angels"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06rvp0",
            "EntityName": "Qiyamah"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.074hw",
            "EntityName": "Sharia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07bfrc",
            "EntityName": "Masih ad-Dajjal"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07r6vw",
            "EntityName": "Islamic holy books"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09kb_2",
            "EntityName": "God in Islam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hr6vbp",
            "EntityName": "Ṭūbā"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0flw86": "Islam"
    },
    "qid_topic_entity": {
      "Q432": "Islam"
    },
    "NoisyQuestion": "what did the islamic people believe in?"
  },
  {
    "QuestionId": "WebQTest-487",
    "RawQuestion": "who did veronica lake mary?",
    "ProcessedQuestion": "who did veronica lake mary",
    "Parses": [
      {
        "ParseId": "WebQTest-487.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xm6k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xm6k ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PotentialTopicEntityMention": "veronica lake",
        "TopicEntityName": "Veronica Lake",
        "TopicEntityMid": "m.01xm6k",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w1_m0",
            "EntityName": "John S. Detlie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07cszd",
            "EntityName": "André de Toth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h2qr4q",
            "EntityName": "Joseph A. McCarthy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h2qr53",
            "EntityName": "Robert Carleton-Munro"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01xm6k": "Veronica Lake"
    },
    "qid_topic_entity": {
      "Q84232": "Veronica Lake"
    },
    "NoisyQuestion": "who did veronica lake mary?"
  },
  {
    "QuestionId": "WebQTest-1979",
    "RawQuestion": "who is number 22 on miami dolphins?",
    "ProcessedQuestion": "who is number 22 on miami dolphins",
    "Parses": [
      {
        "ParseId": "WebQTest-1979.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04vn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04vn5 ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n?y ns:sports.sports_team_roster.number ?sk0 .\nFILTER (str(?sk0) = \"22\")\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk1} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk2 . \nFILTER(xsd:datetime(?sk2) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk3} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk4 . \nFILTER(xsd:datetime(?sk4) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "miami dolphins",
        "TopicEntityName": "Miami Dolphins",
        "TopicEntityMid": "m.04vn5",
        "InferentialChain": [
          "sports.sports_team.roster",
          "sports.sports_team_roster.player"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Value",
            "Argument": "22",
            "EntityName": null,
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.number",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0q3yxb2",
            "EntityName": "Jamar Taylor"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04vn5": "Miami Dolphins"
    },
    "qid_topic_entity": {
      "Q223243": "Miami Dolphins"
    },
    "NoisyQuestion": "who is number 22 on miami dolpins?"
  },
  {
    "QuestionId": "WebQTest-1041",
    "RawQuestion": "what currency does england use now?",
    "ProcessedQuestion": "what currency does england use now",
    "Parses": [
      {
        "ParseId": "WebQTest-1041.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02jx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02jx1 ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "england",
        "TopicEntityName": "England",
        "TopicEntityMid": "m.02jx1",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nv4h",
            "EntityName": "Pound sterling"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1041.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "england",
        "TopicEntityName": "United Kingdom",
        "TopicEntityMid": "m.07ssc",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nv4h",
            "EntityName": "Pound sterling"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02jx1": "England",
      "m.07ssc": "United Kingdom"
    },
    "qid_topic_entity": {
      "Q21": "England",
      "Q145": "United Kingdom"
    },
    "NoisyQuestion": "what currency does englan use now?"
  },
  {
    "QuestionId": "WebQTest-777",
    "RawQuestion": "where is the main headquarters of google?",
    "ProcessedQuestion": "where is the main headquarters of google",
    "Parses": [
      {
        "ParseId": "WebQTest-777.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045c7b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045c7b ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PotentialTopicEntityMention": "google",
        "TopicEntityName": "Google",
        "TopicEntityMid": "m.045c7b",
        "InferentialChain": [
          "organization.organization.headquarters",
          "location.mailing_address.citytown"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0r6c4",
            "EntityName": "Mountain View"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.045c7b": "Google"
    },
    "qid_topic_entity": {
      "Q95": "Google"
    },
    "NoisyQuestion": "where is the main headquarters of gogle?"
  },
  {
    "QuestionId": "WebQTest-125",
    "RawQuestion": "what are abraham sons names?",
    "ProcessedQuestion": "what are abraham sons names",
    "Parses": [
      {
        "ParseId": "WebQTest-125.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pwb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pwb ns:people.person.children ?x .\n}\n",
        "PotentialTopicEntityMention": "abraham",
        "TopicEntityName": "Abraham",
        "TopicEntityMid": "m.0pwb",
        "InferentialChain": [
          "people.person.children"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01ghr4",
            "EntityName": "Ishmael"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02pv75j",
            "EntityName": "Ishbak"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w6dpm",
            "EntityName": "Shuah"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03xqw",
            "EntityName": "Isaac"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08flgy",
            "EntityName": "Zimran"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b__3p",
            "EntityName": "Jokshan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c05cp",
            "EntityName": "Medan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ch5jk5",
            "EntityName": "Midian"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0pwb": "Abraham"
    },
    "qid_topic_entity": {
      "Q9181": "Abraham"
    },
    "NoisyQuestion": "what are abraham son's names?"
  },
  {
    "QuestionId": "WebQTest-971",
    "RawQuestion": "what style of music did bessie smith perform?",
    "ProcessedQuestion": "what style of music did bessie smith perform",
    "Parses": [
      {
        "ParseId": "WebQTest-971.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dq47)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dq47 ns:music.artist.genre ?x .\n}\n",
        "PotentialTopicEntityMention": "bessie smith",
        "TopicEntityName": "Bessie Smith",
        "TopicEntityMid": "m.0dq47",
        "InferentialChain": [
          "music.artist.genre"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0155w",
            "EntityName": "Blues"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_d0",
            "EntityName": "Jazz"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0dq47": "Bessie Smith"
    },
    "qid_topic_entity": {
      "Q93349": "Bessie Smith"
    },
    "NoisyQuestion": "what style of music did bessie sminth perform?"
  },
  {
    "QuestionId": "WebQTest-234",
    "RawQuestion": "what countries does the panama canal go through?",
    "ProcessedQuestion": "what countries does the panama canal go through",
    "Parses": [
      {
        "ParseId": "WebQTest-234.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.066rl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.066rl ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PotentialTopicEntityMention": "panama canal",
        "TopicEntityName": "Panama Canal",
        "TopicEntityMid": "m.066rl",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01mp",
            "EntityName": "Country",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qx1",
            "EntityName": "Panama"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.066rl": "Panama Canal"
    },
    "qid_topic_entity": {
      "Q7350": "Panama Canal"
    },
    "NoisyQuestion": "what countries does the panama canel go through?"
  },
  {
    "QuestionId": "WebQTest-1711",
    "RawQuestion": "when was the last time the la kings won a playoff series?",
    "ProcessedQuestion": "when was the last time the la kings won a playoff series",
    "Parses": [
      {
        "ParseId": "WebQTest-1711.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jnq8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jnq8 ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PotentialTopicEntityMention": "la kings",
        "TopicEntityName": "Los Angeles Kings",
        "TopicEntityMid": "m.0jnq8",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [],
        "Time": null,
        "Order": {
          "SortOrder": "Descending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "time.event.end_date",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010fdzhp",
            "EntityName": "2014 Stanley Cup Finals"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jnq8": "Los Angeles Kings"
    },
    "qid_topic_entity": {
      "Q203008": "Los Angeles Kings"
    },
    "NoisyQuestion": "when was the last time the la kings won a playoff series?"
  },
  {
    "QuestionId": "WebQTest-792",
    "RawQuestion": "when did roth ira originate?",
    "ProcessedQuestion": "when did roth ira originate",
    "Parses": [
      {
        "ParseId": "WebQTest-792.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.023_lp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.023_lp ns:symbols.namesake.named_after ?x .\n}\n",
        "PotentialTopicEntityMention": "roth ira",
        "TopicEntityName": "Roth IRA",
        "TopicEntityMid": "m.023_lp",
        "InferentialChain": [
          "symbols.namesake.named_after"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.023xsb",
            "EntityName": "William V. Roth, Jr."
          }
        ]
      }
    ],
    "topic_entity": {
      "m.023_lp": "Roth IRA"
    },
    "qid_topic_entity": {
      "Q7370386": "Roth IRA"
    },
    "NoisyQuestion": "when did roth ira originate?"
  },
  {
    "QuestionId": "WebQTest-329",
    "RawQuestion": "what type of government was formed when italy unified?",
    "ProcessedQuestion": "what type of government was formed when italy unified",
    "Parses": [
      {
        "ParseId": "WebQTest-329.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "italy",
        "TopicEntityName": "Italy",
        "TopicEntityMid": "m.03rjj",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fpfn",
            "EntityName": "Unitary state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0glnsx",
            "EntityName": "Parliamentary republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03rjj": "Italy"
    },
    "qid_topic_entity": {
      "Q38": "Italy"
    },
    "NoisyQuestion": "what type of government was formed when italy unifed?"
  },
  {
    "QuestionId": "WebQTest-1655",
    "RawQuestion": "where are ike and tina turner's children?",
    "ProcessedQuestion": "where are ike and tina turner 's children",
    "Parses": [
      {
        "ParseId": "WebQTest-1655.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vwyqp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vwyqp ns:people.person.children ?x .\n?x ns:people.person.parents ns:m.0dbzg .\n}\n",
        "PotentialTopicEntityMention": "tina turner",
        "TopicEntityName": "Tina Turner",
        "TopicEntityMid": "m.01vwyqp",
        "InferentialChain": [
          "people.person.children"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0dbzg",
            "EntityName": "Ike Turner",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.person.parents",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ggl36p",
            "EntityName": "Ronnie Turner"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j5dh53",
            "EntityName": "Raymond Craig Turner"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01vwyqp": "Tina Turner"
    },
    "qid_topic_entity": {
      "Q131814": "Tina Turner"
    },
    "NoisyQuestion": "where are ike and tina turner's childern?"
  },
  {
    "QuestionId": "WebQTest-1825",
    "RawQuestion": "what did lincoln steffens wrote?",
    "ProcessedQuestion": "what did lincoln steffens wrote",
    "Parses": [
      {
        "ParseId": "WebQTest-1825.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bw1c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bw1c ns:book.author.works_written ?x .\n}\n",
        "PotentialTopicEntityMention": "lincoln steffens",
        "TopicEntityName": "Lincoln Steffens",
        "TopicEntityMid": "m.01bw1c",
        "InferentialChain": [
          "book.author.works_written"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.068tvkv",
            "EntityName": "Die Geschichte meines Lebens"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.069h7f0",
            "EntityName": "The Shame of the Cities"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bhsc3",
            "EntityName": "The autobiography of Lincoln Steffens"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bsl_5",
            "EntityName": "John Reed"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06f67r1",
            "EntityName": "The struggle for self-government"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06gqt1t",
            "EntityName": "Lincoln Steffens speaking"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06lr_pz",
            "EntityName": "The world of Lincoln Steffens"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06mv_gp",
            "EntityName": "Into Mexico and out"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06t_tbs",
            "EntityName": "Moses in red"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tdgyp",
            "EntityName": "The Least Of These"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06vgjfz",
            "EntityName": "Upbuilders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1xh9z",
            "EntityName": "Boy on horseback"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0l6bpv3",
            "EntityName": "The Old Jim Horse"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01bw1c": "Lincoln Steffens"
    },
    "qid_topic_entity": {
      "Q1825813": "Lincoln Steffens"
    },
    "NoisyQuestion": "what did lincoln steffens wroted?"
  },
  {
    "QuestionId": "WebQTest-1262",
    "RawQuestion": "what part of the country is ohio considered?",
    "ProcessedQuestion": "what part of the country is ohio considered",
    "Parses": [
      {
        "ParseId": "WebQTest-1262.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05kkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05kkh ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01nt .\n}\n",
        "PotentialTopicEntityMention": "ohio",
        "TopicEntityName": "Ohio",
        "TopicEntityMid": "m.05kkh",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01nt",
            "EntityName": "Region",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03pzys",
            "EntityName": "East North Central States"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0q76g",
            "EntityName": "Midwestern United States"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05kkh": "Ohio"
    },
    "qid_topic_entity": {
      "Q1397": "Ohio"
    },
    "NoisyQuestion": "what part of the country is ohio considered?"
  },
  {
    "QuestionId": "WebQTest-1107",
    "RawQuestion": "what movies did nick cannon star in?",
    "ProcessedQuestion": "what movies did nick cannon star in",
    "Parses": [
      {
        "ParseId": "WebQTest-1107.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01d1st)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01d1st ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "nick cannon",
        "TopicEntityName": "Nick Cannon",
        "TopicEntityMid": "m.01d1st",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0134yc8y",
            "EntityName": "Chiraq"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01yzvd",
            "EntityName": "Garfield: The Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qzrt_",
            "EntityName": "Even Money"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rhxt_",
            "EntityName": "American Son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.031t2d",
            "EntityName": "Men in Black II"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.043dz8",
            "EntityName": "Shall We Dance?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0464t_m",
            "EntityName": "Ball Don't Lie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04ybhxs",
            "EntityName": "The Killing Room"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07kjm8q",
            "EntityName": "Weapons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07mj_0",
            "EntityName": "Underclassman"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07pnlt",
            "EntityName": "Roll Bounce"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07y9w5",
            "EntityName": "Monster House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08_wh0",
            "EntityName": "Goal II: Living the Dream"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08jml6",
            "EntityName": "Drumline"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08r4x3",
            "EntityName": "Bobby"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09flkf",
            "EntityName": "Love Don't Cost a Thing"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09zg5d",
            "EntityName": "Day of the Dead"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c34n5",
            "EntityName": "Whatever It Takes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ftc14",
            "EntityName": "The Adventures of Brer Rabbit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gj9fmj",
            "EntityName": "A Very School Gyrls Holla-Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0mzmnx4",
            "EntityName": "Drumline: A New Beat"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01d1st": "Nick Cannon"
    },
    "qid_topic_entity": {
      "Q348533": "Nick Cannon"
    },
    "NoisyQuestion": "what movies did nick cannon star in?"
  },
  {
    "QuestionId": "WebQTest-13",
    "RawQuestion": "who was vice president after kennedy died?",
    "ProcessedQuestion": "who was vice president after kennedy died",
    "Parses": [
      {
        "ParseId": "WebQTest-13.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? Assume VP succeeds P"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:government.us_president.vice_president ?x .\n}\n",
        "PotentialTopicEntityMention": "kennedy",
        "TopicEntityName": "John F. Kennedy",
        "TopicEntityMid": "m.0d3k14",
        "InferentialChain": [
          "government.us_president.vice_president"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f7fy",
            "EntityName": "Lyndon B. Johnson"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d3k14": "John F. Kennedy"
    },
    "qid_topic_entity": {
      "Q9696": "John F. Kennedy"
    },
    "NoisyQuestion": "who was vice president after kennedy died?"
  },
  {
    "QuestionId": "WebQTest-1180",
    "RawQuestion": "what sarah dessen books are movies?",
    "ProcessedQuestion": "what sarah dessen books are movies",
    "Parses": [
      {
        "ParseId": "WebQTest-1180.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.052s_8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.052s_8 ns:film.film_story_contributor.film_story_credits ?x .\n}\n",
        "PotentialTopicEntityMention": "sarah dessen",
        "TopicEntityName": "Sarah Dessen",
        "TopicEntityMid": "m.052s_8",
        "InferentialChain": [
          "film.film_story_contributor.film_story_credits"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04y364",
            "EntityName": "How to Deal"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.052s_8": "Sarah Dessen"
    },
    "qid_topic_entity": {
      "Q532336": "Sarah Dessen"
    },
    "NoisyQuestion": "what sarah dessen books are movies?"
  },
  {
    "QuestionId": "WebQTest-1527",
    "RawQuestion": "what political party does barack obama represent?",
    "ProcessedQuestion": "what political party does barack obama represent",
    "Parses": [
      {
        "ParseId": "WebQTest-1527.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PotentialTopicEntityMention": "barack obama",
        "TopicEntityName": "Barack Obama",
        "TopicEntityMid": "m.02mjmr",
        "InferentialChain": [
          "government.politician.party",
          "government.political_party_tenure.party"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d075m",
            "EntityName": "Democratic Party"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02mjmr": "Barack Obama"
    },
    "qid_topic_entity": {
      "Q76": "Barack Obama"
    },
    "NoisyQuestion": "what political party does barack obama represent?"
  },
  {
    "QuestionId": "WebQTest-150",
    "RawQuestion": "what language does cuba speak?",
    "ProcessedQuestion": "what language does cuba speak",
    "Parses": [
      {
        "ParseId": "WebQTest-150.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d04z6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d04z6 ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "cuba",
        "TopicEntityName": "Cuba",
        "TopicEntityMid": "m.0d04z6",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02dhwl",
            "EntityName": "Haitian Creole"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwhd2",
            "EntityName": "Lucumi Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nm1",
            "EntityName": "Spanish Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-150.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d04z6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d04z6 ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "cuba",
        "TopicEntityName": "Cuba",
        "TopicEntityMid": "m.0d04z6",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nm1",
            "EntityName": "Spanish Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d04z6": "Cuba"
    },
    "qid_topic_entity": {
      "Q241": "Cuba"
    },
    "NoisyQuestion": "what language does cuba speek?"
  },
  {
    "QuestionId": "WebQTest-865",
    "RawQuestion": "what to do for fun in houston?",
    "ProcessedQuestion": "what to do for fun in houston",
    "Parses": [
      {
        "ParseId": "WebQTest-865.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03l2n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03l2n ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PotentialTopicEntityMention": "houston",
        "TopicEntityName": "Houston",
        "TopicEntityMid": "m.03l2n",
        "InferentialChain": [
          "travel.travel_destination.tourist_attractions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_nc_",
            "EntityName": "Houston Zoo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0182y2",
            "EntityName": "Lyndon B. Johnson Space Center"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019r17",
            "EntityName": "USS Texas (BB-35)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01tx3t",
            "EntityName": "Toyota Center"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01v9bf",
            "EntityName": "The Galleria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0263t14",
            "EntityName": "Houston Arboretum and Nature Center"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026fxz",
            "EntityName": "Rothko Chapel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02nqnj",
            "EntityName": "Lakewood Church"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z52c3",
            "EntityName": "Sam Houston Race Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03c98h6",
            "EntityName": "Children's Museum of Houston"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03y8vk2",
            "EntityName": "Bayou Bend Collection and Gardens"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ynr2",
            "EntityName": "Kemah Boardwalk"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05170t",
            "EntityName": "George R. Brown Convention Center"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.063g1w",
            "EntityName": "Wet'n'Wild SplashTown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.076v_2",
            "EntityName": "Gerald D. Hines Waterwall Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09q54f",
            "EntityName": "Houston Marathon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09vjh0",
            "EntityName": "Houston Museum of Natural Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cc7kjq",
            "EntityName": "Downtown Aquarium, Houston"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cfztb",
            "EntityName": "Museum of Fine Arts, Houston"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dhl0g",
            "EntityName": "Hanna–Barbera Land"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fy56_",
            "EntityName": "Space Center Houston"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03l2n": "Houston"
    },
    "qid_topic_entity": {
      "Q16555": "Houston"
    },
    "NoisyQuestion": "what to do for fun in houstn?"
  },
  {
    "QuestionId": "WebQTest-1067",
    "RawQuestion": "what school did douglas macarthur go to?",
    "ProcessedQuestion": "what school did douglas macarthur go to",
    "Parses": [
      {
        "ParseId": "WebQTest-1067.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c_jc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c_jc ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "douglas macarthur",
        "TopicEntityName": "Douglas MacArthur",
        "TopicEntityMid": "m.0c_jc",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05chz5",
            "EntityName": "TMI — The Episcopal School of Texas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07x4c",
            "EntityName": "United States Military Academy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0c_jc": "Douglas MacArthur"
    },
    "qid_topic_entity": {
      "Q127417": "Douglas MacArthur"
    },
    "NoisyQuestion": "what school did douglas macarthur go to?"
  },
  {
    "QuestionId": "WebQTest-1781",
    "RawQuestion": "who or what influenced albert einstein?",
    "ProcessedQuestion": "who or what influenced albert einstein",
    "Parses": [
      {
        "ParseId": "WebQTest-1781.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jcx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jcx ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PotentialTopicEntityMention": "albert einstein",
        "TopicEntityName": "Albert Einstein",
        "TopicEntityMid": "m.0jcx",
        "InferentialChain": [
          "influence.influence_node.influenced_by"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012102",
            "EntityName": "Henry George"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015n8",
            "EntityName": "Baruch Spinoza"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015yk8",
            "EntityName": "Karl Pearson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01bgwr",
            "EntityName": "Hermann Minkowski"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01dfd4",
            "EntityName": "Moritz Schlick"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026lj",
            "EntityName": "David Hume"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.032l1",
            "EntityName": "Fyodor Dostoyevsky"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cdg",
            "EntityName": "George Bernard Shaw"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03s9v",
            "EntityName": "Isaac Newton"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0434m",
            "EntityName": "James Clerk Maxwell"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04xfb",
            "EntityName": "Mahatma Gandhi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05q658z",
            "EntityName": "Riazuddin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05vy1",
            "EntityName": "Paul Valéry"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bjvq",
            "EntityName": "Bernhard Riemann"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dm1p",
            "EntityName": "Thomas Young"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fcy0",
            "EntityName": "Ernst Mach"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j3v",
            "EntityName": "Arthur Schopenhauer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0m3hd",
            "EntityName": "Hendrik Lorentz"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jcx": "Albert Einstein"
    },
    "qid_topic_entity": {
      "Q937": "Albert Einstein"
    },
    "NoisyQuestion": "who or what influenced albert einsten?"
  },
  {
    "QuestionId": "WebQTest-295",
    "RawQuestion": "what type of government does germany have now?",
    "ProcessedQuestion": "what type of government does germany have now",
    "Parses": [
      {
        "ParseId": "WebQTest-295.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "germany",
        "TopicEntityName": "Germany",
        "TopicEntityMid": "m.0345h",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0drnm",
            "EntityName": "Representative democracy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0glnsx",
            "EntityName": "Parliamentary republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j729",
            "EntityName": "Federal republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0345h": "Germany"
    },
    "qid_topic_entity": {
      "Q183": "Germany"
    },
    "NoisyQuestion": "what type of government does germaany have now?"
  },
  {
    "QuestionId": "WebQTest-1219",
    "RawQuestion": "what nationality is rihanna?",
    "ProcessedQuestion": "what nationality is rihanna",
    "Parses": [
      {
        "ParseId": "WebQTest-1219.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mt91)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mt91 ns:people.person.nationality ?x .\n}\n",
        "PotentialTopicEntityMention": "rihanna",
        "TopicEntityName": "Rihanna",
        "TopicEntityMid": "m.06mt91",
        "InferentialChain": [
          "people.person.nationality"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0162v",
            "EntityName": "Barbados"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06mt91": "Rihanna"
    },
    "qid_topic_entity": {
      "Q36844": "Rihanna"
    },
    "NoisyQuestion": "what nationality is Rihana?"
  },
  {
    "QuestionId": "WebQTest-1304",
    "RawQuestion": "what was hitler the leader of?",
    "ProcessedQuestion": "what was hitler the leader of",
    "Parses": [
      {
        "ParseId": "WebQTest-1304.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??? "
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:organization.organization_founder.organizations_founded ?x .\n}\n",
        "PotentialTopicEntityMention": "hitler",
        "TopicEntityName": "Adolf Hitler",
        "TopicEntityMid": "m.07_m9_",
        "InferentialChain": [
          "organization.organization_founder.organizations_founded"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01c73n",
            "EntityName": "Hitler Youth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cqs",
            "EntityName": "Gestapo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03w7xf",
            "EntityName": "1st SS Panzer Division Leibstandarte SS Adolf Hitler"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05g9h",
            "EntityName": "Nazi Party"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06qmk",
            "EntityName": "Schutzstaffel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.082mc",
            "EntityName": "Waffen-SS"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.082x5",
            "EntityName": "Wehrmacht"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f6ck",
            "EntityName": "Sturmabteilung"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07_m9_": "Adolf Hitler"
    },
    "qid_topic_entity": {
      "Q352": "Adolf Hitler"
    },
    "NoisyQuestion": "what was hitley the leader of?"
  },
  {
    "QuestionId": "WebQTest-1373",
    "RawQuestion": "where was john f kennedy when he got shot?",
    "ProcessedQuestion": "where was john f kennedy when he got shot",
    "Parses": [
      {
        "ParseId": "WebQTest-1373.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "john f kennedy",
        "TopicEntityName": "John F. Kennedy",
        "TopicEntityMid": "m.0d3k14",
        "InferentialChain": [
          "people.deceased_person.place_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f2rq",
            "EntityName": "Dallas"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d3k14": "John F. Kennedy"
    },
    "qid_topic_entity": {
      "Q9696": "John F. Kennedy"
    },
    "NoisyQuestion": "where was jhon f kennedy when he got shot?"
  },
  {
    "QuestionId": "WebQTest-938",
    "RawQuestion": "who was queen elizabeth ii mom?",
    "ProcessedQuestion": "who was queen elizabeth ii mom",
    "Parses": [
      {
        "ParseId": "WebQTest-938.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d1_f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d1_f ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.02zsn .\n}\n",
        "PotentialTopicEntityMention": "elizabeth ii",
        "TopicEntityName": "Elizabeth II",
        "TopicEntityMid": "m.0d1_f",
        "InferentialChain": [
          "people.person.parents"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02zsn",
            "EntityName": "Female",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.person.gender",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cm63",
            "EntityName": "Queen Elizabeth The Queen Mother"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d1_f": "Elizabeth II"
    },
    "qid_topic_entity": {
      "Q9682": "Elizabeth II"
    },
    "NoisyQuestion": "who was queen elizabeth ii momb?"
  },
  {
    "QuestionId": "WebQTest-772",
    "RawQuestion": "who plays roxanne in ghost rider?",
    "ProcessedQuestion": "who plays roxanne in ghost rider",
    "Parses": [
      {
        "ParseId": "WebQTest-772.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06yykb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06yykb ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.02ph41w .\n}\n",
        "PotentialTopicEntityMention": "ghost rider",
        "TopicEntityName": "Ghost Rider",
        "TopicEntityMid": "m.06yykb",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02ph41w",
            "EntityName": "Roxanne Simpson",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026ths5",
            "EntityName": "Raquel Alessi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_x5t",
            "EntityName": "Eva Mendes"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06yykb": "Ghost Rider"
    },
    "qid_topic_entity": {
      "Q41754": "Ghost Rider"
    },
    "NoisyQuestion": "who plays roxanne in ghost rider?"
  },
  {
    "QuestionId": "WebQTest-823",
    "RawQuestion": "what does bolivia border?",
    "ProcessedQuestion": "what does bolivia border",
    "Parses": [
      {
        "ParseId": "WebQTest-823.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0165v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0165v ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n}\n",
        "PotentialTopicEntityMention": "bolivia",
        "TopicEntityName": "Bolivia",
        "TopicEntityMid": "m.0165v",
        "InferentialChain": [
          "location.location.adjoin_s",
          "location.adjoining_relationship.adjoins"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015fr",
            "EntityName": "Brazil"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016wzw",
            "EntityName": "Peru"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01p1v",
            "EntityName": "Chile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05v10",
            "EntityName": "Paraguay"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jgd",
            "EntityName": "Argentina"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0165v": "Bolivia"
    },
    "qid_topic_entity": {
      "Q750": "Bolivia"
    },
    "NoisyQuestion": "what does bolivie border?"
  },
  {
    "QuestionId": "WebQTest-246",
    "RawQuestion": "what was nikola tesla inventions?",
    "ProcessedQuestion": "what was nikola tesla inventions",
    "Parses": [
      {
        "ParseId": "WebQTest-246.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05d1y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05d1y ns:law.inventor.inventions ?x .\n}\n",
        "PotentialTopicEntityMention": "nikola tesla",
        "TopicEntityName": "Nikola Tesla",
        "TopicEntityMid": "m.05d1y",
        "InferentialChain": [
          "law.inventor.inventions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01s499",
            "EntityName": "Neon lamp"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02p196m",
            "EntityName": "Induction motor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08262",
            "EntityName": "Wireless telegraphy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09pf_",
            "EntityName": "Three-phase electric power"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09rh1",
            "EntityName": "Tesla coil"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bt33",
            "EntityName": "Alternating current"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0qjjc",
            "EntityName": "Remote control"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05d1y": "Nikola Tesla"
    },
    "qid_topic_entity": {
      "Q9036": "Nikola Tesla"
    },
    "NoisyQuestion": "what was nikola tesla inventions?"
  },
  {
    "QuestionId": "WebQTest-1472",
    "RawQuestion": "when did romney become governor?",
    "ProcessedQuestion": "when did romney become governor",
    "Parses": [
      {
        "ParseId": "WebQTest-1472.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\n}\n",
        "PotentialTopicEntityMention": "romney",
        "TopicEntityName": "Mitt Romney",
        "TopicEntityMid": "m.0271_s",
        "InferentialChain": [
          "government.politician.government_positions_held",
          "government.government_position_held.from"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0fkvn",
            "EntityName": "Governor",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.basic_title",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "2003-01-02",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0271_s": "Mitt Romney"
    },
    "qid_topic_entity": {
      "Q4496": "Mitt Romney"
    },
    "NoisyQuestion": "when did romney become governour?"
  },
  {
    "QuestionId": "WebQTest-1713",
    "RawQuestion": "what disease did abraham lincoln had?",
    "ProcessedQuestion": "what disease did abraham lincoln had",
    "Parses": [
      {
        "ParseId": "WebQTest-1713.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gzh ns:medicine.notable_person_with_medical_condition.condition ?x .\n}\n",
        "PotentialTopicEntityMention": "abraham lincoln",
        "TopicEntityName": "Abraham Lincoln",
        "TopicEntityMid": "m.0gzh",
        "InferentialChain": [
          "medicine.notable_person_with_medical_condition.condition"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02s645",
            "EntityName": "Strabismus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06vr2",
            "EntityName": "Smallpox"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cc6n",
            "EntityName": "Marfan syndrome"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0gzh": "Abraham Lincoln"
    },
    "qid_topic_entity": {
      "Q91": "Abraham Lincoln"
    },
    "NoisyQuestion": "what disease did abraham lincoln had?"
  },
  {
    "QuestionId": "WebQTest-1591",
    "RawQuestion": "what was obama's former occupation?",
    "ProcessedQuestion": "what was obama 's former occupation",
    "Parses": [
      {
        "ParseId": "WebQTest-1591.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "obama",
        "TopicEntityName": "Barack Obama",
        "TopicEntityMid": "m.02mjmr",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gc2",
            "EntityName": "Lawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fj9f",
            "EntityName": "Politician"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fz465",
            "EntityName": "Law professor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kyk",
            "EntityName": "Author"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02mjmr": "Barack Obama"
    },
    "qid_topic_entity": {
      "Q76": "Barack Obama"
    },
    "NoisyQuestion": "what was obama's former occupation?"
  },
  {
    "QuestionId": "WebQTest-658",
    "RawQuestion": "who wrote the gospel according to john?",
    "ProcessedQuestion": "who wrote the gospel according to john",
    "Parses": [
      {
        "ParseId": "WebQTest-658.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.038vs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.038vs ns:book.written_work.author ?x .\n}\n",
        "PotentialTopicEntityMention": "gospel according to john",
        "TopicEntityName": "Gospel of John",
        "TopicEntityMid": "m.038vs",
        "InferentialChain": [
          "book.written_work.author"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.046_b",
            "EntityName": "John the Evangelist"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.038vs": "Gospel of John"
    },
    "qid_topic_entity": {
      "Q36766": "Gospel of John"
    },
    "NoisyQuestion": "who wrote the gospel according to jhon?"
  },
  {
    "QuestionId": "WebQTest-849",
    "RawQuestion": "what country sponsored ferdinand magellan?",
    "ProcessedQuestion": "what country sponsored ferdinand magellan",
    "Parses": [
      {
        "ParseId": "WebQTest-849.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033ky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033ky ns:people.person.nationality ?x .\n}\n",
        "PotentialTopicEntityMention": "ferdinand magellan",
        "TopicEntityName": "Ferdinand Magellan",
        "TopicEntityMid": "m.033ky",
        "InferentialChain": [
          "people.person.nationality"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0285m87",
            "EntityName": "Kingdom of Portugal"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.033ky": "Ferdinand Magellan"
    },
    "qid_topic_entity": {
      "Q1496": "Ferdinand Magellan"
    },
    "NoisyQuestion": "what country sponsored ferdinando magellan?"
  },
  {
    "QuestionId": "WebQTest-304",
    "RawQuestion": "what is jamie oliver children names?",
    "ProcessedQuestion": "what is jamie oliver children names",
    "Parses": [
      {
        "ParseId": "WebQTest-304.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01myph)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01myph ns:people.person.children ?x .\n}\n",
        "PotentialTopicEntityMention": "jamie oliver",
        "TopicEntityName": "Jamie Oliver",
        "TopicEntityMid": "m.01myph",
        "InferentialChain": [
          "people.person.children"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b7m2p0",
            "EntityName": "Petal Blossom Rainbow Oliver"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b7m2p7",
            "EntityName": "Daisy Boo Pamela Oliver"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b7m2pg",
            "EntityName": "Poppy Honey Rosie Oliver"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gyd_td",
            "EntityName": "Buddy Bear Maurice Oliver"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01myph": "Jamie Oliver"
    },
    "qid_topic_entity": {
      "Q190051": "Jamie Oliver"
    },
    "NoisyQuestion": "what is jamie oliver chilren names?"
  },
  {
    "QuestionId": "WebQTest-2013",
    "RawQuestion": "where to stay in chicago tourist?",
    "ProcessedQuestion": "where to stay in chicago tourist",
    "Parses": [
      {
        "ParseId": "WebQTest-2013.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_d4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_d4 ns:travel.travel_destination.accommodation ?x .\n}\n",
        "PotentialTopicEntityMention": "chicago",
        "TopicEntityName": "Chicago",
        "TopicEntityMid": "m.01_d4",
        "InferentialChain": [
          "travel.travel_destination.accommodation"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ldv2s1",
            "EntityName": "Hotel Sax Chicago"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01_d4": "Chicago"
    },
    "qid_topic_entity": {
      "Q1297": "Chicago"
    },
    "NoisyQuestion": "where to stay in chicago tourist?"
  },
  {
    "QuestionId": "WebQTest-376",
    "RawQuestion": "what books did agatha christie wrote?",
    "ProcessedQuestion": "what books did agatha christie wrote",
    "Parses": [
      {
        "ParseId": "WebQTest-376.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ldd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ldd ns:book.author.book_editions_published ?x .\n}\n",
        "PotentialTopicEntityMention": "agatha christie",
        "TopicEntityName": "Agatha Christie",
        "TopicEntityMid": "m.0ldd",
        "InferentialChain": [
          "book.author.book_editions_published"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028xw99",
            "EntityName": "A Caribbean Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028xy2v",
            "EntityName": "The Hound of Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028xyps",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028y5cy",
            "EntityName": "Three Act Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028yc88",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028ym09",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028yq8_",
            "EntityName": "Hercule Poirot’s Christmas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7_1",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7_v",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7vw",
            "EntityName": "Ordeal by innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7wl",
            "EntityName": "Ordeal By Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7wv",
            "EntityName": "Ordeal By Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7x2",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7xb",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7xl",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7xw",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7y3",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7yc",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7yn",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7yx",
            "EntityName": "Ordeal by innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7zc",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7zm",
            "EntityName": "Ordeal by innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_8jf",
            "EntityName": "Ordeal by Innocence (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_8jz",
            "EntityName": "Ordeal by innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_8kv",
            "EntityName": "Ordeal by Innocence (Signature Editions)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_8n2",
            "EntityName": "Ordeal by Innocence (Agatha Christie Mysteries Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_j7h",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_j8l",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_j9l",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_j9v",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jb2",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jbc",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jbm",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jbw",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jc3",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jcc",
            "EntityName": "Murder in Mesopotamia."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jcm",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jcw",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jd3",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jdc",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jdt",
            "EntityName": "Murder in Mesopotamia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_l_j",
            "EntityName": "Murder in Mesopotamia (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_l8w",
            "EntityName": "The Hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_l93",
            "EntityName": "The Hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_l9c",
            "EntityName": "The hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_l9v",
            "EntityName": "The Hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_lb3",
            "EntityName": "The Hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_lbc",
            "EntityName": "The Hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_lbn",
            "EntityName": "The Hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_lbx",
            "EntityName": "The Hollow."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_lc4",
            "EntityName": "The Hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_lcd",
            "EntityName": "The Hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_lcp",
            "EntityName": "The hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m0b",
            "EntityName": "Murder in Mesopotamia (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m0w",
            "EntityName": "Murder in Mesopotamia (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m13",
            "EntityName": "Murder in Mesopotamia (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m1c",
            "EntityName": "Murder In Mesopotamia (Agatha Christie Mystery Collection) Bantam Blue Leatherette Edition"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m2c",
            "EntityName": "Murder in Mesopotamia (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m2m",
            "EntityName": "Murder in Mesopotamia (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m2w",
            "EntityName": "Murder in Mesopotamia (BBC Radio Presents)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m3n",
            "EntityName": "Murder in Mesopotamia (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m7z",
            "EntityName": "The Hollow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m8d",
            "EntityName": "The Hollow (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m8n",
            "EntityName": "The Hollow (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m8x",
            "EntityName": "The Hollow (Winterbrook Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m94",
            "EntityName": "The Hollow (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m9f",
            "EntityName": "The Hollow (A Hercule Poirot Novel)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_m9p",
            "EntityName": "The Hollow (Ulverscroft Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_npl",
            "EntityName": "The Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_npv",
            "EntityName": "The Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_nq2",
            "EntityName": "The Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_nqb",
            "EntityName": "CLOCKS"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_nqm",
            "EntityName": "The Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_nqw",
            "EntityName": "The Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_nr3",
            "EntityName": "The Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_nrc",
            "EntityName": "The Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_nrm",
            "EntityName": "Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_nrw",
            "EntityName": "The Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_nt9",
            "EntityName": "Clocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_pw7",
            "EntityName": "The Clocks (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_pxr",
            "EntityName": "Clocks (Hc Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_py0",
            "EntityName": "The Clocks (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_py8",
            "EntityName": "The Clocks (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_pyj",
            "EntityName": "The Clocks (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_pys",
            "EntityName": "Clocks (Ulverscroft Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_pzb",
            "EntityName": "The Clocks (A Hercule Poirot Murder Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_w88",
            "EntityName": "Appointment with Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_w8j",
            "EntityName": "Appointment With Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_w91",
            "EntityName": "Appointment with Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_w99",
            "EntityName": "Appointment with Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_w9k",
            "EntityName": "Appointment with death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wb0",
            "EntityName": "Appointment with Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wb9",
            "EntityName": "Appointment With Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wbl",
            "EntityName": "Appointment with Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wbv",
            "EntityName": "Appointment with Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wc2",
            "EntityName": "Appointment With Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wcc",
            "EntityName": "Appointment with Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wdp",
            "EntityName": "Appointment with death."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_y10",
            "EntityName": "Appointment with Death (The Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_y18",
            "EntityName": "Appointment with death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_y1p",
            "EntityName": "Appointment with Death (Dell; 10246)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_y1y",
            "EntityName": "Appointment with Death (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_y2f",
            "EntityName": "Appointment with Death (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_y2p",
            "EntityName": "Appointment with Death (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_y2y",
            "EntityName": "Appointment With Death (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_y52",
            "EntityName": "Appointment With Death (G K Hall Large Print Book Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z02",
            "EntityName": "4.50 from Paddington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z0b",
            "EntityName": "4.50 From Paddington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z0l",
            "EntityName": "4.50 from Paddington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z0v",
            "EntityName": "4.50 from Paddington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z12",
            "EntityName": "4.50 from Paddington."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z1b",
            "EntityName": "4.50 from Paddington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsx_1",
            "EntityName": "Hickory dickory dock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsx_h",
            "EntityName": "The thirteen problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsx_y",
            "EntityName": "Dead man's folly"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxr2",
            "EntityName": "Elephants can remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxrj",
            "EntityName": "The murder at the vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxrz",
            "EntityName": "Sleeping murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxsd",
            "EntityName": "Sad cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxsv",
            "EntityName": "The big four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxt8",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxtq",
            "EntityName": "The murder on the links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxv4",
            "EntityName": "The regatta mystery and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxvl",
            "EntityName": "Taken at the flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxw0",
            "EntityName": "At Bertram's Hotel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxwg",
            "EntityName": "Third girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxwx",
            "EntityName": "Poirot investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxxb",
            "EntityName": "Cards on the table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxxs",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxy6",
            "EntityName": "While the light lasts and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxyp",
            "EntityName": "Death in the clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxz5",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsxzm",
            "EntityName": "Hallowe'en party"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy0c",
            "EntityName": "Mrs. McGinty's dead"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy0t",
            "EntityName": "Destination unknown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy17",
            "EntityName": "Five little pigs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy1x",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy2b",
            "EntityName": "Murder on the Orient Express"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy2s",
            "EntityName": "A pocket full of rye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy36",
            "EntityName": "A murder is announced"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy3n",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy42",
            "EntityName": "Dumb witness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy4j",
            "EntityName": "Lord Edgware dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy4z",
            "EntityName": "The seven dials mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy5d",
            "EntityName": "The secret adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy5v",
            "EntityName": "The mystery of the blue train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy68",
            "EntityName": "The harlequin tea set and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy6q",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy74",
            "EntityName": "Evil under the sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy7l",
            "EntityName": "One, two, buckle my shoe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy80",
            "EntityName": "Cat among the pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tsy8g",
            "EntityName": "Partners in crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_0n",
            "EntityName": "The Pale Horse (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_0x",
            "EntityName": "The Pale Horse (The Agatha Christie mystery collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_15",
            "EntityName": "Pale Horse (R)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_1f",
            "EntityName": "The Pale Horse (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_qt",
            "EntityName": "Death On The Nile (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_rm",
            "EntityName": "Death on the Nile (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_rw",
            "EntityName": "Death on the Nile (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_s3",
            "EntityName": "Death on the Nile (Hercule Poirot Mysteries (Audio))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_sc",
            "EntityName": "Death on the Nile (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_sm",
            "EntityName": "Death on the Nile (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_tk",
            "EntityName": "Death on the Nile (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_wr",
            "EntityName": "Death on the Nile (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmk1",
            "EntityName": "The A.B.C. murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzml0",
            "EntityName": "The A.B.C. murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmlr",
            "EntityName": "The A.B.C. Murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmm0",
            "EntityName": "The A.B.C. Murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmm8",
            "EntityName": "The A.B.C. Murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmmj",
            "EntityName": "The A.B.C. Murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmms",
            "EntityName": "The A.B.C. Murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmn0",
            "EntityName": "The A.B.C. Murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmn8",
            "EntityName": "The A. B. C. Murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmnk",
            "EntityName": "The A. B. C. Murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmnv",
            "EntityName": "The A.B.C. Murders (The Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzmpj",
            "EntityName": "The A.B.C. murders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznqp",
            "EntityName": "Death Comes as the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznqy",
            "EntityName": "Death Comes as the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznsk",
            "EntityName": "Death Comes as the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznt2",
            "EntityName": "Death Comes as the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzntb",
            "EntityName": "Death Comes as the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzntl",
            "EntityName": "Death Comes As the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznv3",
            "EntityName": "Death Comes as the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznvc",
            "EntityName": "Death Comes As the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznvx",
            "EntityName": "Death Comes as the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznw4",
            "EntityName": "Death Comes As the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznwp",
            "EntityName": "Death Comes as the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tznwy",
            "EntityName": "Death Comes as the End"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzps5",
            "EntityName": "Death Comes as the End (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzpsf",
            "EntityName": "Death Comes As the End (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzpsq",
            "EntityName": "Death Comes As the End (Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzpsz",
            "EntityName": "Death comes as the end"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzpv2",
            "EntityName": "Death Comes As the End (Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzql3",
            "EntityName": "After the Funeral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqlc",
            "EntityName": "After the Funeral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqlm",
            "EntityName": "After the Funeral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqlw",
            "EntityName": "After the Funeral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqm3",
            "EntityName": "After the Funeral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqmc",
            "EntityName": "After the Funeral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqmn",
            "EntityName": "After the funeral."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqmx",
            "EntityName": "After The Funeral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqnn",
            "EntityName": "After the Funeral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqnx",
            "EntityName": "After the funeral."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqpf",
            "EntityName": "After the Funeral (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzscv",
            "EntityName": "After the Funeral (BBC Audio Crime)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzsd2",
            "EntityName": "After the Funeral (BBC Audio Crime)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzsdb",
            "EntityName": "After the Funeral (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzsdl",
            "EntityName": "After the Funeral (The Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzsdv",
            "EntityName": "After the Funeral (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzsf2",
            "EntityName": "After the Funeral (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzsfl",
            "EntityName": "After the Funeral (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwk8",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwks",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwl7",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwlq",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwlz",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwm6",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwmr",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwn_",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwn6",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwng",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwnr",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwp7",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwpy",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwq5",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwqf",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzwqp",
            "EntityName": "Death on the Nile."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyh6",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyhn",
            "EntityName": "Death on the Nile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyj2",
            "EntityName": "Death on the Nile (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyjc",
            "EntityName": "Death on the Nile (The Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyjn",
            "EntityName": "Death on the Nile (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyk4",
            "EntityName": "Death on the Nile (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyq5",
            "EntityName": "The pale horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyqn",
            "EntityName": "The Pale Horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyqx",
            "EntityName": "The Pale Horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyr4",
            "EntityName": "The Pale Horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyrn",
            "EntityName": "Pale Horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyry",
            "EntityName": "The Pale Horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzys5",
            "EntityName": "Pale Horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzysg",
            "EntityName": "The Pale Horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzysq",
            "EntityName": "The pale horse."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzysz",
            "EntityName": "The Pale Horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyt6",
            "EntityName": "The pale horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzytn",
            "EntityName": "Pale horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyv1",
            "EntityName": "The Pale Horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyvw",
            "EntityName": "The pale horse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_14g",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_15_",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_150",
            "EntityName": "Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_16f",
            "EntityName": "The mysterious affair at Styles."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_16p",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_174",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_17f",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_17w",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_18_",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_189",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_2s4",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_2tc",
            "EntityName": "Mysterious Affair at Styles/Cassettes (1362)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_2tx",
            "EntityName": "The Mysterious Affair at Styles (Dodo Press)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_2v5",
            "EntityName": "The Mysterious Affair at Styles (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_2vg",
            "EntityName": "The Mysterious Affair at Styles (Hercule Poirot Mysteries (Audio))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_2vq",
            "EntityName": "The Mysterious Affair At Styles (Classic Books on Cassettes Collection) (Classic Books on Cassettes Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_2vz",
            "EntityName": "The Mysterious Affair at Styles (Hercule Poirot Mysteries (Audio))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_2wg",
            "EntityName": "The Mysterious Affair at Styles, Large-Print Edition"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v006z",
            "EntityName": "4.50 from Paddington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v007d",
            "EntityName": "4.50 from Paddington (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v007n",
            "EntityName": "4.50 from Paddington (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0084",
            "EntityName": "4.50 from Paddington (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v008p",
            "EntityName": "4.50 from Paddington (BBC Audio Crime)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v008y",
            "EntityName": "4.50 from Paddington (Agatha Christie Signature Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0095",
            "EntityName": "4.50 from Paddington (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00bc",
            "EntityName": "4.50 from Paddington (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01wm",
            "EntityName": "4.50 from Paddington (Miss Marple Mysteries (Audio))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0vs1",
            "EntityName": "The Witness for the Prosecution and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0vs9",
            "EntityName": "The Witness for the Prosecution and Other Stories (Mystery Masters Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0vsk",
            "EntityName": "The Witness for the Prosecution and Other Stories (Mystery Masters Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0vst",
            "EntityName": "The witness for the prosecution and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0vvh",
            "EntityName": "Witness for the Prosecution and Other Stories (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0vwx",
            "EntityName": "Witness for the prosecution, and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v11lk",
            "EntityName": "The under dog and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v11m_",
            "EntityName": "The Under Dog and Other Stories (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v11n_",
            "EntityName": "The Under Dog and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v11p7",
            "EntityName": "The Under Dog and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v11qf",
            "EntityName": "The Under Dog and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v13_4",
            "EntityName": "The adventure of the Christmas pudding"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v13_l",
            "EntityName": "The Adventure of the Christmas Pudding (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v13_v",
            "EntityName": "The Adventure of the Christmas Pudding (The Crime Club)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v13zc",
            "EntityName": "The adventure of the Christmas pudding"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v13zm",
            "EntityName": "The Adventure of the Christmas Pudding and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v13zw",
            "EntityName": "The Adventure of the Christmas Pudding"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1402",
            "EntityName": "The Adventure of the Christmas Pudding and The Mystery of the Spanish Chest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v140b",
            "EntityName": "The adventure of the Christmas pudding and a selection of entrées."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v140l",
            "EntityName": "The adventure of the Christmas pudding, and a selection of entrées"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v144x",
            "EntityName": "The Golden Ball and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v146c",
            "EntityName": "The golden ball and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1473",
            "EntityName": "The Golden Ball and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v147c",
            "EntityName": "The golden ball and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v147m",
            "EntityName": "The Golden Ball and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1483",
            "EntityName": "The Golden Ball and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v148c",
            "EntityName": "The Golden Ball and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v148n",
            "EntityName": "Golden Ball and Other Stories (Agatha Christie Mysteries Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v14bc",
            "EntityName": "The Golden Ball and Other Stories (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v14yb",
            "EntityName": "Problem at Pollensa Bay & Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v171_",
            "EntityName": "Three blind mice and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1717",
            "EntityName": "Three blind mice and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v172g",
            "EntityName": "Three blind mice and other stories (Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17ry",
            "EntityName": "The Mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17sg",
            "EntityName": "The mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17sq",
            "EntityName": "The Mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17t_",
            "EntityName": "The \\\"Mysterious Mr Quin\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17t7",
            "EntityName": "The mysterious Mr. Quin."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17th",
            "EntityName": "The Mysterious Mr.Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17tr",
            "EntityName": "The Mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17v_",
            "EntityName": "The Mysterious Mr Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17vh",
            "EntityName": "The Mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17w7",
            "EntityName": "The Mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17x1",
            "EntityName": "The Mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17xb",
            "EntityName": "The Mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17xv",
            "EntityName": "The Mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17yc",
            "EntityName": "The mysterious Mr Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v17yt",
            "EntityName": "The Mysterious Mr. Quin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1800",
            "EntityName": "The Listerdale Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v180q",
            "EntityName": "The Listerdale Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v180z",
            "EntityName": "The Listerdale Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1817",
            "EntityName": "The Listerdale Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v181h",
            "EntityName": "The Listerdale Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v181r",
            "EntityName": "The Listerdale mystery."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v182f",
            "EntityName": "The Listerdale Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v182z",
            "EntityName": "The Listerdale Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1839",
            "EntityName": "The Listerdale Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v183k",
            "EntityName": "The Listerdale mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v184g",
            "EntityName": "The Listerdale mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v18lh",
            "EntityName": "The Mysterious Mr. Quin (Ulverscroft Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v18m0",
            "EntityName": "The Mysterious Mr.Quin (Agatha Christie Signature Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v18mr",
            "EntityName": "The Mysterious Mr. Quin (Paperback)) (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v18nr",
            "EntityName": "The Listerdale Mystery (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v195h",
            "EntityName": "Murder in the Mews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1968",
            "EntityName": "Murder in the Mews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v196j",
            "EntityName": "Murder in the mews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v196y",
            "EntityName": "Murder in the mews."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1975",
            "EntityName": "Murder in the Mews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v197f",
            "EntityName": "Murder in the mews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v197v",
            "EntityName": "Murder in the Mews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1982",
            "EntityName": "Murder in the Mews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v198b",
            "EntityName": "Murder in the mews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v198s",
            "EntityName": "Murder in the Mews (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1999",
            "EntityName": "Murder in the Mews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v199k",
            "EntityName": "Murder in the Mews (Ulverscroft Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19cw",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19d3",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19dc",
            "EntityName": "Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19dm",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19f3",
            "EntityName": "Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19g3",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19gd",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19gn",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19gx",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19h4",
            "EntityName": "The labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19hl",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19j2",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19jb",
            "EntityName": "The labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19k6",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19ll",
            "EntityName": "The Labours of Hercules"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19nr",
            "EntityName": "Double Sin and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19pf",
            "EntityName": "Double sin and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19qx",
            "EntityName": "Double Sin and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19rl",
            "EntityName": "Double Sin and other stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19s8",
            "EntityName": "Double Sin and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v19vm",
            "EntityName": "Double Sin and Other Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1b6g",
            "EntityName": "The Labours of Hercules (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bb3",
            "EntityName": "The Labours of Hercules (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bbc",
            "EntityName": "Murder in the Mews (Agatha Christie Signature Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bs_",
            "EntityName": "Problem at Pollensa Bay"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bs8",
            "EntityName": "Problem at Pollensa Bay"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bt7",
            "EntityName": "Problem at Pollensa Bay"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bth",
            "EntityName": "Problem at Pollensa Bay"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bty",
            "EntityName": "Problem at Pollensa Bay"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bvb",
            "EntityName": "Problem at Pollensa Bay and 7 Other Mysteries"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bw0",
            "EntityName": "Problem at Pollensa Bay and 7 Other Mysteries"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1bw8",
            "EntityName": "Problem At Pollensa Bay and Seven Other Mysteries"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cbz",
            "EntityName": "Parker Pyne Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cc_",
            "EntityName": "Parker Pyne Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cc6",
            "EntityName": "Parker Pyne Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cch",
            "EntityName": "Parker Pyne Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1ccr",
            "EntityName": "Parker Pyne Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cd7",
            "EntityName": "Parker Pyne Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cdh",
            "EntityName": "Parker Pyne investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cdy",
            "EntityName": "Parker Pyne investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cfm",
            "EntityName": "Parker Pyne investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cfw",
            "EntityName": "Parker Pyne Investigates (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cg4",
            "EntityName": "Parker Pyne Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cgd",
            "EntityName": "Parker Pyne Investigates (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1chk",
            "EntityName": "Parker Pyne investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1cjg",
            "EntityName": "Parker Pyne Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w10",
            "EntityName": "By the Pricking of My Thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w18",
            "EntityName": "By the Pricking of My Thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w1j",
            "EntityName": "By the Pricking of my Thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w1s",
            "EntityName": "By the Pricking of My Thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w20",
            "EntityName": "By the pricking of my thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w2h",
            "EntityName": "By the Pricking of My Thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w2s",
            "EntityName": "By the Pricking of My Thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w30",
            "EntityName": "By the Pricking of My Thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w38",
            "EntityName": "By the Pricking of My Thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w3j",
            "EntityName": "By The Pricking Of My Thumbs (Tommy and Tuppence Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w3s",
            "EntityName": "By the pricking of my thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w45",
            "EntityName": "By the pricking of my thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w52",
            "EntityName": "By the Pricking of My Thumbs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w5b",
            "EntityName": "By the Pricking of My Thumbs (Tommy & Tuppence Chronology)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w69",
            "EntityName": "Postern of fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w71",
            "EntityName": "Postern of fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w7j",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w7s",
            "EntityName": "Postern of fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w87",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w8j",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w8s",
            "EntityName": "Postern of fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1w9z",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wcg",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wcq",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wcz",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wd6",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wdg",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wdq",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wf6",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wfr",
            "EntityName": "Postern of fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1whf",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wj3",
            "EntityName": "Postern of fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wjk",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wjv",
            "EntityName": "Endless night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wk_",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wkr",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wl_",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wl7",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wlj",
            "EntityName": "Endless night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wm_",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wm7",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wmh",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wmr",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wn7",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wp6",
            "EntityName": "Endless Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wqg",
            "EntityName": "Endless night."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wtp",
            "EntityName": "By the Pricking of My Thumbs (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1wvc",
            "EntityName": "By the Pricking of My Thumbs (Tommy and Tuppence Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1ww2",
            "EntityName": "By the Pricking of My Thumbs (Tommy and Tuppence Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1x1f",
            "EntityName": "Postern of Fate (Tommy & Tuppence Chronology)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1x1p",
            "EntityName": "Postern of Fate (G K Hall Large Print Book Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1x1z",
            "EntityName": "Postern of Fate (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1x26",
            "EntityName": "Endless Night (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1x2g",
            "EntityName": "Postern of Fate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1x2r",
            "EntityName": "Endless night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v1x35",
            "EntityName": "Endless Night (Ulverscroft Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v21_3",
            "EntityName": "The Secret of Chimneys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v21_c",
            "EntityName": "The secret of Chimneys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v21_t",
            "EntityName": "Secret of Chimneys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v21zc",
            "EntityName": "The Secret of Chimneys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v21zm",
            "EntityName": "The Secret of Chimneys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v21zw",
            "EntityName": "The Secret of Chimneys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2201",
            "EntityName": "The secret of chimneys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v220j",
            "EntityName": "The Secret of Chimneys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v220s",
            "EntityName": "The secret of chimneys."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2216",
            "EntityName": "The secret of Chimneys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v221n",
            "EntityName": "The secret of chimneys."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v221x",
            "EntityName": "The Secret of Chimneys (Ulverscroft Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2225",
            "EntityName": "The Secret of Chimneys (Mystery Masters Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v222f",
            "EntityName": "The Secret of Chimneys (Agatha Christie Signature Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v224w",
            "EntityName": "The Secret of Chimneys (Mystery Masters Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v22w4",
            "EntityName": "The Secret Of Chimneys (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v22wd",
            "EntityName": "Secret of Chimneys (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v24_5",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v24_x",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v24zg",
            "EntityName": "They came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v24zy",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2504",
            "EntityName": "They came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v250m",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v250w",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2513",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v251c",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v251m",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v251w",
            "EntityName": "They came to Baghdad."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v252w",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v256b",
            "EntityName": "They Came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25l9",
            "EntityName": "Towards Zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25m7",
            "EntityName": "Towards Zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25mh",
            "EntityName": "Towards zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25mz",
            "EntityName": "Towards Zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25n6",
            "EntityName": "Towards Zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25nh",
            "EntityName": "Towards Zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25ns",
            "EntityName": "Towards zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25p6",
            "EntityName": "Towards zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25pp",
            "EntityName": "Towards zero."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25py",
            "EntityName": "Sittaford Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25q5",
            "EntityName": "Towards Zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25qg",
            "EntityName": "The Sittaford Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25qq",
            "EntityName": "The Sittaford Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25qz",
            "EntityName": "Towards zero."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25rd",
            "EntityName": "Towards zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25rt",
            "EntityName": "Towards zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25s_",
            "EntityName": "The Sittaford mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25s7",
            "EntityName": "The Sittaford Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25sh",
            "EntityName": "The Sittaford Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25sr",
            "EntityName": "The Sittaford Mystery (BBC Radio Presents)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25tf",
            "EntityName": "The Sittaford Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25tp",
            "EntityName": "The Sittaford mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25v3",
            "EntityName": "The Sittaford Mystery (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25vc",
            "EntityName": "The Sittaford Mystery (Mystery Masters Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25vm",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25vw",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25w3",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25wc",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25wm",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25ww",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25x3",
            "EntityName": "Sparkling cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25xc",
            "EntityName": "Sparkling cyanide."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25xm",
            "EntityName": "Sparkling Cyanide (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25xw",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25y4",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25yd",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25yn",
            "EntityName": "Sparkling Cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25yx",
            "EntityName": "Sparkling cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v25zb",
            "EntityName": "Sparkling cyanide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v26_2",
            "EntityName": "The Sittaford Mystery (Agatha Christie Signature Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v26_b",
            "EntityName": "The Sittaford Mystery (Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v26kk",
            "EntityName": "They Came to Baghdad (Dell Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v26lr",
            "EntityName": "They came to Baghdad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v26n2",
            "EntityName": "They Came to Baghdad (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v26nn",
            "EntityName": "They Came to Baghdad (Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v26p_",
            "EntityName": "They Came to Baghdad (Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v26pq",
            "EntityName": "They Came to Baghdad (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v26qr",
            "EntityName": "They Came to Baghdad (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2701",
            "EntityName": "The Sittaford Mystery (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2709",
            "EntityName": "Sittaford Mystery (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v270k",
            "EntityName": "The Sittaford Mystery (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v270t",
            "EntityName": "The Sittaford Mystery (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v272n",
            "EntityName": "Sittaford Mystery (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2759",
            "EntityName": "Sparkling Cyanide (Variant Title = Remembered Death)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v275k",
            "EntityName": "Sparkling Cyanide (Mystery Masters Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v275t",
            "EntityName": "Sparkling Cyanide (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2762",
            "EntityName": "Sparkling Cyanide (Audio Editions Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v276t",
            "EntityName": "Sparkling Cyanide (Agatha Christie Signature Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v277k",
            "EntityName": "Towards zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v277z",
            "EntityName": "Towards Zero (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2796",
            "EntityName": "Towards zero"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v279m",
            "EntityName": "Towards Zero (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v279w",
            "EntityName": "Towards Zero."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v27b4",
            "EntityName": "Towards Zero (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v27bn",
            "EntityName": "Towards Zero (Audio Editions Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v27cc",
            "EntityName": "Towards Zero (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v27cm",
            "EntityName": "Towards Zero (Agatha Christie Mysteries Collection (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v27cw",
            "EntityName": "Towards Zero (Audio Editions Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rq8",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rqr",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rr_",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rr0",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rr8",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rrj",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rs_",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rs7",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rsj",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rt8",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rtj",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rts",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rv0",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rv9",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rvk",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2rxc",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2ryx",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s3b",
            "EntityName": "Murder is easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s3t",
            "EntityName": "Murder Is Easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s41",
            "EntityName": "Murder Is Easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s49",
            "EntityName": "Murder Is Easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s4k",
            "EntityName": "Murder Is Easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s4t",
            "EntityName": "Murder Is Easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s51",
            "EntityName": "Murder Is Easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s59",
            "EntityName": "Murder is easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s5r",
            "EntityName": "Murder is easy."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s64",
            "EntityName": "Murder is easy."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s6d",
            "EntityName": "Murder is easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s6v",
            "EntityName": "Murder is easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2s78",
            "EntityName": "Murder is easy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2skk",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2skt",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2sl2",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2slb",
            "EntityName": "CROOKED HOUSE"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2sll",
            "EntityName": "Crooked house"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2sm1",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2sm9",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2smk",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2smv",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2sn2",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2snb",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2snl",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2snv",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2sp2",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2spb",
            "EntityName": "Crooked House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2spl",
            "EntityName": "The crooked house"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t45",
            "EntityName": "Murder Is Easy (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t4f",
            "EntityName": "Murder is Easy (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t4q",
            "EntityName": "Murder Is Easy (Audio Editions Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t64",
            "EntityName": "Murder Is Easy (Audio Editions Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t6d",
            "EntityName": "Nemesis (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t6n",
            "EntityName": "Nemesis (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t6x",
            "EntityName": "Nemesis (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t7n",
            "EntityName": "Murder Is Easy (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t7x",
            "EntityName": "Nemesis (Cover to Cover Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t84",
            "EntityName": "Nemesis (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t8d",
            "EntityName": "Nemesis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tbp",
            "EntityName": "Nemesis (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tdl",
            "EntityName": "The murder at the vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tf_",
            "EntityName": "The Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tf1",
            "EntityName": "The murder at the vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tfj",
            "EntityName": "The murder at the vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tg7",
            "EntityName": "The Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tgh",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tgs",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2th0",
            "EntityName": "The Murder At the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2th8",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2thj",
            "EntityName": "The Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2ths",
            "EntityName": "The Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tjj",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tjs",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tk0",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tk8",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v5p",
            "EntityName": "Man in the Brown Suit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v6c",
            "EntityName": "The Man in the Brown Suit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v6m",
            "EntityName": "The Man in the Brown Suit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v6x",
            "EntityName": "The Man in the Brown Suit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v74",
            "EntityName": "The Man in the Brown Suit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v7n",
            "EntityName": "The Man In The Brown Suit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v88",
            "EntityName": "The Man in the Brown Suit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v8t",
            "EntityName": "The Man in the Brown Suit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v92",
            "EntityName": "The Man in the Brown Suit (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v9b",
            "EntityName": "The Man in the Brown Suit (Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v9l",
            "EntityName": "The Man in the Brown Suit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v9v",
            "EntityName": "The Man in the Brown Suit (Agatha Christie Mysteries Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vb2",
            "EntityName": "Man in the Brown Suit (Ulverscroft Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vbc",
            "EntityName": "The Man in the Brown Suit (Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vby",
            "EntityName": "Man in the Brown Suit (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vk4",
            "EntityName": "Crooked house."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vkd",
            "EntityName": "Crooked House (Winterbrook Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vkn",
            "EntityName": "Crooked house"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vll",
            "EntityName": "Crooked House (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vlv",
            "EntityName": "Crooked House (Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vmd",
            "EntityName": "Crooked House (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vvt",
            "EntityName": "Crooked House (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2w79",
            "EntityName": "The Man In The Brown Suit (Agatha Christie Mystery Collection) Bantam Blue Leatherette Edition"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2w81",
            "EntityName": "The Man In The Brown Suit (Classic Books on Cassettes Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wb4",
            "EntityName": "The Man in the Brown Suit (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wft",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wh1",
            "EntityName": "The murder at the vicarage."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wj0",
            "EntityName": "The Murder at the Vicarage (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wj9",
            "EntityName": "The murder at the vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wjq",
            "EntityName": "The Murder at the Vicarage (Acting Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wjz",
            "EntityName": "Murder at the Vicarage (Miss Marple Mystery Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wk6",
            "EntityName": "The Murder at the Vicarage (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wkg",
            "EntityName": "Murder at the vicarage."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wkq",
            "EntityName": "Murder at the Vicarage (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wkz",
            "EntityName": "Murder at the Vicarage (BBC Radio Presents)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wlp",
            "EntityName": "Murder at the Vicarage (Miss Marple Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wly",
            "EntityName": "Murder at the Vicarage (Agatha Christie Mysteries Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wmf",
            "EntityName": "Murder at the Vicarage (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2wsw",
            "EntityName": "The Murder at the Vicarage (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2x7b",
            "EntityName": "The Murder at the Vicarage (BBC Full Cast Dramatization)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2x7l",
            "EntityName": "Murder at the Vicarage (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3_fr",
            "EntityName": "They Do It with Mirrors (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3_g_",
            "EntityName": "They Do It With Mirrors (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3_gh",
            "EntityName": "They Do It With Mirrors (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3_h_",
            "EntityName": "They Do It With Mirrors (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3_hr",
            "EntityName": "They Do It with Mirrors (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3_j7",
            "EntityName": "They Do It with Mirrors (Miss Marple Mysteries (Audio Partners))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3_k0",
            "EntityName": "They Do It With Mirrors (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jgy",
            "EntityName": "The murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jhd",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jhn",
            "EntityName": "The murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jj3",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jjc",
            "EntityName": "The Murder of Roger Ackroyd (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jjm",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jk4",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jkd",
            "EntityName": "The murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jkw",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jld",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jlp",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jly",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jm5",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jnn",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jp9",
            "EntityName": "The Murder of Roger Ackroyd. (Lernmaterialien)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jpl",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jpw",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3jq3",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3l7t",
            "EntityName": "Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3l81",
            "EntityName": "The Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3l89",
            "EntityName": "Murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3l8q",
            "EntityName": "The Murder of Roger Ackroyd (Hercule Poirot Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3l8z",
            "EntityName": "The murder of Roger Ackroyd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3l9d",
            "EntityName": "The murder of Roger Ackroyd."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3l9t",
            "EntityName": "The Murder of Roger Ackroyd (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3lb1",
            "EntityName": "The Murder of Roger Ackroyd (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3s3z",
            "EntityName": "Absent in the Spring"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3s47",
            "EntityName": "Absent in the Spring"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3s4s",
            "EntityName": "Absent in the Spring"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3s68",
            "EntityName": "Absent in the Spring (Westmacott)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3s71",
            "EntityName": "Absent in the Spring"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3svs",
            "EntityName": "The Rose and the Yew Tree (Westmacott)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3sww",
            "EntityName": "Rose and the Yew Tree"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3sxf",
            "EntityName": "The Rose and the Yew Tree"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3sy4",
            "EntityName": "Rose and the Yew Tree"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3v_p",
            "EntityName": "The Burden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w0w",
            "EntityName": "Burden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w14",
            "EntityName": "Burden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w1f",
            "EntityName": "The Burden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w34",
            "EntityName": "Burden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w3y",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w45",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w4f",
            "EntityName": "The body in the library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w4x",
            "EntityName": "The body in the library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w5c",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w5m",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w5w",
            "EntityName": "The body in the library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w6b",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w6l",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w6v",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w72",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w7c",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w7m",
            "EntityName": "The body in the library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w7x",
            "EntityName": "Body in the library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3w8l",
            "EntityName": "The Body in the Library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3y_p",
            "EntityName": "The Body In The Library (A Miss Marple Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3ycw",
            "EntityName": "The body in the library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3yf3",
            "EntityName": "The Body in the Library (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3yfc",
            "EntityName": "The body in the library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3yg2",
            "EntityName": "The Body in the Library (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3ygn",
            "EntityName": "The Body in the Library (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3ygx",
            "EntityName": "The Body in the Library (BBC Audio Crime)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3yh4",
            "EntityName": "The Body in the Library (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3yhd",
            "EntityName": "The Body in the Library (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3yj2",
            "EntityName": "Body in the Library (Miss Marple Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3yjb",
            "EntityName": "The Body in the Library (BBC Radio Collection: Crimes and Thrillers)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3yk1",
            "EntityName": "The Body in the Library (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3z7_",
            "EntityName": "They Do It with Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3z8_",
            "EntityName": "They Do It with Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3z8h",
            "EntityName": "They do it with Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3z8r",
            "EntityName": "They Do It with Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3z97",
            "EntityName": "They Do It With Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3z9h",
            "EntityName": "They Do It with Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3z9r",
            "EntityName": "They do it with mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3zb4",
            "EntityName": "They Do It With Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3zbf",
            "EntityName": "They Do It With Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3zbq",
            "EntityName": "They Do It with Mirrors (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3zbz",
            "EntityName": "They Do It With Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3zc6",
            "EntityName": "They Do It With Mirrors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4_g9",
            "EntityName": "Star over Bethlehem and other stories by Agatha Christie Mallowan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4_h9",
            "EntityName": "Star over Bethlehem, and other stories (The Agatha Christie mystery collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v41x5",
            "EntityName": "Unfinished Portrait"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v41xg",
            "EntityName": "Unfinished Portrait"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v41xq",
            "EntityName": "Unfinished Portrait (Westmacott)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4wn4",
            "EntityName": "Come, Tell Me How You Live"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4wnd",
            "EntityName": "Come, Tell Me How You Live"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4wnn",
            "EntityName": "Come, Tell Me How You Live"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4wp5",
            "EntityName": "Come, Tell Me How You Live"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4wpq",
            "EntityName": "Come, tell me how you live"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4wq4",
            "EntityName": "Come, Tell Me How You Live (Common Reader Editions: Rediscoveries: LONDON)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4wqf",
            "EntityName": "Come, tell me how you live"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4wrb",
            "EntityName": "Come tell me how you live"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4ws8",
            "EntityName": "Come, Tell Me How You Live"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5qd1",
            "EntityName": "Poems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5qdt",
            "EntityName": "Poems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5qf8",
            "EntityName": "Poems (The Agatha Christie mystery collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5z7n",
            "EntityName": "Unexpected Guest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5z8w",
            "EntityName": "The Unexpected Guest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5z93",
            "EntityName": "The Unexpected Guest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5z9c",
            "EntityName": "The unexpected guest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5zb4",
            "EntityName": "The Unexpected Guest (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5zbd",
            "EntityName": "The Unexpected Guest (Acting Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7g_6",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7g_z",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7gzg",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7gzq",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7gzz",
            "EntityName": "Peril At End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7h0f",
            "EntityName": "Peril at End House (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7h0p",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7h0y",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7h1_",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7h16",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7h1g",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7h1q",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7h27",
            "EntityName": "Peril at End House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7jpd",
            "EntityName": "Peril at end house."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7jpn",
            "EntityName": "Peril at End House."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7jqj",
            "EntityName": "Peril at End House (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7jqs",
            "EntityName": "Peril at End House (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7jr0",
            "EntityName": "Peril at End House (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7jr8",
            "EntityName": "Peril at End House (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7jrz",
            "EntityName": "Peril at End House (The Agatha Christie Mystery Collection) (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7n91",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7n9j",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7nb7",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7nbs",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7nc8",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7ncr",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7nd9",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7ndl",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7ndv",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7nf3",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7nfm",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7nfx",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7ng4",
            "EntityName": "CURTAIN"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7ngf",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7ngp",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7q_4",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7q_y",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7r0l",
            "EntityName": "Curtain (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7r0v",
            "EntityName": "Curtain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7r18",
            "EntityName": "Curtain (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7r1j",
            "EntityName": "Curtain (Ulverscroft Large Print Ser.)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7r1s",
            "EntityName": "Curtain (The Agatha Christie mystery collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7r29",
            "EntityName": "Curtain (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vf0",
            "EntityName": "Third girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vfh",
            "EntityName": "Third girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vg6",
            "EntityName": "Third Girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vgr",
            "EntityName": "Third Girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vh0",
            "EntityName": "Third Girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vh8",
            "EntityName": "Third Girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vhk",
            "EntityName": "Third Girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vhv",
            "EntityName": "Third girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vj8",
            "EntityName": "Third Girl (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vjj",
            "EntityName": "Third Girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vjs",
            "EntityName": "Third girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7vk6",
            "EntityName": "Third Girl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7w7x",
            "EntityName": "A Caribbean Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7w8j",
            "EntityName": "A CARIBBEAN MYSTERY"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7w8t",
            "EntityName": "A Caribbean Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7w91",
            "EntityName": "A Caribbean Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7w99",
            "EntityName": "A Caribbean Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7w9k",
            "EntityName": "A Caribbean Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7w9t",
            "EntityName": "A Caribbean Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wb1",
            "EntityName": "A Caribbean Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wb9",
            "EntityName": "A Caribbean Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wbl",
            "EntityName": "A Caribbean Mystery (Greenway E.)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wbw",
            "EntityName": "A Caribbean Mystery (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wc3",
            "EntityName": "A Caribbean Mystery (Audio Editions)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wcc",
            "EntityName": "A Caribbean Mystery (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wcm",
            "EntityName": "A Caribbean Mystery (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wcw",
            "EntityName": "A Caribbean Mystery (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wdn",
            "EntityName": "A Caribbean Mystery (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wjk",
            "EntityName": "Third Girl (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wjt",
            "EntityName": "Third Girl (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wkh",
            "EntityName": "Third Girl (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wmp",
            "EntityName": "Third Girl (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wmy",
            "EntityName": "Third Girl (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wn6",
            "EntityName": "Third Girl (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wnq",
            "EntityName": "Third Girl (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7wvs",
            "EntityName": "A Caribbean Mystery (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7ww0",
            "EntityName": "A Caribbean Mystery (BBC Radio Presents: An Audio Dramatization)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v7ww8",
            "EntityName": "A Caribbean Mystery (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v88_2",
            "EntityName": "Five little pigs (Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v88_r",
            "EntityName": "Five Little Pigs (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v881_",
            "EntityName": "Five Little Pigs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8817",
            "EntityName": "Five Little Pigs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v881h",
            "EntityName": "Five Little Pigs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v881r",
            "EntityName": "Five Little Pigs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8828",
            "EntityName": "Five Little Pigs (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v882j",
            "EntityName": "Five little pigs."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v882s",
            "EntityName": "Five Little Pigs."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8836",
            "EntityName": "Five Little Pigs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v883g",
            "EntityName": "Five Little Pigs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v883q",
            "EntityName": "Five Little Pigs (Also published as Murder In Retrospect)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v883z",
            "EntityName": "Five Little Pigs (Agatha Christie Mysteries Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8846",
            "EntityName": "Five Little Pigs (The Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k2p",
            "EntityName": "Cards on the table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k34",
            "EntityName": "Cards on the Table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k3d",
            "EntityName": "Cards on the Table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k3n",
            "EntityName": "Cards on the Table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k3x",
            "EntityName": "Cards on the Table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k44",
            "EntityName": "Cards on the Table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k4d",
            "EntityName": "Cards on the table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k4t",
            "EntityName": "Cards on the table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k57",
            "EntityName": "Cards on the table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k5n",
            "EntityName": "Cards on the table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k62",
            "EntityName": "Cards on the table."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8k6l",
            "EntityName": "Cards on the table"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8l60",
            "EntityName": "Cards on the Table (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8l7h",
            "EntityName": "Cards on the Table (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8l80",
            "EntityName": "Cards on the Table (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8l88",
            "EntityName": "Cards on the Table (Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8l8j",
            "EntityName": "Cards on the Table (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8l99",
            "EntityName": "Cards on the Table (A Hercule Poirot Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8l9k",
            "EntityName": "Cards on the table (Agatha Christie mystery collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8l9t",
            "EntityName": "Cards on the Table (Agatha Christie Mysteries Collection (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8lb9",
            "EntityName": "Cards on the Table (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v8lbk",
            "EntityName": "Cards on the Table (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v986y",
            "EntityName": "Cat Among the Pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v987_",
            "EntityName": "Cat Among the Pigeons (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v987r",
            "EntityName": "Cat Among the Pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9887",
            "EntityName": "Cat Among the Pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v988z",
            "EntityName": "Cat Among the Pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v989_",
            "EntityName": "Cat among the Pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9898",
            "EntityName": "Cat Among the Pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v989j",
            "EntityName": "Cat among the pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v98b7",
            "EntityName": "Cat Among the Pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v98bh",
            "EntityName": "Cat Among the Pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v98br",
            "EntityName": "Cat Among the Pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9b3d",
            "EntityName": "Cat among the pigeons."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9b4c",
            "EntityName": "Cat among the pigeons."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9b4w",
            "EntityName": "Cat among the pigeons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9b5b",
            "EntityName": "Cat Among the Pigeons (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9b5l",
            "EntityName": "A Cat Among the Pigeons (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9b62",
            "EntityName": "Cat Among the Pigeons (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9b6b",
            "EntityName": "Cat Among the Pigeons ( A Hercule Poirot Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9b73",
            "EntityName": "Cat Among the Pigeons (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9b8j",
            "EntityName": "Cat Among the Pigeons (Ulverscroft Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9f_6",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9f_y",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9ftz",
            "EntityName": "Evil under the sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fvf",
            "EntityName": "Evil under the sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fvx",
            "EntityName": "Evil Under the Sun (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fwm",
            "EntityName": "Evil under the sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fx2",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fxs",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fy0",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fyp",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fz5",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fzf",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fzp",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9fzy",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9g0r",
            "EntityName": "Evil Under the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hk8",
            "EntityName": "Evil under the Sun (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hkj",
            "EntityName": "Evil under the sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hky",
            "EntityName": "Evil Under the Sun (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hl5",
            "EntityName": "Evil under the sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hlm",
            "EntityName": "Evil under the sun."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hm4",
            "EntityName": "Evil Under the Sun (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hmd",
            "EntityName": "Evil Under the Sun (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hmn",
            "EntityName": "Evil Under the Sun (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hmx",
            "EntityName": "Evil Under the Sun (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v9hn_",
            "EntityName": "Evil Under the Sun (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8_c",
            "EntityName": "Elephants can remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8_n",
            "EntityName": "Elephants Can Remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8_x",
            "EntityName": "Elephants can remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8w_",
            "EntityName": "Elephants Can Remember (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8x7",
            "EntityName": "Elephants can remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8xq",
            "EntityName": "Elephants can remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8y5",
            "EntityName": "Elephants Can Remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8yx",
            "EntityName": "Elephants can remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8zc",
            "EntityName": "Elephants Can Remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8zm",
            "EntityName": "Elephants Can Remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb8zx",
            "EntityName": "Elephants can remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb90b",
            "EntityName": "Elephants Can Remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb90l",
            "EntityName": "Elephants Can Remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb90w",
            "EntityName": "Elephants Can Remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb913",
            "EntityName": "Elephants Can Remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vb91y",
            "EntityName": "Elephants can remember."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbc4q",
            "EntityName": "Elephants Can Remember (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbc5w",
            "EntityName": "Elephants can remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbc69",
            "EntityName": "Elephants Can Remember (The Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbc6l",
            "EntityName": "Elephants Can Remember (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbc6v",
            "EntityName": "Elephants Can Remember (Agatha Christie Mysteries Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbc73",
            "EntityName": "Elephants Can Remember (Hercule Poirot Mysteries (Audio))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbc89",
            "EntityName": "Elephants Can Remember (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd0s",
            "EntityName": "One, Two, Buckle My Shoe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd20",
            "EntityName": "One, Two, Buckle My Shoe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd2r",
            "EntityName": "One, Two, Buckle My Shoe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd38",
            "EntityName": "One, Two, Buckle My Shoe (Agatha Christie Mysteries Collection (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd3j",
            "EntityName": "One, Two, Buckle My Shoe (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd3s",
            "EntityName": "One, Two, Buckle My Shoe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd40",
            "EntityName": "One, Two, Buckle My Shoe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd48",
            "EntityName": "One, two, buckle my shoe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd4p",
            "EntityName": "One, Two, Buckle My Shoe (Ulverscroft Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd4z",
            "EntityName": "One,two, buckle my shoe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd5d",
            "EntityName": "One, Two, Buckle My Shoe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd5n",
            "EntityName": "One, Two Buckle My Shoe (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbd64",
            "EntityName": "One, Two Buckle My Shoe (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk0s",
            "EntityName": "Taken at the Flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk1s",
            "EntityName": "Taken at the Flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk20",
            "EntityName": "Taken at the Flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk28",
            "EntityName": "Taken at the Flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk2j",
            "EntityName": "Taken at the Flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk3c",
            "EntityName": "Taken at the Flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk3m",
            "EntityName": "Taken at the flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk40",
            "EntityName": "Taken at the Flood (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk51",
            "EntityName": "Taken at the flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk5h",
            "EntityName": "Taken at the Flood (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbk5r",
            "EntityName": "Taken at the flood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vblm_",
            "EntityName": "Taken at the Flood (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbln7",
            "EntityName": "Taken at the Flood (aka There is a Tide...)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vblnh",
            "EntityName": "Taken at the Flood (Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vblpg",
            "EntityName": "Taken At The Flood (A Hercule Poirot Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vblpq",
            "EntityName": "Taken at the Flood (Ulverscroft Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbls4",
            "EntityName": "Taken at the Flood (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrck",
            "EntityName": "Dumb Witness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrdr",
            "EntityName": "Dumb Witness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrf8",
            "EntityName": "Dumb Witness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrfj",
            "EntityName": "Dumb Witness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrfs",
            "EntityName": "Dumb Witness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrg6",
            "EntityName": "Dumb witness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrgg",
            "EntityName": "Dumb Witness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrgz",
            "EntityName": "Dumb witness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrj2",
            "EntityName": "Dumb witness."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrkj",
            "EntityName": "Hickory Dickory Dock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrl8",
            "EntityName": "Hickory Dickory Dock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrlj",
            "EntityName": "Hickory Dickory Dock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrm1",
            "EntityName": "Hickory Dickory Dock (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrm9",
            "EntityName": "Hickory Dickory Dock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrn3",
            "EntityName": "Hickory dickory dock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrnk",
            "EntityName": "Hickory dickory dock."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrnt",
            "EntityName": "Hickory Dickory Dock (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrp1",
            "EntityName": "Hickory Dickory Dock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrpk",
            "EntityName": "Hickory Dickory Dock (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbrwn",
            "EntityName": "Dumb Witness (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbt_0",
            "EntityName": "Three Act Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbt_8",
            "EntityName": "Three Act Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbt_j",
            "EntityName": "Three Act Tragedy (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbt_s",
            "EntityName": "Three act tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbv07",
            "EntityName": "Three Act Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbv0j",
            "EntityName": "Three ACT Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbv0s",
            "EntityName": "Three Act Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbv10",
            "EntityName": "Three act tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbv1g",
            "EntityName": "Three Act Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbv1q",
            "EntityName": "Three act tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbv24",
            "EntityName": "Three act tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbv2l",
            "EntityName": "Three Act Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbwbt",
            "EntityName": "Three Act Tragedy (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbwc1",
            "EntityName": "Three Act Tragedy (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbwd1",
            "EntityName": "Three Act Tragedy (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbwd9",
            "EntityName": "Three Act Tragedy (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vbwdt",
            "EntityName": "Three Act Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc20s",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc210",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc219",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc21k",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc220",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc229",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc22l",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc231",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc23l",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc23w",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc243",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc24c",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc24m",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc24w",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc26b",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc26r",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc274",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc28p",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc29c",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4p2",
            "EntityName": "And Then There Were None (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4ps",
            "EntityName": "And Then There Were None (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4qh",
            "EntityName": "And Then There Were None (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4rn",
            "EntityName": "And Then There Were None (St. Martin's True Crime Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4rx",
            "EntityName": "And Then There Were None (The Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4sd",
            "EntityName": "And Then There Were None (Ulverscroft Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4sp",
            "EntityName": "And Then There Were None (Audio Editions Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4sy",
            "EntityName": "And Then There Were None (Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4tf",
            "EntityName": "And Then There Were None Book (Detective English Readers)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc4vf",
            "EntityName": "And Then There Were None (Audio Editions Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6_7",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6_h",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6_s",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6xz",
            "EntityName": "Death In The Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6y_",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6yh",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6yr",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6z_",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6z7",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc6zj",
            "EntityName": "Death in the clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc700",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc709",
            "EntityName": "Death In The Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc719",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc71n",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc71x",
            "EntityName": "Death in the Clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc87_",
            "EntityName": "Death in the clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc88_",
            "EntityName": "Death in the clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc89f",
            "EntityName": "Death in the Clouds (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc89p",
            "EntityName": "Death in the clouds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc8b3",
            "EntityName": "Death in the Clouds (Agatha Christie Mysteries Collection (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc8bc",
            "EntityName": "Death in the Clouds (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc8bx",
            "EntityName": "Death in the Clouds (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc8cn",
            "EntityName": "Death in the Clouds (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc9jx",
            "EntityName": "The Hound of Death (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc9k5",
            "EntityName": "The Hound of Death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vc9kf",
            "EntityName": "The hound of death"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw37",
            "EntityName": "Lord Edgware Dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw3r",
            "EntityName": "Lord Edgware dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw4j",
            "EntityName": "Lord Edgware Dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw4s",
            "EntityName": "Lord Edgware Dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw59",
            "EntityName": "Lord Edgware Dies (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw5k",
            "EntityName": "Lord Edgware Dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw5t",
            "EntityName": "Lord Edgware dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw6_",
            "EntityName": "Lord Edgware Dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw66",
            "EntityName": "Lord Edgware Dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw6g",
            "EntityName": "Lord Edgware dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw6q",
            "EntityName": "Lord Edgware Dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw77",
            "EntityName": "Lord Edgware dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcw8x",
            "EntityName": "Lord Edgware dies."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcwxl",
            "EntityName": "Lord Edgware Dies (Agatha Christie Collection S.)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcwxw",
            "EntityName": "Lord Edgware Dies (BBC Audio Crime)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcwy3",
            "EntityName": "Lord Edgware Dies (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vcwyc",
            "EntityName": "Lord Edgware Dies (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1h5",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1hz",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1lc",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1lm",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1nf",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1nq",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1p9",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1px",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1qc",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1qw",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1rp",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1s4",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1t5",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1vx",
            "EntityName": "Partners in Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1w8",
            "EntityName": "Partners in crime."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1wj",
            "EntityName": "Partners in crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1x1",
            "EntityName": "Partners in crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf1xh",
            "EntityName": "Partners in crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf26z",
            "EntityName": "The Regatta Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf27g",
            "EntityName": "The Regatta Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf27z",
            "EntityName": "The Regatta Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf28h",
            "EntityName": "The Regatta Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf28v",
            "EntityName": "The Regatta Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf33q",
            "EntityName": "Partners in Crime (Listen for Pleasure)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf34_",
            "EntityName": "Partners in Crime (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf346",
            "EntityName": "Partners in Crime (Tommy & Tuppence Chronology)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf34h",
            "EntityName": "Partners in Crime (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf34r",
            "EntityName": "Partners in Crime (Tommy and Tuppence Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf359",
            "EntityName": "Partners in Crime (Agatha Christie Mysteries Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf35k",
            "EntityName": "Partners in Crime (Vol. 1 Finessing the King, Vol 2 The Crackler, Vol 3 The Unbreakable Alibi)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3qy",
            "EntityName": "Poirot Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3r5",
            "EntityName": "Poirot Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3rq",
            "EntityName": "Poirot Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3s7",
            "EntityName": "Poirot investigates."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3sh",
            "EntityName": "Poirot investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3sz",
            "EntityName": "Poirot investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3tf",
            "EntityName": "Poirot investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3tw",
            "EntityName": "Poirot Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3v3",
            "EntityName": "Poirot investigates."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3vk",
            "EntityName": "Poirot Investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3vt",
            "EntityName": "Poirot investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3w7",
            "EntityName": "Poirot Investigates (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf3wh",
            "EntityName": "Poirot investigates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf52b",
            "EntityName": "Poirot Investigates (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf52l",
            "EntityName": "Poirot Investigates (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf52v",
            "EntityName": "Poirot Investigates (Hercule Poirot Mysteries (Audio))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf532",
            "EntityName": "Poirot Investigates (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf53b",
            "EntityName": "Poirot Investigates (Hercule Poirot Mysteries (Audio))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf54g",
            "EntityName": "POIROT INVESTIGATES (Hercule Poirot Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vf556",
            "EntityName": "Poirot Investigates (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfs_3",
            "EntityName": "Destination Unknown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfs_c",
            "EntityName": "Destination Unknown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfs_n",
            "EntityName": "Destination Unknown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfs_y",
            "EntityName": "Destination Unknown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfszw",
            "EntityName": "Destination Unknown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft_w",
            "EntityName": "The Mystery of the Blue Train (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft07",
            "EntityName": "Destination unknown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft0p",
            "EntityName": "Destination Unknown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft0y",
            "EntityName": "Destination Unknown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft16",
            "EntityName": "Destination Unknown (Signature Editions)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft1w",
            "EntityName": "Destination Unknown (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft23",
            "EntityName": "Destination Unknown (Mystery Masters Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft2t",
            "EntityName": "Destination Unknown (Mystery Masters Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft64",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft79",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft7k",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft7t",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft81",
            "EntityName": "PASSENGER TO FRANKFURT"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft8b",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft8l",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft91",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vft9b",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftb1",
            "EntityName": "Passenger to Frankfurt."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftbn",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftcd",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftcp",
            "EntityName": "PASSENGER TO FRANKFURT."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftcy",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftdc",
            "EntityName": "Passenger to Frankfurt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftnp",
            "EntityName": "Destination unknown (Agatha Christie mystery collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftq2",
            "EntityName": "Destination Unknown (St. Martin's Minotaur Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftrm",
            "EntityName": "Passenger to Frankfurt (The Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vftsv",
            "EntityName": "Passenger to Frankfurt (Winterbrook Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv03",
            "EntityName": "Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv0d",
            "EntityName": "The Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv0n",
            "EntityName": "The Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv0y",
            "EntityName": "The mystery of the blue train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv1d",
            "EntityName": "Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv1n",
            "EntityName": "The Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv1x",
            "EntityName": "Mystery of the blue train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv29",
            "EntityName": "The Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv2l",
            "EntityName": "The Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv2v",
            "EntityName": "The Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv32",
            "EntityName": "The Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfv3b",
            "EntityName": "The Mystery of the Blue Train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfvm6",
            "EntityName": "The mystery of the blue train"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfvmy",
            "EntityName": "THE MYSTERY OF THE BLUE TRAIN."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfvn5",
            "EntityName": "Mystery Of The Blue Train / The Listerdale Mystery / Murder At The Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfvnf",
            "EntityName": "The Mystery of the Blue Train (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfvqw",
            "EntityName": "The Mystery of the Blue Train (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg_0f",
            "EntityName": "Sleeping Murder (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg_0z",
            "EntityName": "Sleeping Murder (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg_17",
            "EntityName": "Sleeping Murder (Large Print Ed)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg_21",
            "EntityName": "Sleeping Murder (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg_29",
            "EntityName": "Sleeping Murder (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg_2m",
            "EntityName": "Sleeping Murder (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg_2w",
            "EntityName": "Sleeping Murder (Miss Marple Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg_33",
            "EntityName": "Sleeping Murder (Miss Marple Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4_2",
            "EntityName": "Seven Dials Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4_b",
            "EntityName": "The seven dials mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4_s",
            "EntityName": "The Seven Dials mystery."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4v_",
            "EntityName": "The Seven Dials Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4w8",
            "EntityName": "Seven Dials Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4wz",
            "EntityName": "The Seven Dials Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4xz",
            "EntityName": "The Seven Dials Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4y6",
            "EntityName": "The seven dials mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4yp",
            "EntityName": "The Seven Dials Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4z5",
            "EntityName": "Seven Dials Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4zf",
            "EntityName": "The Seven Dials Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg4zp",
            "EntityName": "The seven dials mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg500",
            "EntityName": "The Seven Dials Mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgbvn",
            "EntityName": "The seven dials mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgbw9",
            "EntityName": "The Seven Dials Mystery (Agatha Christie Signature Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgbwl",
            "EntityName": "The Seven Dials Mystery (Agatha Christie Mystery Collection) Bantam Blue Leatherette Edition"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgbwv",
            "EntityName": "The Seven Dials mystery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgbxb",
            "EntityName": "Seven Dials Mystery (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgftt",
            "EntityName": "The secret adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfv8",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfvj",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfvt",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfw1",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfw9",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfwk",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfwv",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfx2",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfxc",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfxn",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfxy",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfy6",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfyg",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfyr",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfz0",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgfz9",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghp7",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghqh",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghqs",
            "EntityName": "Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghr0",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghr9",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghrk",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghrv",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghs2",
            "EntityName": "Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghsb",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghsm",
            "EntityName": "Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghsx",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vght_",
            "EntityName": "Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vght4",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghtf",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghtq",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghv7",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghvj",
            "EntityName": "The Secret Adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghvt",
            "EntityName": "The secret adversary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vghwn",
            "EntityName": "Secret Adversary (Unabridged Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgj86",
            "EntityName": "The murder on the links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgj90",
            "EntityName": "Murder on the Links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgj98",
            "EntityName": "The Murder on the Links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgj9j",
            "EntityName": "The Murder on the Links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgj9s",
            "EntityName": "Murder on the Links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjbk",
            "EntityName": "Murder On the Links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjc8",
            "EntityName": "Murder on the Links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjcj",
            "EntityName": "Murder On The Links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjcs",
            "EntityName": "The murder on the links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjd5",
            "EntityName": "Murder on the Links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjdf",
            "EntityName": "Murder on the Links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjdp",
            "EntityName": "The murder on the links."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjvy",
            "EntityName": "The Secret Adversary (Tommy & Tuppence Chronology)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjwf",
            "EntityName": "The Secret Adversary (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjwq",
            "EntityName": "Secret Adversary (Unabridged Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjx6",
            "EntityName": "The Secret Adversary (Dodo Press)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjxh",
            "EntityName": "The Secret Adversary (G K Hall's Agatha Christie Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjxs",
            "EntityName": "The Secret Adversary (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjy0",
            "EntityName": "Secret Adversary (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgjys",
            "EntityName": "The Secret Adversary (Classic Books on Cassettes Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgkq_",
            "EntityName": "The murder on the links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgkq2",
            "EntityName": "Murder on the links"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgkrk",
            "EntityName": "The Murder on the Links (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgkrt",
            "EntityName": "Murder on the Links (BBC Audio Crime)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgks1",
            "EntityName": "Murder on the links (The Agatha Christie mystery collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgks9",
            "EntityName": "The Murder on the Links (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgksl",
            "EntityName": "Murder on the Links (BBC Audio Crime)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgktm",
            "EntityName": "Murder On The Links (Classic Books on Cassettes Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgx_3",
            "EntityName": "A Pocket Full of Rye (Miss Marple Mysteries (Audio))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgx_c",
            "EntityName": "A Pocket Full of Rye (Miss Marple Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgx_n",
            "EntityName": "A Pocket Full of Rye (BBC Audio Crime)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgx_x",
            "EntityName": "A Pocket Full of Rye (BBC Radio Collection: Crimes and Thrillers)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxw0",
            "EntityName": "A Pocket Full of Rye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxx3",
            "EntityName": "A Pocket Full of Rye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxxc",
            "EntityName": "A Pocket Full of Rye (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxxm",
            "EntityName": "a Pocket full of Rye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxxw",
            "EntityName": "A Pocket Full of Rye (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxy3",
            "EntityName": "A Pocket Full Of Rye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxyc",
            "EntityName": "A Pocket Full of Rye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxzb",
            "EntityName": "A Pocket Full of Rye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxzl",
            "EntityName": "A Pocket Full of Rye (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgxzv",
            "EntityName": "A Pocket Full of Rye (A Jane Marple Murder Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy71",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy79",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy7k",
            "EntityName": "Sleeping murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy80",
            "EntityName": "Sleeping murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy8h",
            "EntityName": "Sleeping murder."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy8x",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy94",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy9f",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy9p",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgy9y",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgyb5",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgybf",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgybp",
            "EntityName": "Sleeping Murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgyf0",
            "EntityName": "Sleeping murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgzyl",
            "EntityName": "Sleeping Murder (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vgzz8",
            "EntityName": "Sleeping murder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfmg",
            "EntityName": "The Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfmz",
            "EntityName": "Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfn6",
            "EntityName": "The Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfng",
            "EntityName": "The Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfnq",
            "EntityName": "The Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfnz",
            "EntityName": "Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfph",
            "EntityName": "Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfpr",
            "EntityName": "The Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfqg",
            "EntityName": "The big four."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfqq",
            "EntityName": "Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfqz",
            "EntityName": "The Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfs6",
            "EntityName": "The Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhfsz",
            "EntityName": "Big Four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhgwf",
            "EntityName": "The Big Four."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhgwq",
            "EntityName": "The big four"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhgx4",
            "EntityName": "The Big Four (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhgxd",
            "EntityName": "The Big Four (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhgy3",
            "EntityName": "The Big Four (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhgyx",
            "EntityName": "The Big Four (G K Hall Large Print Book Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhgz5",
            "EntityName": "Big Four (Ulverscroft Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnpm",
            "EntityName": "A Murder Is Announced"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnq3",
            "EntityName": "A Murder Is Announced"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnqc",
            "EntityName": "A Murder Is Announced"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnqm",
            "EntityName": "A Murder Is Announced (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnr3",
            "EntityName": "A Murder is Announced"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnrc",
            "EntityName": "A Murder Is Announced (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnrw",
            "EntityName": "A Murder Is Announced (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhns3",
            "EntityName": "A Murder Is Announced (Miss Marple Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnt1",
            "EntityName": "A Murder Is Announced (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnt9",
            "EntityName": "A Murder Is Announced (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhntk",
            "EntityName": "A Murder Is Announced"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhnv9",
            "EntityName": "A Murder is Announced (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhpbz",
            "EntityName": "A Murder Is Announced (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhpch",
            "EntityName": "A Murder Is Announced (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjk_7",
            "EntityName": "The Thirteen Problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjk_h",
            "EntityName": "The thirteen problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjkzd",
            "EntityName": "The Thirteen Problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjl07",
            "EntityName": "The Thirteen Problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjl0h",
            "EntityName": "Thirteen Problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjl0s",
            "EntityName": "Thirteen Problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjl1_",
            "EntityName": "The Thirteen Problems (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjl10",
            "EntityName": "The thirteen problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjl18",
            "EntityName": "The Thirteen Problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjl1k",
            "EntityName": "The thirteen problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjl2q",
            "EntityName": "The thirteen problems"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjlvl",
            "EntityName": "The Thirteen Problems (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjlvv",
            "EntityName": "The Thirteen Problems (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkg9q",
            "EntityName": "The Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkg9z",
            "EntityName": "The Murder At the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgbq",
            "EntityName": "The murder at the vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgc5",
            "EntityName": "The Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgcf",
            "EntityName": "The Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgcp",
            "EntityName": "The Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgcy",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgdm",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgfb",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgfw",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgg3",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkggc",
            "EntityName": "The murder at the vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkggw",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkgh4",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkh_5",
            "EntityName": "The murder at the vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkh_l",
            "EntityName": "Murder at the Vicarage (Miss Marple Mystery Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkh_v",
            "EntityName": "The Murder at the Vicarage (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkhyq",
            "EntityName": "Murder at the Vicarage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkhzf",
            "EntityName": "Murder at the vicarage."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkhzp",
            "EntityName": "The murder at the vicarage."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkhzy",
            "EntityName": "The Murder at the Vicarage (Miss Marple)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj03",
            "EntityName": "The Murder at the Vicarage (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj0c",
            "EntityName": "Murder at the Vicarage (BBC Radio Presents)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj0m",
            "EntityName": "The Murder at the Vicarage (Acting Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj0w",
            "EntityName": "Murder at the Vicarage (Miss Marple Mysteries (Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj13",
            "EntityName": "Murder at the Vicarage (Miss Marple Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj23",
            "EntityName": "Murder at the Vicarage (G. K. Hall (Large Print))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj2n",
            "EntityName": "Murder at the Vicarage (Agatha Christie Mysteries Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkjfy",
            "EntityName": "Murder at the Vicarage (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkjlz",
            "EntityName": "The Murder at the Vicarage (BBC Full Cast Dramatization)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxm_",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxnj",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxns",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxp1",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxpb",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxpl",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxpw",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxqb",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxqt",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxr1",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxrb",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxrr",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxs0",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxsf",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxsp",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxsy",
            "EntityName": "And then there were none"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxt5",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkxtq",
            "EntityName": "And Then There Were None"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vky_1",
            "EntityName": "And Then There Were None (Agatha Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vky_9",
            "EntityName": "And Then There Were None (The Agatha Christie Mystery Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vky_k",
            "EntityName": "And Then There Were None (The Christie Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vky_y",
            "EntityName": "And Then There Were None (Ulverscroft Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkz0_",
            "EntityName": "And Then There Were None Book (Detective English Readers)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkz06",
            "EntityName": "And Then There Were None (Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkz0r",
            "EntityName": "And Then There Were None (St. Martin's True Crime Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkz18",
            "EntityName": "And Then There Were None (Audio Editions Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkz1j",
            "EntityName": "And Then There Were None (Audio Editions Mystery Masters)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkz1s",
            "EntityName": "And Then There Were None (Agatha Christie Audio Mystery)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz5n",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz63",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz6l",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz71",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz7j",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz7v",
            "EntityName": "Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz82",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz8m",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz8x",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz96",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzz9s",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzzb0",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzzb9",
            "EntityName": "The mysterious affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzzbl",
            "EntityName": "Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzzbw",
            "EntityName": "Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzzcf",
            "EntityName": "The Mysterious Affair at Styles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00tc",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00tm",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00v_",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00vd",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00vp",
            "EntityName": "Sad cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00w7",
            "EntityName": "Sad cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00wp",
            "EntityName": "Sad cypress."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00wy",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00x6",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00xg",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00xq",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00xz",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w00yg",
            "EntityName": "Sad cypress."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02vv",
            "EntityName": "Sad Cypress (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02w2",
            "EntityName": "Sad cypress."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02wj",
            "EntityName": "Sad Cypress (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02ws",
            "EntityName": "Sad Cypress (Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02x0",
            "EntityName": "Sad cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02xh",
            "EntityName": "Sad Cypress (BBC Radio Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02xr",
            "EntityName": "Sad Cypress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02y4",
            "EntityName": "Sad Cypress (Hercule Poirot)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02yf",
            "EntityName": "Sad Cypress (Hercule Poirot Mysteries)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w02yp",
            "EntityName": "Sad Cypress (BBC Radio Collection)"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ldd": "Agatha Christie"
    },
    "qid_topic_entity": {
      "Q35064": "Agatha Christie"
    },
    "NoisyQuestion": "what books did agatha chrsitie wrote?"
  },
  {
    "QuestionId": "WebQTest-1994",
    "RawQuestion": "what did whoopi goldberg won a grammy for?",
    "ProcessedQuestion": "what did whoopi goldberg won a grammy for",
    "Parses": [
      {
        "ParseId": "WebQTest-1994.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fb1q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fb1q ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n?y ns:award.award_honor.ceremony ns:m.019qq6 .\n}\n",
        "PotentialTopicEntityMention": "whoopi goldberg",
        "TopicEntityName": "Whoopi Goldberg",
        "TopicEntityMid": "m.0fb1q",
        "InferentialChain": [
          "award.award_winner.awards_won",
          "award.award_honor.award"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.019qq6",
            "EntityName": "28th Annual Grammy Awards",
            "SourceNodeIndex": 0,
            "NodePredicate": "award.award_honor.ceremony",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019bnn",
            "EntityName": "Grammy Award for Best Comedy Album"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0fb1q": "Whoopi Goldberg"
    },
    "qid_topic_entity": {
      "Q49001": "Whoopi Goldberg"
    },
    "NoisyQuestion": "what did whoopi goldberg won a grammy for?"
  },
  {
    "QuestionId": "WebQTest-1163",
    "RawQuestion": "what rainforest is in south america?",
    "ProcessedQuestion": "what rainforest is in south america",
    "Parses": [
      {
        "ParseId": "WebQTest-1163.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06n3y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06n3y ns:location.location.contains ?x .\n?x ns:geography.geographical_feature.category ns:m.02zr8 .\n}\n",
        "PotentialTopicEntityMention": "south america",
        "TopicEntityName": "South America",
        "TopicEntityMid": "m.06n3y",
        "InferentialChain": [
          "location.location.contains"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02zr8",
            "EntityName": "Forest",
            "SourceNodeIndex": 0,
            "NodePredicate": "geography.geographical_feature.category",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cx4p",
            "EntityName": "Amazon rainforest"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06n3y": "South America"
    },
    "qid_topic_entity": {
      "Q18": "South America"
    },
    "NoisyQuestion": "what rainfrost is in south america?"
  },
  {
    "QuestionId": "WebQTest-713",
    "RawQuestion": "what county is st. louis park in?",
    "ProcessedQuestion": "what county is st. louis park in",
    "Parses": [
      {
        "ParseId": "WebQTest-713.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xdhj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xdhj ns:location.hud_county_place.county ?x .\n}\n",
        "PotentialTopicEntityMention": "st . louis park",
        "TopicEntityName": "St. Louis Park",
        "TopicEntityMid": "m.0xdhj",
        "InferentialChain": [
          "location.hud_county_place.county"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0nhmw",
            "EntityName": "Hennepin County"
          }
        ]
      },
      {
        "ParseId": "WebQTest-713.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xdhj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xdhj ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.0kpym_ .\n}\n",
        "PotentialTopicEntityMention": "st . louis park",
        "TopicEntityName": "St. Louis Park",
        "TopicEntityMid": "m.0xdhj",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0kpym_",
            "EntityName": "US County",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0nhmw",
            "EntityName": "Hennepin County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0xdhj": "St. Louis Park"
    },
    "qid_topic_entity": {
      "Q988741": "St. Louis Park"
    },
    "NoisyQuestion": "what county is st. loui park in?"
  },
  {
    "QuestionId": "WebQTest-34",
    "RawQuestion": "who did cam newton sign with?",
    "ProcessedQuestion": "who did cam newton sign with",
    "Parses": [
      {
        "ParseId": "WebQTest-34.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02phnp7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02phnp7 ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n",
        "PotentialTopicEntityMention": "cam newton",
        "TopicEntityName": "Cam Newton",
        "TopicEntityMid": "m.02phnp7",
        "InferentialChain": [
          "base.schemastaging.athlete_extra.salary",
          "base.schemastaging.athlete_salary.team"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01y3c",
            "EntityName": "Carolina Panthers"
          }
        ]
      },
      {
        "ParseId": "WebQTest-34.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02phnp7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02phnp7 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:common.topic.notable_types ns:m.044801x .\n}\n",
        "PotentialTopicEntityMention": "cam newton",
        "TopicEntityName": "Cam Newton",
        "TopicEntityMid": "m.02phnp7",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.044801x",
            "EntityName": "Professional Sports Team",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01y3c",
            "EntityName": "Carolina Panthers"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02phnp7": "Cam Newton"
    },
    "qid_topic_entity": {
      "Q591678": "Cam Newton"
    },
    "NoisyQuestion": "who did cam newton sign with?"
  },
  {
    "QuestionId": "WebQTest-762",
    "RawQuestion": "who has stephen ireland played for?",
    "ProcessedQuestion": "who has stephen ireland played for",
    "Parses": [
      {
        "ParseId": "WebQTest-762.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_mj3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_mj3 ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n",
        "PotentialTopicEntityMention": "stephen ireland",
        "TopicEntityName": "Stephen Ireland",
        "TopicEntityMid": "m.07_mj3",
        "InferentialChain": [
          "base.schemastaging.athlete_extra.salary",
          "base.schemastaging.athlete_salary.team"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bl8l",
            "EntityName": "Aston Villa F.C."
          }
        ]
      },
      {
        "ParseId": "WebQTest-762.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_mj3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_mj3 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PotentialTopicEntityMention": "stephen ireland",
        "TopicEntityName": "Stephen Ireland",
        "TopicEntityMid": "m.07_mj3",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01634x",
            "EntityName": "Manchester City F.C."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01cwm1",
            "EntityName": "Stoke City F.C."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bl8l",
            "EntityName": "Aston Villa F.C."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fvly",
            "EntityName": "Newcastle United F.C."
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07_mj3": "Stephen Ireland"
    },
    "qid_topic_entity": {
      "Q113916": "Stephen Ireland"
    },
    "NoisyQuestion": "who has stephen erland played for?"
  },
  {
    "QuestionId": "WebQTest-1503",
    "RawQuestion": "where did thomas paine die?",
    "ProcessedQuestion": "where did thomas paine die",
    "Parses": [
      {
        "ParseId": "WebQTest-1503.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07kwl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07kwl ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "thomas paine",
        "TopicEntityName": "Thomas Paine",
        "TopicEntityMid": "m.07kwl",
        "InferentialChain": [
          "people.deceased_person.place_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02_286",
            "EntityName": "New York City"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07kwl": "Thomas Paine"
    },
    "qid_topic_entity": {
      "Q126462": "Thomas Paine"
    },
    "NoisyQuestion": "where did thomas paune die?"
  },
  {
    "QuestionId": "WebQTest-638",
    "RawQuestion": "what languages are there in japan?",
    "ProcessedQuestion": "what languages are there in japan",
    "Parses": [
      {
        "ParseId": "WebQTest-638.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "japan",
        "TopicEntityName": "Japan",
        "TopicEntityMid": "m.03_3d",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwhyv",
            "EntityName": "Korean Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jcw",
            "EntityName": "Esperanto Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_9r",
            "EntityName": "Japanese Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jdg7",
            "EntityName": "Ainu Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03_3d": "Japan"
    },
    "qid_topic_entity": {
      "Q17": "Japan"
    },
    "NoisyQuestion": "what languages are there in japn?"
  },
  {
    "QuestionId": "WebQTest-855",
    "RawQuestion": "what is the currency of brazil now?",
    "ProcessedQuestion": "what is the currency of brazil now",
    "Parses": [
      {
        "ParseId": "WebQTest-855.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "brazil",
        "TopicEntityName": "Brazil",
        "TopicEntityMid": "m.015fr",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03385m",
            "EntityName": "Brazilian real"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.015fr": "Brazil"
    },
    "qid_topic_entity": {
      "Q155": "Brazil"
    },
    "NoisyQuestion": "what is the currency of brazl now?"
  },
  {
    "QuestionId": "WebQTest-1929",
    "RawQuestion": "what do see in paris?",
    "ProcessedQuestion": "what do see in paris",
    "Parses": [
      {
        "ParseId": "WebQTest-1929.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qtj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qtj ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PotentialTopicEntityMention": "paris",
        "TopicEntityName": "Paris",
        "TopicEntityMid": "m.05qtj",
        "InferentialChain": [
          "travel.travel_destination.tourist_attractions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01q_np",
            "EntityName": "Sacré-Cœur, Paris"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01sp2r",
            "EntityName": "Galerie nationale du Jeu de Paume"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01vgd5",
            "EntityName": "Île de la Cité"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0281qh",
            "EntityName": "Musée des Arts et Métiers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02gms9",
            "EntityName": "Folies Bergère"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02j81",
            "EntityName": "Eiffel Tower"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qtwx",
            "EntityName": "Jardin du Luxembourg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0383f3",
            "EntityName": "Gare d'Orsay"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03q9jq",
            "EntityName": "Bois de Boulogne"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ydrj",
            "EntityName": "Verdon Gorge"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.042x0k",
            "EntityName": "Parc Astérix"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04695xf",
            "EntityName": "Musée Maillol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04cj6k",
            "EntityName": "Disneyland Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gdr",
            "EntityName": "The Louvre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04kshc3",
            "EntityName": "Café Volpini"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04s_s9l",
            "EntityName": "Galerie Claude Bernard"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07kb30y",
            "EntityName": "La Maison Rouge"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08dswn",
            "EntityName": "Petit Palais"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dmnx6",
            "EntityName": "Musée du quai Branly"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dt3ml",
            "EntityName": "Musée de l'Orangerie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f32p",
            "EntityName": "Centre Georges Pompidou"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f3b9",
            "EntityName": "Musée d'Orsay"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gsp5",
            "EntityName": "Panthéon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gtxh",
            "EntityName": "Notre Dame de Paris"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gxqj",
            "EntityName": "Les Invalides"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jd4j",
            "EntityName": "Champs-Élysées"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k0kz",
            "EntityName": "Grande Arche"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k3xf",
            "EntityName": "Disneyland Paris"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kx9d",
            "EntityName": "Place de la Concorde"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0m6_0",
            "EntityName": "Château de Chambord"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zv_",
            "EntityName": "Arc de Triomphe"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05qtj": "Paris"
    },
    "qid_topic_entity": {
      "Q90": "Paris"
    },
    "NoisyQuestion": "what do see in pariz?"
  },
  {
    "QuestionId": "WebQTest-1553",
    "RawQuestion": "where does sami yusuf live?",
    "ProcessedQuestion": "where does sami yusuf live",
    "Parses": [
      {
        "ParseId": "WebQTest-1553.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08cnsg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08cnsg ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "sami yusuf",
        "TopicEntityName": "Sami Yusuf",
        "TopicEntityMid": "m.08cnsg",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.place_lived.end_date",
            "ValueType": "DateTime"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.place_lived.start_date",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ftlx",
            "EntityName": "Tehran"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.08cnsg": "Sami Yusuf"
    },
    "qid_topic_entity": {
      "Q558226": "Sami Yusuf"
    },
    "NoisyQuestion": "where does sami yusuf liv?"
  },
  {
    "QuestionId": "WebQTest-2007",
    "RawQuestion": "what do people in czech republic speak?",
    "ProcessedQuestion": "what do people in czech republic speak",
    "Parses": [
      {
        "ParseId": "WebQTest-2007.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mjq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mjq ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "czech republic",
        "TopicEntityName": "Czech Republic",
        "TopicEntityMid": "m.01mjq",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012psb",
            "EntityName": "Romani language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.013hyy",
            "EntityName": "Rusyn Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01bkv",
            "EntityName": "Bulgarian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01wgr",
            "EntityName": "Czech Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02ztjwg",
            "EntityName": "Hungarian language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0349s",
            "EntityName": "Greek Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04306rv",
            "EntityName": "German Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qqm",
            "EntityName": "Polish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06b_j",
            "EntityName": "Russian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06zvx",
            "EntityName": "Slovak Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cjk9",
            "EntityName": "Ukrainian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k0sb",
            "EntityName": "Serbian language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k0sv",
            "EntityName": "Croatian language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01mjq": "Czech Republic"
    },
    "qid_topic_entity": {
      "Q213": "Czech Republic"
    },
    "NoisyQuestion": "what do people in chech republic speak?"
  },
  {
    "QuestionId": "WebQTest-798",
    "RawQuestion": "what states share a border with tennessee?",
    "ProcessedQuestion": "what states share a border with tennessee",
    "Parses": [
      {
        "ParseId": "WebQTest-798.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07h34)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07h34 ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n",
        "PotentialTopicEntityMention": "tennessee",
        "TopicEntityName": "Tennessee",
        "TopicEntityMid": "m.07h34",
        "InferentialChain": [
          "location.location.adjoin_s",
          "location.adjoining_relationship.adjoins"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Value",
            "Argument": "State",
            "EntityName": null,
            "SourceNodeIndex": 1,
            "NodePredicate": "base.biblioness.bibs_location.loc_type",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0498y",
            "EntityName": "Kentucky"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tgp",
            "EntityName": "Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04ych",
            "EntityName": "Missouri"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05fkf",
            "EntityName": "North Carolina"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07z1m",
            "EntityName": "Virginia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0x8",
            "EntityName": "Georgia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gyh",
            "EntityName": "Alabama"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0vbk",
            "EntityName": "Arkansas"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07h34": "Tennessee"
    },
    "qid_topic_entity": {
      "Q1509": "Tennessee"
    },
    "NoisyQuestion": "what states share a border with tennesse?"
  },
  {
    "QuestionId": "WebQTest-959",
    "RawQuestion": "who did brett gardner play for in 2008?",
    "ProcessedQuestion": "who did brett gardner play for in 2008",
    "Parses": [
      {
        "ParseId": "WebQTest-959.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02px3wt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02px3wt ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2008-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2008-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "brett gardner",
        "TopicEntityName": "Brett Gardner",
        "TopicEntityMid": "m.02px3wt",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2008-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2008-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2008-01-01",
          "End": "2008-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "2008"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cqt41",
            "EntityName": "New York Yankees"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02px3wt": "Brett Gardner"
    },
    "qid_topic_entity": {
      "Q910782": "Brett Gardner"
    },
    "NoisyQuestion": "who did brett gardner play for in 2008?"
  },
  {
    "QuestionId": "WebQTest-1546",
    "RawQuestion": "where did rick santorum attend high school?",
    "ProcessedQuestion": "where did rick santorum attend high school",
    "Parses": [
      {
        "ParseId": "WebQTest-1546.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fgd3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fgd3 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hn6 .\n}\n",
        "PotentialTopicEntityMention": "rick santorum",
        "TopicEntityName": "Rick Santorum",
        "TopicEntityMid": "m.01fgd3",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hn6",
            "EntityName": "School",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06skgp",
            "EntityName": "Carmel High School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01fgd3": "Rick Santorum"
    },
    "qid_topic_entity": {
      "Q155985": "Rick Santorum"
    },
    "NoisyQuestion": "where did rick santorum attend high school?"
  },
  {
    "QuestionId": "WebQTest-743",
    "RawQuestion": "what was the name of jfk's brothers?",
    "ProcessedQuestion": "what was the name of jfk 's brothers",
    "Parses": [
      {
        "ParseId": "WebQTest-743.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:people.person.sibling_s ?y .\n?y ns:people.sibling_relationship.sibling ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PotentialTopicEntityMention": "jfk",
        "TopicEntityName": "John F. Kennedy",
        "TopicEntityMid": "m.0d3k14",
        "InferentialChain": [
          "people.person.sibling_s",
          "people.sibling_relationship.sibling"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05zppz",
            "EntityName": "Male",
            "SourceNodeIndex": 1,
            "NodePredicate": "people.person.gender",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0194xc",
            "EntityName": "Ted Kennedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020t1x",
            "EntityName": "Joseph P. Kennedy, Jr."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06hx2",
            "EntityName": "Robert F. Kennedy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d3k14": "John F. Kennedy"
    },
    "qid_topic_entity": {
      "Q9696": "John F. Kennedy"
    },
    "NoisyQuestion": "what was the name of jfk's bruthers?"
  },
  {
    "QuestionId": "WebQTest-527",
    "RawQuestion": "what country borders slovakia?",
    "ProcessedQuestion": "what country borders slovakia",
    "Parses": [
      {
        "ParseId": "WebQTest-527.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06npd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06npd ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PotentialTopicEntityMention": "slovakia",
        "TopicEntityName": "Slovakia",
        "TopicEntityMid": "m.06npd",
        "InferentialChain": [
          "location.location.adjoin_s",
          "location.adjoining_relationship.adjoins"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01mp",
            "EntityName": "Country",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01mjq",
            "EntityName": "Czech Republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gj2",
            "EntityName": "Hungary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qhw",
            "EntityName": "Poland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07t21",
            "EntityName": "Ukraine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h7x",
            "EntityName": "Austria"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06npd": "Slovakia"
    },
    "qid_topic_entity": {
      "Q214": "Slovakia"
    },
    "NoisyQuestion": "what country borders slovakia?"
  },
  {
    "QuestionId": "WebQTest-1766",
    "RawQuestion": "what language do russians speak?",
    "ProcessedQuestion": "what language do russians speak",
    "Parses": [
      {
        "ParseId": "WebQTest-1766.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "russians",
        "TopicEntityName": "Russia",
        "TopicEntityMid": "m.06bnz",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.017dsl",
            "EntityName": "Osetin Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0198z0",
            "EntityName": "Chechen Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019yz7",
            "EntityName": "Tatar Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01bcw_",
            "EntityName": "Azerbaijani language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01qyqy",
            "EntityName": "Abaza Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01y_vl",
            "EntityName": "Mari language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020g7w",
            "EntityName": "Bashkir Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0234zj",
            "EntityName": "Avar Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0264gxt",
            "EntityName": "Aghul language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027bj_4",
            "EntityName": "Tsakhur Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02gj5b",
            "EntityName": "Tuvin Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwm9x",
            "EntityName": "Moksha Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lpht",
            "EntityName": "Erzya Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02mj1c",
            "EntityName": "Kalmyk-Oirat Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02mxzf",
            "EntityName": "Kabardian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02nbbh",
            "EntityName": "Adyghe Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02q4t0g",
            "EntityName": "Rutul language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x9lm",
            "EntityName": "Lezgi Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.037lmh",
            "EntityName": "Ingush Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.037nfm",
            "EntityName": "Altai language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03f3f1",
            "EntityName": "Crimean Turkish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gn_0",
            "EntityName": "Nogai Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03klw8",
            "EntityName": "Dargwa Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03wt_j",
            "EntityName": "Komi language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.049jrm",
            "EntityName": "Udmurt Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04rxz0",
            "EntityName": "Kumyk Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04xqkr",
            "EntityName": "Karachay-Balkar Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.054zyh",
            "EntityName": "Buryat language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05l6md",
            "EntityName": "Yakut Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06b_j",
            "EntityName": "Russian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bw_x",
            "EntityName": "Tabassaran Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0880p",
            "EntityName": "Yiddish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.091dr6",
            "EntityName": "Lak Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.093gjw",
            "EntityName": "Khakas Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cjk9",
            "EntityName": "Ukrainian Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1766.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "russians",
        "TopicEntityName": "Russia",
        "TopicEntityMid": "m.06bnz",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06b_j",
            "EntityName": "Russian Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1766.P2",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g6ff)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g6ff ns:people.ethnicity.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "russians",
        "TopicEntityName": "Russian",
        "TopicEntityMid": "m.0g6ff",
        "InferentialChain": [
          "people.ethnicity.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06b_j",
            "EntityName": "Russian Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06bnz": "Russia",
      "m.0g6ff": "Russian"
    },
    "qid_topic_entity": {
      "Q159": "Russia",
      "Q49542": "Russian"
    },
    "NoisyQuestion": "what language do russians speek?"
  },
  {
    "QuestionId": "WebQTest-1923",
    "RawQuestion": "what movies has miley cyrus been in?",
    "ProcessedQuestion": "what movies has miley cyrus been in",
    "Parses": [
      {
        "ParseId": "WebQTest-1923.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bdxs5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bdxs5 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "miley cyrus",
        "TopicEntityName": "Miley Cyrus",
        "TopicEntityMid": "m.0bdxs5",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010ls0tb",
            "EntityName": "Miley Cyrus: Tongue Tied"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027pfg",
            "EntityName": "Big Fish"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x3lt7",
            "EntityName": "Hannah Montana: The Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ck042",
            "EntityName": "Hannah Montana and Miley Cyrus: Best of Both Worlds Concert"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.042w0v2",
            "EntityName": "Sonic the Hedgehog"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05h43ls",
            "EntityName": "Sex and the City 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064qvcw",
            "EntityName": "Wizards on Deck with Hannah Montana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06fcqw",
            "EntityName": "Bolt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ykkx5",
            "EntityName": "The Last Song"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.080gfc8",
            "EntityName": "Super Rhino"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bc5ny",
            "EntityName": "High School Musical 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cmddrx",
            "EntityName": "LOL"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crsmk2",
            "EntityName": "Radio Disney Party Jams: The Concert"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cs2t3x",
            "EntityName": "The World According to Miley Cyrus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g56xqy",
            "EntityName": "So Undercover"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0swngjg",
            "EntityName": "Family Bond"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0w1x037",
            "EntityName": "Rock Mafia Presents: The Big Bang"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0bdxs5": "Miley Cyrus"
    },
    "qid_topic_entity": {
      "Q4235": "Miley Cyrus"
    },
    "NoisyQuestion": "what movies has miley cirus been in?"
  },
  {
    "QuestionId": "WebQTest-977",
    "RawQuestion": "what part did jeff conaway play in grease?",
    "ProcessedQuestion": "what part did jeff conaway play in grease",
    "Parses": [
      {
        "ParseId": "WebQTest-977.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026mzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026mzh ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.01xlqd .\n}\n",
        "PotentialTopicEntityMention": "jeff conaway",
        "TopicEntityName": "Jeff Conaway",
        "TopicEntityMid": "m.026mzh",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01xlqd",
            "EntityName": "Grease",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h5nhp7",
            "EntityName": "Kenickie Murdoch"
          }
        ]
      },
      {
        "ParseId": "WebQTest-977.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xlqd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xlqd ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:m.026mzh .\n}\n",
        "PotentialTopicEntityMention": "grease",
        "TopicEntityName": "Grease",
        "TopicEntityMid": "m.01xlqd",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.026mzh",
            "EntityName": "Jeff Conaway",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.actor",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h5nhp7",
            "EntityName": "Kenickie Murdoch"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.026mzh": "Jeff Conaway",
      "m.01xlqd": "Grease"
    },
    "qid_topic_entity": {
      "Q342612": "Jeff Conaway",
      "Q267721": "Grease"
    },
    "NoisyQuestion": "what part did jeff conawey play in grease?"
  },
  {
    "QuestionId": "WebQTest-185",
    "RawQuestion": "what type of government does france use?",
    "ProcessedQuestion": "what type of government does france use",
    "Parses": [
      {
        "ParseId": "WebQTest-185.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "france",
        "TopicEntityName": "France",
        "TopicEntityMid": "m.0f8l9c",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01dw03",
            "EntityName": "Semi-presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fpfn",
            "EntityName": "Unitary state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0f8l9c": "France"
    },
    "qid_topic_entity": {
      "Q142": "France"
    },
    "NoisyQuestion": "what type of government does france use?"
  },
  {
    "QuestionId": "WebQTest-396",
    "RawQuestion": "what college did sir isaac newton go to?",
    "ProcessedQuestion": "what college did sir isaac newton go to",
    "Parses": [
      {
        "ParseId": "WebQTest-396.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s9v ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "sir isaac newton",
        "TopicEntityName": "Isaac Newton",
        "TopicEntityMid": "m.03s9v",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07tk7",
            "EntityName": "Trinity College, Cambridge"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03s9v": "Isaac Newton"
    },
    "qid_topic_entity": {
      "Q935": "Isaac Newton"
    },
    "NoisyQuestion": "what college did sir isaac newto go to?"
  },
  {
    "QuestionId": "WebQTest-851",
    "RawQuestion": "what is the capital of modern day egypt?",
    "ProcessedQuestion": "what is the capital of modern day egypt",
    "Parses": [
      {
        "ParseId": "WebQTest-851.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.capital ?x .\n}\n",
        "PotentialTopicEntityMention": "egypt",
        "TopicEntityName": "Egypt",
        "TopicEntityMid": "m.02k54",
        "InferentialChain": [
          "location.country.capital"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01w2v",
            "EntityName": "Cairo"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02k54": "Egypt"
    },
    "qid_topic_entity": {
      "Q79": "Egypt"
    },
    "NoisyQuestion": "what is the capital of modern day egipt?"
  },
  {
    "QuestionId": "WebQTest-282",
    "RawQuestion": "which countries share a border with russia?",
    "ProcessedQuestion": "which countries share a border with russia",
    "Parses": [
      {
        "ParseId": "WebQTest-282.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PotentialTopicEntityMention": "russia",
        "TopicEntityName": "Russia",
        "TopicEntityMid": "m.06bnz",
        "InferentialChain": [
          "location.location.adjoin_s",
          "location.adjoining_relationship.adjoins"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01mp",
            "EntityName": "Country",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0163v",
            "EntityName": "Belarus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02kmm",
            "EntityName": "Estonia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02vzc",
            "EntityName": "Finland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047lj",
            "EntityName": "Kazakhstan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04g5k",
            "EntityName": "Latvia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gzd",
            "EntityName": "Lithuania"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w8f",
            "EntityName": "Mongolia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b4w",
            "EntityName": "Norway"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b7q",
            "EntityName": "North Korea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qhw",
            "EntityName": "Poland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07t21",
            "EntityName": "Ukraine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d05w3",
            "EntityName": "China"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0kn",
            "EntityName": "Georgia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jhd",
            "EntityName": "Azerbaijan"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06bnz": "Russia"
    },
    "qid_topic_entity": {
      "Q159": "Russia"
    },
    "NoisyQuestion": "which countries share a border with russia?"
  },
  {
    "QuestionId": "WebQTest-173",
    "RawQuestion": "what countries are part of the baltic?",
    "ProcessedQuestion": "what countries are part of the baltic",
    "Parses": [
      {
        "ParseId": "WebQTest-173.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019tjm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019tjm ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PotentialTopicEntityMention": "baltic",
        "TopicEntityName": "Baltic states",
        "TopicEntityMid": "m.019tjm",
        "InferentialChain": [
          "location.location.contains"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01mp",
            "EntityName": "Country",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02kmm",
            "EntityName": "Estonia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04g5k",
            "EntityName": "Latvia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gzd",
            "EntityName": "Lithuania"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.019tjm": "Baltic states"
    },
    "qid_topic_entity": {
      "Q39731": "Baltic states"
    },
    "NoisyQuestion": "what countries are part of the baltic?"
  },
  {
    "QuestionId": "WebQTest-1316",
    "RawQuestion": "what was the name of benjamin franklin wife?",
    "ProcessedQuestion": "what was the name of benjamin franklin wife",
    "Parses": [
      {
        "ParseId": "WebQTest-1316.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.01bl8s .\n}\n",
        "PotentialTopicEntityMention": "benjamin franklin",
        "TopicEntityName": "Benjamin Franklin",
        "TopicEntityMid": "m.019fz",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01bl8s",
            "EntityName": "Common-law marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b15_0",
            "EntityName": "Deborah Read"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.019fz": "Benjamin Franklin"
    },
    "qid_topic_entity": {
      "Q34969": "Benjamin Franklin"
    },
    "NoisyQuestion": "what was the name of benjamim franklin wife?"
  },
  {
    "QuestionId": "WebQTest-583",
    "RawQuestion": "what school did martin luther king jr received his doctorate degree from?",
    "ProcessedQuestion": "what school did martin luther king jr received his doctorate degree from",
    "Parses": [
      {
        "ParseId": "WebQTest-583.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:m.04zx3q1 .\n}\n",
        "PotentialTopicEntityMention": "martin luther king jr",
        "TopicEntityName": "Martin Luther King, Jr.",
        "TopicEntityMid": "m.051cc",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04zx3q1",
            "EntityName": "PhD",
            "SourceNodeIndex": 0,
            "NodePredicate": "education.education.degree",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gl5_",
            "EntityName": "Boston University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.051cc": "Martin Luther King, Jr."
    },
    "qid_topic_entity": {
      "Q8027": "Martin Luther King, Jr."
    },
    "NoisyQuestion": "what school did martin luther king jr received his doctorate degree from?"
  },
  {
    "QuestionId": "WebQTest-1097",
    "RawQuestion": "where did michelle obama graduated from?",
    "ProcessedQuestion": "where did michelle obama graduated from",
    "Parses": [
      {
        "ParseId": "WebQTest-1097.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025s5v9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025s5v9 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "michelle obama",
        "TopicEntityName": "Michelle Obama",
        "TopicEntityMid": "m.025s5v9",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.014zws",
            "EntityName": "Harvard Law School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zl0",
            "EntityName": "Princeton University"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09rs7mx",
            "EntityName": "Whitney M. Young Magnet High School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.025s5v9": "Michelle Obama"
    },
    "qid_topic_entity": {
      "Q13133": "Michelle Obama"
    },
    "NoisyQuestion": "where did michelle obama graduted from?"
  },
  {
    "QuestionId": "WebQTest-116",
    "RawQuestion": "which country was justin bieber born in?",
    "ProcessedQuestion": "which country was justin bieber born in",
    "Parses": [
      {
        "ParseId": "WebQTest-116.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Longer chain. Original comment: F place_of_birth -> contained_by & type = country"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.06w2sn5 ns:people.person.place_of_birth ?y .\n\t?y ns:location.location.containedby ?x .\n\t?x ns:common.topic.notable_types ns:m.01mp .  #Country\n}",
        "PotentialTopicEntityMention": "justin bieber",
        "TopicEntityName": "Justin Bieber",
        "TopicEntityMid": "m.06w2sn5",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06w2sn5": "Justin Bieber"
    },
    "qid_topic_entity": {
      "Q34086": "Justin Bieber"
    },
    "NoisyQuestion": "which country was Jusin Bieber born in?"
  },
  {
    "QuestionId": "WebQTest-740",
    "RawQuestion": "who was selena gomez in barney and friends?",
    "ProcessedQuestion": "who was selena gomez in barney and friends",
    "Parses": [
      {
        "ParseId": "WebQTest-740.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gs6vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gs6vr ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:m.06xv1n1 .\n}\n",
        "PotentialTopicEntityMention": "selena gomez",
        "TopicEntityName": "Selena Gomez",
        "TopicEntityMid": "m.0gs6vr",
        "InferentialChain": [
          "tv.tv_actor.starring_roles",
          "tv.regular_tv_appearance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.06xv1n1",
            "EntityName": "Barney & Friends - Season 7",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.seasons",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx3b6x",
            "EntityName": "Gianna"
          }
        ]
      },
      {
        "ParseId": "WebQTest-740.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gs6vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gs6vr ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:m.06xv1vj .\n}\n",
        "PotentialTopicEntityMention": "selena gomez",
        "TopicEntityName": "Selena Gomez",
        "TopicEntityMid": "m.0gs6vr",
        "InferentialChain": [
          "tv.tv_actor.starring_roles",
          "tv.regular_tv_appearance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.06xv1vj",
            "EntityName": "Barney & Friends - Season 8",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.seasons",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx3b6x",
            "EntityName": "Gianna"
          }
        ]
      },
      {
        "ParseId": "WebQTest-740.P2",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gs6vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gs6vr ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.01f4yy .\n}\n",
        "PotentialTopicEntityMention": "selena gomez",
        "TopicEntityName": "Selena Gomez",
        "TopicEntityMid": "m.0gs6vr",
        "InferentialChain": [
          "tv.tv_actor.starring_roles",
          "tv.regular_tv_appearance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01f4yy",
            "EntityName": "Barney & Friends",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.series",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx3b6x",
            "EntityName": "Gianna"
          }
        ]
      },
      {
        "ParseId": "WebQTest-740.P3",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f4yy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f4yy ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.actor ns:m.0gs6vr .\n}\n",
        "PotentialTopicEntityMention": "barney and friends",
        "TopicEntityName": "Barney & Friends",
        "TopicEntityMid": "m.01f4yy",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0gs6vr",
            "EntityName": "Selena Gomez",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.actor",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx3b6x",
            "EntityName": "Gianna"
          }
        ]
      },
      {
        "ParseId": "WebQTest-740.P4",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f4yy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f4yy ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:m.06xv1n1 .\n}\n",
        "PotentialTopicEntityMention": "barney and friends",
        "TopicEntityName": "Barney & Friends",
        "TopicEntityMid": "m.01f4yy",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.06xv1n1",
            "EntityName": "Barney & Friends - Season 7",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.seasons",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx3b6x",
            "EntityName": "Gianna"
          }
        ]
      },
      {
        "ParseId": "WebQTest-740.P5",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f4yy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f4yy ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:m.06xv1vj .\n}\n",
        "PotentialTopicEntityMention": "barney and friends",
        "TopicEntityName": "Barney & Friends",
        "TopicEntityMid": "m.01f4yy",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.06xv1vj",
            "EntityName": "Barney & Friends - Season 8",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.seasons",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx3b6x",
            "EntityName": "Gianna"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0gs6vr": "Selena Gomez",
      "m.01f4yy": "Barney & Friends"
    },
    "qid_topic_entity": {
      "Q83287": "Selena Gomez",
      "Q213588": "Barney & Friends"
    },
    "NoisyQuestion": "who was selena gomez in barney and frinds?"
  },
  {
    "QuestionId": "WebQTest-836",
    "RawQuestion": "who did vladimir lenin marry?",
    "ProcessedQuestion": "who did vladimir lenin marry",
    "Parses": [
      {
        "ParseId": "WebQTest-836.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05wh0sh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05wh0sh ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PotentialTopicEntityMention": "vladimir lenin",
        "TopicEntityName": "Vladimir Lenin",
        "TopicEntityMid": "m.05wh0sh",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02c8zp",
            "EntityName": "Nadezhda Krupskaya"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05wh0sh": "Vladimir Lenin"
    },
    "qid_topic_entity": {
      "Q1394": "Vladimir Lenin"
    },
    "NoisyQuestion": "who did vladimir lenin marry?"
  },
  {
    "QuestionId": "WebQTest-1628",
    "RawQuestion": "what type government does mexico have?",
    "ProcessedQuestion": "what type government does mexico have",
    "Parses": [
      {
        "ParseId": "WebQTest-1628.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "mexico",
        "TopicEntityName": "Mexico",
        "TopicEntityMid": "m.0b90_r",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d9r3",
            "EntityName": "Presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j729",
            "EntityName": "Federal republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0b90_r": "Mexico"
    },
    "qid_topic_entity": {
      "Q96": "Mexico"
    },
    "NoisyQuestion": "what type goverment does mexico have?"
  },
  {
    "QuestionId": "WebQTest-993",
    "RawQuestion": "who played meg in season 1 of family guy?",
    "ProcessedQuestion": "who played meg in season 1 of family guy",
    "Parses": [
      {
        "ParseId": "WebQTest-993.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035szd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035szd ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:m.027gynh .\n}\n",
        "PotentialTopicEntityMention": "meg",
        "TopicEntityName": "Meg Griffin",
        "TopicEntityMid": "m.035szd",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.027gynh",
            "EntityName": "Family Guy - Season 1",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.seasons",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02k4b2",
            "EntityName": "Lacey Chabert"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.035szd": "Meg Griffin"
    },
    "qid_topic_entity": {
      "Q908772": "Meg Griffin"
    },
    "NoisyQuestion": "who played meg in season 1 of famliy guy?"
  },
  {
    "QuestionId": "WebQTest-1955",
    "RawQuestion": "who are the judges appointed in the supreme court?",
    "ProcessedQuestion": "who are the judges appointed in the supreme court",
    "Parses": [
      {
        "ParseId": "WebQTest-1955.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07sz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07sz1 ns:law.court.judges ?y .\n?y ns:law.judicial_tenure.judge ?x .\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.from_date ?sk0} || \nEXISTS {?y ns:law.judicial_tenure.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.to_date ?sk2} || \nEXISTS {?y ns:law.judicial_tenure.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "supreme court",
        "TopicEntityName": "Supreme Court of the United States",
        "TopicEntityMid": "m.07sz1",
        "InferentialChain": [
          "law.court.judges",
          "law.judicial_tenure.judge"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "law.judicial_tenure.from_date",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "law.judicial_tenure.to_date",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_4j",
            "EntityName": "Clarence Thomas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0166zk",
            "EntityName": "Antonin Scalia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016m0v",
            "EntityName": "Stephen Breyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0199pk",
            "EntityName": "Ruth Bader Ginsburg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019s7r",
            "EntityName": "Anthony Kennedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gnxk",
            "EntityName": "Samuel Alito"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.066vhq",
            "EntityName": "John Roberts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06lnfm",
            "EntityName": "Elena Kagan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06lvrr",
            "EntityName": "Sonia Sotomayor"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07sz1": "Supreme Court of the United States"
    },
    "qid_topic_entity": {
      "Q11201": "Supreme Court of the United States"
    },
    "NoisyQuestion": "who are the judges appointed in the suprem court?"
  },
  {
    "QuestionId": "WebQTest-1905",
    "RawQuestion": "where was auschwitz concentration camp located?",
    "ProcessedQuestion": "where was auschwitz concentration camp located",
    "Parses": [
      {
        "ParseId": "WebQTest-1905.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0v_x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0v_x ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "auschwitz concentration camp",
        "TopicEntityName": "Auschwitz concentration camp",
        "TopicEntityMid": "m.0v_x",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.021p2p",
            "EntityName": "Oświęcim"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05mtdhz",
            "EntityName": "Auschwitz-Birkenau State Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qhw",
            "EntityName": "Poland"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0v_x": "Auschwitz concentration camp"
    },
    "qid_topic_entity": {
      "Q7341": "Auschwitz concentration camp"
    },
    "NoisyQuestion": "where was auschwitz concentration camp located?"
  },
  {
    "QuestionId": "WebQTest-1673",
    "RawQuestion": "what political party was hitler in?",
    "ProcessedQuestion": "what political party was hitler in",
    "Parses": [
      {
        "ParseId": "WebQTest-1673.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PotentialTopicEntityMention": "hitler",
        "TopicEntityName": "Adolf Hitler",
        "TopicEntityMid": "m.07_m9_",
        "InferentialChain": [
          "government.politician.party",
          "government.political_party_tenure.party"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05g9h",
            "EntityName": "Nazi Party"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dl13",
            "EntityName": "German Workers' Party"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07_m9_": "Adolf Hitler"
    },
    "qid_topic_entity": {
      "Q352": "Adolf Hitler"
    },
    "NoisyQuestion": "what political party was hitley in?"
  },
  {
    "QuestionId": "WebQTest-1463",
    "RawQuestion": "what language do people from the uk speak?",
    "ProcessedQuestion": "what language do people from the uk speak",
    "Parses": [
      {
        "ParseId": "WebQTest-1463.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "uk",
        "TopicEntityName": "United Kingdom",
        "TopicEntityMid": "m.07ssc",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07ssc": "United Kingdom"
    },
    "qid_topic_entity": {
      "Q145": "United Kingdom"
    },
    "NoisyQuestion": "what language do people from the u.k. speak?"
  },
  {
    "QuestionId": "WebQTest-984",
    "RawQuestion": "what is the name of airport in new york?",
    "ProcessedQuestion": "what is the name of airport in new york",
    "Parses": [
      {
        "ParseId": "WebQTest-984.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_286)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_286 ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?y ns:travel.transportation.mode_of_transportation ns:m.025t3bg .\n?x ns:location.location.containedby ns:m.059rby .\n}\n",
        "PotentialTopicEntityMention": "new york",
        "TopicEntityName": "New York City",
        "TopicEntityMid": "m.02_286",
        "InferentialChain": [
          "travel.travel_destination.how_to_get_here",
          "travel.transportation.transport_terminus"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.025t3bg",
            "EntityName": "Air travel",
            "SourceNodeIndex": 0,
            "NodePredicate": "travel.transportation.mode_of_transportation",
            "ValueType": "String"
          },
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.059rby",
            "EntityName": "New York",
            "SourceNodeIndex": 1,
            "NodePredicate": "location.location.containedby",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0p1l2",
            "EntityName": "John F. Kennedy International Airport"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02_286": "New York City"
    },
    "qid_topic_entity": {
      "Q60": "New York City"
    },
    "NoisyQuestion": "what is the name of airport in new yorke?"
  },
  {
    "QuestionId": "WebQTest-2008",
    "RawQuestion": "which countries speak arabic language?",
    "ProcessedQuestion": "which countries speak arabic language",
    "Parses": [
      {
        "ParseId": "WebQTest-2008.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jzc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jzc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PotentialTopicEntityMention": "arabic",
        "TopicEntityName": "Arabic Language",
        "TopicEntityMid": "m.0jzc",
        "InferentialChain": [
          "language.human_language.countries_spoken_in"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0161c",
            "EntityName": "Bahrain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01z215",
            "EntityName": "Saudi Arabia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01z88t",
            "EntityName": "Yemen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01znc_",
            "EntityName": "Turkey"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027jk",
            "EntityName": "Djibouti"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02k54",
            "EntityName": "Egypt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z62v1",
            "EntityName": "Seljuk Empire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03__y",
            "EntityName": "Jordan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035hr8",
            "EntityName": "South Yemen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03shp",
            "EntityName": "Iran"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03spz",
            "EntityName": "Israel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047yc",
            "EntityName": "Kuwait"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gqr",
            "EntityName": "Libya"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hqz",
            "EntityName": "Lebanon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjh",
            "EntityName": "Mauritania"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wgh",
            "EntityName": "Morocco"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05l8y",
            "EntityName": "Oman"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0697s",
            "EntityName": "Qatar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tw8",
            "EntityName": "Sudan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06vbd",
            "EntityName": "Syria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07dzf",
            "EntityName": "Tanzania"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07fj_",
            "EntityName": "Tunisia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d05q4",
            "EntityName": "Iraq"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h3y",
            "EntityName": "Algeria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h44w",
            "EntityName": "Mandatory Palestine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hzlz",
            "EntityName": "South Africa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j1z8",
            "EntityName": "United Arab Emirates"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jzc": "Arabic Language"
    },
    "qid_topic_entity": {
      "Q13955": "Arabic Language"
    },
    "NoisyQuestion": "which countries speak arabic languge?"
  },
  {
    "QuestionId": "WebQTest-1380",
    "RawQuestion": "what was nikola tesla known for?",
    "ProcessedQuestion": "what was nikola tesla known for",
    "Parses": [
      {
        "ParseId": "WebQTest-1380.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05d1y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05d1y ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "nikola tesla",
        "TopicEntityName": "Nikola Tesla",
        "TopicEntityMid": "m.05d1y",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02xhgx0",
            "EntityName": "Electrical engineer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03sbb",
            "EntityName": "Inventor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04q69_",
            "EntityName": "Futurist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05snw",
            "EntityName": "Physicist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06q2q",
            "EntityName": "Scientist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07s7r2",
            "EntityName": "Mechanical Engineer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05d1y": "Nikola Tesla"
    },
    "qid_topic_entity": {
      "Q9036": "Nikola Tesla"
    },
    "NoisyQuestion": "what was nikola tesla known for?"
  },
  {
    "QuestionId": "WebQTest-1870",
    "RawQuestion": "what movies did david carradine play in?",
    "ProcessedQuestion": "what movies did david carradine play in",
    "Parses": [
      {
        "ParseId": "WebQTest-1870.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p5hf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p5hf ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "david carradine",
        "TopicEntityName": "David Carradine",
        "TopicEntityMid": "m.02p5hf",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011pzwg5",
            "EntityName": "Kill Bill: The Whole Bloody Affair"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0134lcx0",
            "EntityName": "Nowhere to Run"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01rxyb",
            "EntityName": "Kill Bill Volume 1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01xrqm9",
            "EntityName": "Crime Zone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0272qjg",
            "EntityName": "Hair High"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0272v9w",
            "EntityName": "The Golden Boys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0274g5q",
            "EntityName": "Crime School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027grw3",
            "EntityName": "Last Hour"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027t7gk",
            "EntityName": "Mr. Horn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qds4w",
            "EntityName": "Deathsport"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qjtml",
            "EntityName": "Evil Toons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qp9s8",
            "EntityName": "Archie's Final Project"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02r96lm",
            "EntityName": "Last Stand at Saber River"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02vr32y",
            "EntityName": "Fall Down Dead"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z46bf",
            "EntityName": "Fuego"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gtwh_",
            "EntityName": "Crank: High Voltage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03zndp",
            "EntityName": "Death Race 2000"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047g4lw",
            "EntityName": "Circle of Iron"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047p6w8",
            "EntityName": "Trick or Treats"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gsxgr",
            "EntityName": "The Outsider"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gvw_z",
            "EntityName": "Martial Law"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j08hn",
            "EntityName": "Naked Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j0q52",
            "EntityName": "Criminal Desire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j0qqp",
            "EntityName": "Final Move"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j0yld",
            "EntityName": "The Last Sect"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j1d9l",
            "EntityName": "Brothers in Arms"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j1xrt",
            "EntityName": "Future Force"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j21g6",
            "EntityName": "The Monster Hunter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j26sc",
            "EntityName": "Kiss of a Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j29v0",
            "EntityName": "Kill Zone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j2mhm",
            "EntityName": "Capital Punishment"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j2q8v",
            "EntityName": "Macon County Jail"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j2sfx",
            "EntityName": "Guaranteed on Delivery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j2zp2",
            "EntityName": "Cybercity"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j2zx0",
            "EntityName": "Code Name Jaguar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j34y2",
            "EntityName": "Project Eliminator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j3579",
            "EntityName": "Knocking On Death's Door"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jgfgc",
            "EntityName": "Thunder and Lightning"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04lgl2y",
            "EntityName": "Tropical Snow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04p2fy8",
            "EntityName": "Camille"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04ssf",
            "EntityName": "Mean Streets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.057myy",
            "EntityName": "The Serpent's Egg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b4l67",
            "EntityName": "Being Michael Madsen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05c2853",
            "EntityName": "Son of the Dragon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05f3y96",
            "EntityName": "Absolute Evil"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05f5pjd",
            "EntityName": "Maybe I'll Come Home in the Spring"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05p89nk",
            "EntityName": "American Reel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06_v8dw",
            "EntityName": "I Saw What You Did"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.062rrj",
            "EntityName": "Boxcar Bertha"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06k4hw",
            "EntityName": "Cannonball"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06qxmj",
            "EntityName": "Out of the Wilderness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.078mng",
            "EntityName": "Hell Ride"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07d83t",
            "EntityName": "The Long Riders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07dvtc",
            "EntityName": "Lone Wolf McQuade"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07gns9",
            "EntityName": "Gray Lady Down"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07gp3w",
            "EntityName": "An American Tail: The Treasure of Manhattan Island"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07k7bh0",
            "EntityName": "Nowhere to Run"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07kf0d4",
            "EntityName": "True Legend"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07yb1s",
            "EntityName": "The Ultimate Enemy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.083vqj",
            "EntityName": "Homo Erectus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08y5wd",
            "EntityName": "Q"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09k51yg",
            "EntityName": "Treasure Raiders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09v17dd",
            "EntityName": "The Rage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b__16q",
            "EntityName": "Americana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b6k13z",
            "EntityName": "Safari 3000"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b6lpbm",
            "EntityName": "Kandisha"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bc9_3",
            "EntityName": "Taggart"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bcb9g",
            "EntityName": "Richard III"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bcbhg",
            "EntityName": "Kung Fu: The Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bf4gtj",
            "EntityName": "Brotherhood of the Gun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bh7jby",
            "EntityName": "Try This One for Size"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bq8tr",
            "EntityName": "Bird on a Wire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bs16n",
            "EntityName": "Balto II: Wolf Quest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bx_71h",
            "EntityName": "The Good Guys and the Bad Guys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bx_s9v",
            "EntityName": "Behind Enemy Lines"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bxz0c1",
            "EntityName": "High Noon, Part II: The Return of Will Kane"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1c2yt",
            "EntityName": "Midnight Fear"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c3yq5d",
            "EntityName": "Macho Callahan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c41y5f",
            "EntityName": "Permanent Vacation"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c7y2c",
            "EntityName": "Dead & Breakfast"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0clhj5",
            "EntityName": "Big Stan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crr_yx",
            "EntityName": "Bad Cop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crrb94",
            "EntityName": "Starz Inside: Unforgettably Evil"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crrckw",
            "EntityName": "Future Zone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crrj82",
            "EntityName": "Night of the Templar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crrl_t",
            "EntityName": "Nightfall"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crrsd4",
            "EntityName": "Miracle at Sage Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crrwjq",
            "EntityName": "Armed Response"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crrwl7",
            "EntityName": "Warlords"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crs071",
            "EntityName": "Road of No Return"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crsfhl",
            "EntityName": "By Dawn's Early Light"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crshly",
            "EntityName": "Oceans of Fire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crsr0l",
            "EntityName": "Bala Perdida"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crt6rf",
            "EntityName": "On the Line"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crtfzr",
            "EntityName": "Six Against the Rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crtspw",
            "EntityName": "Detention"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crtsrd",
            "EntityName": "Break"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crttx5",
            "EntityName": "Autumn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crvkxc",
            "EntityName": "The Donor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crvmw1",
            "EntityName": "David Carradine's Shaolin Cardio Kick Boxing Workout"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crxk1m",
            "EntityName": "UnConventional"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cs1_b1",
            "EntityName": "All Hell Broke Loose"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cs10pd",
            "EntityName": "David Carradine Kung Fu Action Masters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cs3kyt",
            "EntityName": "Last Goodbye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cs76m5",
            "EntityName": "David Carradine's AM & PM Tai Chi Workout for Beginners"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d042l",
            "EntityName": "Max Havoc: Curse of the Dragon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dgkv64",
            "EntityName": "Double Trouble"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dj9xmf",
            "EntityName": "Jealousy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqvnd",
            "EntityName": "Karate Cop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dryg5m",
            "EntityName": "Eldorado"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f2864",
            "EntityName": "How to Rob a Bank"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fc6sp",
            "EntityName": "The Warrior and the Sorceress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fm7l2",
            "EntityName": "Children of the Corn V: Fields of Terror"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fn43t",
            "EntityName": "Young Billy Young"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fqnq4_",
            "EntityName": "The New Swiss Family Robinson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g55lz_",
            "EntityName": "Kung Fu Killer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g9_441",
            "EntityName": "Stretch"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gf7ssv",
            "EntityName": "Run for Your Life"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gjdd6d",
            "EntityName": "Blackout"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gkr5xq",
            "EntityName": "Animal Instincts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gks2xc",
            "EntityName": "Cloud Dancer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gks2zc",
            "EntityName": "Dune Warriors"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gksd67",
            "EntityName": "Dangerous Curves"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gksqd4",
            "EntityName": "Sonny Boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gm0_fg",
            "EntityName": "Dark Fields"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gttw88",
            "EntityName": "Dinocroc vs. Supergator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gyv0b4",
            "EntityName": "Kill Bill Volume 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h_0jbs",
            "EntityName": "The Misfit Brigade"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h05yr",
            "EntityName": "Roadside Prophets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0ncl5",
            "EntityName": "Money to Burn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0nclq",
            "EntityName": "Six Days in Paradise"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hr418b",
            "EntityName": "The Bad Seed"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hy542p",
            "EntityName": "Night Rhythms"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j62vp8",
            "EntityName": "Fast Charlie... the Moonbeam Rider"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kbjch5",
            "EntityName": "Wizards of the Lost Kingdom 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kv661",
            "EntityName": "Waxwork II: Lost in Time"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kv6xq",
            "EntityName": "Sundown: The Vampire in Retreat"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0pt_5",
            "EntityName": "Bound for Glory"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02p5hf": "David Carradine"
    },
    "qid_topic_entity": {
      "Q187038": "David Carradine"
    },
    "NoisyQuestion": "what movies did david carradine play in?"
  },
  {
    "QuestionId": "WebQTest-838",
    "RawQuestion": "what team does cristiano ronaldo play for 2011?",
    "ProcessedQuestion": "what team does cristiano ronaldo play for 2011",
    "Parses": [
      {
        "ParseId": "WebQTest-838.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xt6q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xt6q ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "cristiano ronaldo",
        "TopicEntityName": "Cristiano Ronaldo",
        "TopicEntityMid": "m.02xt6q",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2011-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2011-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2011-01-01",
          "End": "2011-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "2011"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rqxc",
            "EntityName": "Portugal national football team"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06l22",
            "EntityName": "Real Madrid C.F."
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02xt6q": "Cristiano Ronaldo"
    },
    "qid_topic_entity": {
      "Q11571": "Cristiano Ronaldo"
    },
    "NoisyQuestion": "what team does cristiano ronaldo play for 2011?"
  },
  {
    "QuestionId": "WebQTest-916",
    "RawQuestion": "what is the language of russia s spoken?",
    "ProcessedQuestion": "what is the language of russia s spoken",
    "Parses": [
      {
        "ParseId": "WebQTest-916.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "russia",
        "TopicEntityName": "Russia",
        "TopicEntityMid": "m.06bnz",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.017dsl",
            "EntityName": "Osetin Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0198z0",
            "EntityName": "Chechen Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019yz7",
            "EntityName": "Tatar Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01bcw_",
            "EntityName": "Azerbaijani language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01qyqy",
            "EntityName": "Abaza Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01y_vl",
            "EntityName": "Mari language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020g7w",
            "EntityName": "Bashkir Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0234zj",
            "EntityName": "Avar Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0264gxt",
            "EntityName": "Aghul language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027bj_4",
            "EntityName": "Tsakhur Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02gj5b",
            "EntityName": "Tuvin Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwm9x",
            "EntityName": "Moksha Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lpht",
            "EntityName": "Erzya Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02mj1c",
            "EntityName": "Kalmyk-Oirat Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02mxzf",
            "EntityName": "Kabardian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02nbbh",
            "EntityName": "Adyghe Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02q4t0g",
            "EntityName": "Rutul language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x9lm",
            "EntityName": "Lezgi Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.037lmh",
            "EntityName": "Ingush Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.037nfm",
            "EntityName": "Altai language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03f3f1",
            "EntityName": "Crimean Turkish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gn_0",
            "EntityName": "Nogai Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03klw8",
            "EntityName": "Dargwa Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03wt_j",
            "EntityName": "Komi language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.049jrm",
            "EntityName": "Udmurt Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04rxz0",
            "EntityName": "Kumyk Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04xqkr",
            "EntityName": "Karachay-Balkar Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.054zyh",
            "EntityName": "Buryat language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05l6md",
            "EntityName": "Yakut Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06b_j",
            "EntityName": "Russian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bw_x",
            "EntityName": "Tabassaran Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0880p",
            "EntityName": "Yiddish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.091dr6",
            "EntityName": "Lak Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.093gjw",
            "EntityName": "Khakas Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cjk9",
            "EntityName": "Ukrainian Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-916.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "russia",
        "TopicEntityName": "Russia",
        "TopicEntityMid": "m.06bnz",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06b_j",
            "EntityName": "Russian Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06bnz": "Russia"
    },
    "qid_topic_entity": {
      "Q159": "Russia"
    },
    "NoisyQuestion": "what is the language of russia s spken?"
  },
  {
    "QuestionId": "WebQTest-2004",
    "RawQuestion": "what the time zone in japan?",
    "ProcessedQuestion": "what the time zone in japan",
    "Parses": [
      {
        "ParseId": "WebQTest-2004.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "japan",
        "TopicEntityName": "Japan",
        "TopicEntityMid": "m.03_3d",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019rdm",
            "EntityName": "Japan Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03_3d": "Japan"
    },
    "qid_topic_entity": {
      "Q17": "Japan"
    },
    "NoisyQuestion": "what the time zone in japan?"
  },
  {
    "QuestionId": "WebQTest-311",
    "RawQuestion": "where is the ufc headquarters?",
    "ProcessedQuestion": "where is the ufc headquarters",
    "Parses": [
      {
        "ParseId": "WebQTest-311.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016r3g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016r3g ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PotentialTopicEntityMention": "ufc",
        "TopicEntityName": "Ultimate Fighting Championship",
        "TopicEntityMid": "m.016r3g",
        "InferentialChain": [
          "organization.organization.headquarters",
          "location.mailing_address.citytown"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cv3w",
            "EntityName": "Las Vegas"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.016r3g": "Ultimate Fighting Championship"
    },
    "qid_topic_entity": {
      "Q186471": "Ultimate Fighting Championship"
    },
    "NoisyQuestion": "where is the ufc headquartes?"
  },
  {
    "QuestionId": "WebQTest-1829",
    "RawQuestion": "what type of religion did massachusetts have?",
    "ProcessedQuestion": "what type of religion did massachusetts have",
    "Parses": [
      {
        "ParseId": "WebQTest-1829.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05k7sb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05k7sb ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PotentialTopicEntityMention": "massachusetts",
        "TopicEntityName": "Massachusetts",
        "TopicEntityMid": "m.05k7sb",
        "InferentialChain": [
          "location.statistical_region.religions",
          "location.religion_percentage.religion"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019cr",
            "EntityName": "Baptists"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01lp8",
            "EntityName": "Christianity"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01s5nb",
            "EntityName": "United Church of Christ"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.021_0p",
            "EntityName": "Churches of Christ"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rsw",
            "EntityName": "Episcopal Church"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_gx",
            "EntityName": "Judaism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04pk9",
            "EntityName": "Lutheranism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051kv",
            "EntityName": "Methodism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05sfs",
            "EntityName": "Protestantism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05w5d",
            "EntityName": "Pentecostalism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0631_",
            "EntityName": "Presbyterianism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.092bf5",
            "EntityName": "Buddhism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c8wxp",
            "EntityName": "Catholicism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dtdq",
            "EntityName": "Jehovah's Witnesses"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05k7sb": "Massachusetts"
    },
    "qid_topic_entity": {
      "Q771": "Massachusetts"
    },
    "NoisyQuestion": "what type of religion did massachusetts hav?"
  },
  {
    "QuestionId": "WebQTest-1938",
    "RawQuestion": "where did robin williams get married?",
    "ProcessedQuestion": "where did robin williams get married",
    "Parses": [
      {
        "ParseId": "WebQTest-1938.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dzf_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dzf_ ns:people.person.spouse_s ?y .\n?y ns:people.marriage.location_of_ceremony ?x .\n}\n",
        "PotentialTopicEntityMention": "robin williams",
        "TopicEntityName": "Robin Williams",
        "TopicEntityMid": "m.0dzf_",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.location_of_ceremony"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0r26s",
            "EntityName": "St. Helena"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0dzf_": "Robin Williams"
    },
    "qid_topic_entity": {
      "Q83338": "Robin Williams"
    },
    "NoisyQuestion": "where did robin williams get marrid?"
  },
  {
    "QuestionId": "WebQTest-979",
    "RawQuestion": "what currency to take to barbados?",
    "ProcessedQuestion": "what currency to take to barbados",
    "Parses": [
      {
        "ParseId": "WebQTest-979.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0162v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0162v ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "barbados",
        "TopicEntityName": "Barbados",
        "TopicEntityMid": "m.0162v",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05hy7p",
            "EntityName": "Barbadian dollar"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0162v": "Barbados"
    },
    "qid_topic_entity": {
      "Q244": "Barbados"
    },
    "NoisyQuestion": "what currency to take to Barbados?"
  },
  {
    "QuestionId": "WebQTest-374",
    "RawQuestion": "what type of artist is henri matisse?",
    "ProcessedQuestion": "what type of artist is henri matisse",
    "Parses": [
      {
        "ParseId": "WebQTest-374.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gct_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gct_ ns:visual_art.visual_artist.art_forms ?x .\n}\n",
        "PotentialTopicEntityMention": "henri matisse",
        "TopicEntityName": "Henri Matisse",
        "TopicEntityMid": "m.0gct_",
        "InferentialChain": [
          "visual_art.visual_artist.art_forms"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01bsxb",
            "EntityName": "Collage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02csf",
            "EntityName": "Drawing"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qdh",
            "EntityName": "Painting"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06msq",
            "EntityName": "Sculpture"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bp7w",
            "EntityName": "Printmaking"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0gct_": "Henri Matisse"
    },
    "qid_topic_entity": {
      "Q5589": "Henri Matisse"
    },
    "NoisyQuestion": "what type of artist is henri matisse?"
  },
  {
    "QuestionId": "WebQTest-1965",
    "RawQuestion": "who did the voice for lola bunny?",
    "ProcessedQuestion": "who did the voice for lola bunny",
    "Parses": [
      {
        "ParseId": "WebQTest-1965.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Union. Original comment: F Union Voice actors for both movie and TV show"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\t{ \n\t  # Film\n\t  ns:m.0534r8 ns:film.film_character.portrayed_in_films ?y .\n\t  ?y ns:film.performance.actor ?x .\n\t  ?y ns:film.performance.special_performance_type ns:m.02nsjvf . #voice\n\t}\n\tUNION\n\t{\n\t  # TV\n\t  ns:m.0534r8 ns:tv.tv_character.appeared_in_tv_program ?y .\n\t  ?y ns:tv.regular_tv_appearance.actor ?x .\n\t}\n}",
        "PotentialTopicEntityMention": "lola bunny",
        "TopicEntityName": "Lola Bunny",
        "TopicEntityMid": "m.0534r8",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.024my5",
            "EntityName": "Kath Soucie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08vr94",
            "EntityName": "Kristen Wiig"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fm5ld",
            "EntityName": "Britt McKillip"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0534r8": "Lola Bunny"
    },
    "qid_topic_entity": {
      "Q1575844": "Lola Bunny"
    },
    "NoisyQuestion": "who did the voice for lola bunny?"
  },
  {
    "QuestionId": "WebQTest-827",
    "RawQuestion": "what country does justin bieber come from?",
    "ProcessedQuestion": "what country does justin bieber come from",
    "Parses": [
      {
        "ParseId": "WebQTest-827.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06w2sn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06w2sn5 ns:people.person.nationality ?x .\n}\n",
        "PotentialTopicEntityMention": "justin bieber",
        "TopicEntityName": "Justin Bieber",
        "TopicEntityMid": "m.06w2sn5",
        "InferentialChain": [
          "people.person.nationality"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06w2sn5": "Justin Bieber"
    },
    "qid_topic_entity": {
      "Q34086": "Justin Bieber"
    },
    "NoisyQuestion": "what country does jutin bieber come from?"
  },
  {
    "QuestionId": "WebQTest-423",
    "RawQuestion": "when's the last time the steelers won the superbowl?",
    "ProcessedQuestion": "when 's the last time the steelers won the superbowl",
    "Parses": [
      {
        "ParseId": "WebQTest-423.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? no max"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tfm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tfm ns:sports.sports_team.championships ?x .\n?x ns:common.topic.notable_types ns:m.01xljv1 .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PotentialTopicEntityMention": "steelers",
        "TopicEntityName": "Pittsburgh Steelers",
        "TopicEntityMid": "m.05tfm",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01xljv1",
            "EntityName": "Super bowl",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": {
          "SortOrder": "Descending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "time.event.end_date",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04n7r5",
            "EntityName": "Super Bowl XLIII"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05tfm": "Pittsburgh Steelers"
    },
    "qid_topic_entity": {
      "Q191477": "Pittsburgh Steelers"
    },
    "NoisyQuestion": "when's the last time the steelers won the superbowl?"
  },
  {
    "QuestionId": "WebQTest-1369",
    "RawQuestion": "what to visit in denver?",
    "ProcessedQuestion": "what to visit in denver",
    "Parses": [
      {
        "ParseId": "WebQTest-1369.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02cl1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02cl1 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PotentialTopicEntityMention": "denver",
        "TopicEntityName": "Denver",
        "TopicEntityMid": "m.02cl1",
        "InferentialChain": [
          "travel.travel_destination.tourist_attractions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bjgd",
            "EntityName": "Molly Brown House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.049q_0",
            "EntityName": "Elitch Gardens"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04cs6m",
            "EntityName": "Colorado State Capitol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j9vvm",
            "EntityName": "Westin Westminster"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.052lxk_",
            "EntityName": "Black American West Museum & Heritage Center"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.052lxk7",
            "EntityName": "Museum of Contemporary Art Denver"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05f5ywb",
            "EntityName": "Denver Firefighters Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05tf81",
            "EntityName": "Denver Botanic Gardens"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zt_ds",
            "EntityName": "Festivus Film Festival"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06k4_1",
            "EntityName": "Denver Mint"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08hnyb",
            "EntityName": "Denver Museum of Nature and Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08yrqf",
            "EntityName": "Chamberlin Observatory"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cp03nr",
            "EntityName": "Children's Museum of Denver"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cvztr",
            "EntityName": "Forney Transportation Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j1z2ts",
            "EntityName": "Frederic C. Hamilton Building"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j1z2v4",
            "EntityName": "North Building"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02cl1": "Denver"
    },
    "qid_topic_entity": {
      "Q16554": "Denver"
    },
    "NoisyQuestion": "what to visit in Denver?"
  },
  {
    "QuestionId": "WebQTest-1132",
    "RawQuestion": "what did coretta scott king died from?",
    "ProcessedQuestion": "what did coretta scott king died from",
    "Parses": [
      {
        "ParseId": "WebQTest-1132.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0289jv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0289jv ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "coretta scott king",
        "TopicEntityName": "Coretta Scott King",
        "TopicEntityMid": "m.0289jv",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019dmc",
            "EntityName": "Respiratory failure"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0289jv": "Coretta Scott King"
    },
    "qid_topic_entity": {
      "Q230969": "Coretta Scott King"
    },
    "NoisyQuestion": "what did coretta scott king died from?"
  },
  {
    "QuestionId": "WebQTest-353",
    "RawQuestion": "who does jordan palmer play for?",
    "ProcessedQuestion": "who does jordan palmer play for",
    "Parses": [
      {
        "ParseId": "WebQTest-353.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d9wsx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d9wsx ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "jordan palmer",
        "TopicEntityName": "Jordan Palmer",
        "TopicEntityMid": "m.0d9wsx",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": []
      }
    ],
    "topic_entity": {
      "m.0d9wsx": "Jordan Palmer"
    },
    "qid_topic_entity": {
      "Q6276871": "Jordan Palmer"
    },
    "NoisyQuestion": "who does jordan palmer play for?"
  },
  {
    "QuestionId": "WebQTest-709",
    "RawQuestion": "what did general robert e lee die from?",
    "ProcessedQuestion": "what did general robert e lee die from",
    "Parses": [
      {
        "ParseId": "WebQTest-709.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06f5j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06f5j ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "robert e lee",
        "TopicEntityName": "Robert E. Lee",
        "TopicEntityMid": "m.06f5j",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dq9p",
            "EntityName": "Pneumonia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06f5j": "Robert E. Lee"
    },
    "qid_topic_entity": {
      "Q165557": "Robert E. Lee"
    },
    "NoisyQuestion": "what did general robert e lee die from?"
  },
  {
    "QuestionId": "WebQTest-955",
    "RawQuestion": "who did granville t. woods married?",
    "ProcessedQuestion": "who did granville t. woods married",
    "Parses": [
      {
        "ParseId": "WebQTest-955.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0236mx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0236mx ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PotentialTopicEntityMention": "granville t . woods",
        "TopicEntityName": "Granville Woods",
        "TopicEntityMid": "m.0236mx",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j6f6kt",
            "EntityName": "Loretta Woods"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0236mx": "Granville Woods"
    },
    "qid_topic_entity": {
      "Q3115447": "Granville Woods"
    },
    "NoisyQuestion": "who did granville t. woodz married?"
  },
  {
    "QuestionId": "WebQTest-1445",
    "RawQuestion": "what tv series did mark harmon star in?",
    "ProcessedQuestion": "what tv series did mark harmon star in",
    "Parses": [
      {
        "ParseId": "WebQTest-1445.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.037gjc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.037gjc ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.series ?x .\n}\n",
        "PotentialTopicEntityMention": "mark harmon",
        "TopicEntityName": "Mark Harmon",
        "TopicEntityMid": "m.037gjc",
        "InferentialChain": [
          "tv.tv_actor.starring_roles",
          "tv.regular_tv_appearance.series"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fx1l",
            "EntityName": "Chicago Hope"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02996d",
            "EntityName": "Centennial"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02kk_c",
            "EntityName": "From the Earth to the Moon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02md2d",
            "EntityName": "St. Elsewhere"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x6r9",
            "EntityName": "Flamingo Road"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03m8sg",
            "EntityName": "NCIS"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05c2j5_",
            "EntityName": "Eleanor and Franklin: The White House Years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05p4qwd",
            "EntityName": "Sam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06yg5s",
            "EntityName": "240-Robert"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07cgcf9",
            "EntityName": "Charlie Grace"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dl6q1_",
            "EntityName": "The Dream Merchants"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g6sm2",
            "EntityName": "Reasonable Doubts"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.037gjc": "Mark Harmon"
    },
    "qid_topic_entity": {
      "Q296774": "Mark Harmon"
    },
    "NoisyQuestion": "what tv series did mark harmo star in?"
  },
  {
    "QuestionId": "WebQTest-1969",
    "RawQuestion": "what team is kris humphries play for?",
    "ProcessedQuestion": "what team is kris humphries play for",
    "Parses": [
      {
        "ParseId": "WebQTest-1969.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0730b4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0730b4 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "kris humphries",
        "TopicEntityName": "Kris Humphries",
        "TopicEntityMid": "m.0730b4",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jm5b",
            "EntityName": "Washington Wizards"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0730b4": "Kris Humphries"
    },
    "qid_topic_entity": {
      "Q363421": "Kris Humphries"
    },
    "NoisyQuestion": "what team is kris humphries play for?"
  },
  {
    "QuestionId": "WebQTest-1079",
    "RawQuestion": "what country was king tut's tomb found?",
    "ProcessedQuestion": "what country was king tut 's tomb found",
    "Parses": [
      {
        "ParseId": "WebQTest-1079.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01qg6m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01qg6m ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PotentialTopicEntityMention": "king tut 's tomb",
        "TopicEntityName": "KV62",
        "TopicEntityMid": "m.01qg6m",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01mp",
            "EntityName": "Country",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02k54",
            "EntityName": "Egypt"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01qg6m": "KV62"
    },
    "qid_topic_entity": {
      "Q835309": "KV62"
    },
    "NoisyQuestion": "what country was king tut's tomb found?"
  },
  {
    "QuestionId": "WebQTest-474",
    "RawQuestion": "who played jacob black in twilight?",
    "ProcessedQuestion": "who played jacob black in twilight",
    "Parses": [
      {
        "ParseId": "WebQTest-474.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03nm_fh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03nm_fh ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.02qd_td .\n}\n",
        "PotentialTopicEntityMention": "twilight",
        "TopicEntityName": "Twilight",
        "TopicEntityMid": "m.03nm_fh",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02qd_td",
            "EntityName": "Jacob Black",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ldhs",
            "EntityName": "Taylor Lautner"
          }
        ]
      },
      {
        "ParseId": "WebQTest-474.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qd_td)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qd_td ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "jacob black",
        "TopicEntityName": "Jacob Black",
        "TopicEntityMid": "m.02qd_td",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ldhs",
            "EntityName": "Taylor Lautner"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03nm_fh": "Twilight",
      "m.02qd_td": "Jacob Black"
    },
    "qid_topic_entity": {
      "Q160071": "Twilight",
      "Q716835": "Jacob Black"
    },
    "NoisyQuestion": "who played jacob black in twilight?"
  },
  {
    "QuestionId": "WebQTest-834",
    "RawQuestion": "where did the battle of waterloo occur?",
    "ProcessedQuestion": "where did the battle of waterloo occur",
    "Parses": [
      {
        "ParseId": "WebQTest-834.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01dcm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01dcm ns:time.event.locations ?x .\n}\n",
        "PotentialTopicEntityMention": "waterloo",
        "TopicEntityName": "Battle of Waterloo",
        "TopicEntityMid": "m.01dcm",
        "InferentialChain": [
          "time.event.locations"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.017qwy",
            "EntityName": "Waterloo"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01dcm": "Battle of Waterloo"
    },
    "qid_topic_entity": {
      "Q48314": "Battle of Waterloo"
    },
    "NoisyQuestion": "where did the battle of watterloo occur?"
  },
  {
    "QuestionId": "WebQTest-708",
    "RawQuestion": "who won fa cup 1976?",
    "ProcessedQuestion": "who won fa cup 1976",
    "Parses": [
      {
        "ParseId": "WebQTest-708.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_p0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_p0 ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n?y ns:sports.sports_award.season ns:m.04gp5lx .\n}\n",
        "PotentialTopicEntityMention": "fa cup",
        "TopicEntityName": "FA Cup",
        "TopicEntityMid": "m.02_p0",
        "InferentialChain": [
          "sports.sports_award_type.winners",
          "sports.sports_award.award_winner"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04gp5lx",
            "EntityName": "1975–76 FA Cup",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_award.season",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k_l4",
            "EntityName": "Southampton F.C."
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02_p0": "FA Cup"
    },
    "qid_topic_entity": {
      "Q11151": "FA Cup"
    },
    "NoisyQuestion": "who won fa cup 1976?"
  },
  {
    "QuestionId": "WebQTest-1201",
    "RawQuestion": "who played carlton lassiter on psych?",
    "ProcessedQuestion": "who played carlton lassiter on psych",
    "Parses": [
      {
        "ParseId": "WebQTest-1201.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ds5jv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ds5jv ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.0fdxxb .\n}\n",
        "PotentialTopicEntityMention": "psych",
        "TopicEntityName": "Psych",
        "TopicEntityMid": "m.0ds5jv",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0fdxxb",
            "EntityName": "Carlton Lassiter",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f8yw1",
            "EntityName": "Timothy Omundson"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ds5jv": "Psych"
    },
    "qid_topic_entity": {
      "Q48758": "Psych"
    },
    "NoisyQuestion": "who played carlton lassiter on psych?"
  },
  {
    "QuestionId": "WebQTest-597",
    "RawQuestion": "what style of music does john mayer play?",
    "ProcessedQuestion": "what style of music does john mayer play",
    "Parses": [
      {
        "ParseId": "WebQTest-597.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01s21dg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01s21dg ns:music.artist.genre ?x .\n}\n",
        "PotentialTopicEntityMention": "john mayer",
        "TopicEntityName": "John Mayer",
        "TopicEntityMid": "m.01s21dg",
        "InferentialChain": [
          "music.artist.genre"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01243b",
            "EntityName": "Indie rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0155w",
            "EntityName": "Blues"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016clz",
            "EntityName": "Alternative rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016jny",
            "EntityName": "Folk rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01lyv",
            "EntityName": "Country"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027pgn0",
            "EntityName": "Soul rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02k_kn",
            "EntityName": "Soft rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qdgx",
            "EntityName": "Blue-eyed soul"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w4v",
            "EntityName": "Folk music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02yv6b",
            "EntityName": "Blues rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05bt6j",
            "EntityName": "Pop rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064t9",
            "EntityName": "Pop music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06by7",
            "EntityName": "Rock music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09qxq7",
            "EntityName": "Acoustic music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gywn",
            "EntityName": "Soul music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0mhfr",
            "EntityName": "Country rock"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01s21dg": "John Mayer"
    },
    "qid_topic_entity": {
      "Q215215": "John Mayer"
    },
    "NoisyQuestion": "what style of music does jhon mayer play?"
  },
  {
    "QuestionId": "WebQTest-1321",
    "RawQuestion": "where did the gallipoli war take place?",
    "ProcessedQuestion": "where did the gallipoli war take place",
    "Parses": [
      {
        "ParseId": "WebQTest-1321.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fc7p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fc7p ns:time.event.locations ?x .\n}\n",
        "PotentialTopicEntityMention": "gallipoli",
        "TopicEntityName": "Gallipoli Campaign",
        "TopicEntityMid": "m.01fc7p",
        "InferentialChain": [
          "time.event.locations"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03czv",
            "EntityName": "Gallipoli"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01fc7p": "Gallipoli Campaign"
    },
    "qid_topic_entity": {
      "Q164983": "Gallipoli Campaign"
    },
    "NoisyQuestion": "where did the gallipoli war take place?"
  },
  {
    "QuestionId": "WebQTest-268",
    "RawQuestion": "what year was lebron james rookie season?",
    "ProcessedQuestion": "what year was lebron james rookie season",
    "Parses": [
      {
        "ParseId": "WebQTest-268.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jz6d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jz6d ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:m.02yqnh .\n}\n",
        "PotentialTopicEntityMention": "lebron james",
        "TopicEntityName": "LeBron James",
        "TopicEntityMid": "m.01jz6d",
        "InferentialChain": [
          "sports.sports_award_winner.awards",
          "sports.sports_award.season"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02yqnh",
            "EntityName": "NBA Rookie of the Year Award",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_award.award",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07_x8s",
            "EntityName": "2003–04 NBA season"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01jz6d": "LeBron James"
    },
    "qid_topic_entity": {
      "Q36159": "LeBron James"
    },
    "NoisyQuestion": "what year was lebron james rookie season?"
  },
  {
    "QuestionId": "WebQTest-1897",
    "RawQuestion": "what are the names of ariel's six sisters?",
    "ProcessedQuestion": "what are the names of ariel 's six sisters",
    "Parses": [
      {
        "ParseId": "WebQTest-1897.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cl19h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cl19h ns:fictional_universe.fictional_character.siblings ?y .\n?y ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x .\n}\n",
        "PotentialTopicEntityMention": "ariel",
        "TopicEntityName": "Ariel",
        "TopicEntityMid": "m.0cl19h",
        "InferentialChain": [
          "fictional_universe.fictional_character.siblings",
          "fictional_universe.sibling_relationship_of_fictional_characters.siblings"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065hkfx",
            "EntityName": "Alana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065hkg2",
            "EntityName": "Attina"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065hkg8",
            "EntityName": "Andrina"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065hkgg",
            "EntityName": "Arista"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065hkgp",
            "EntityName": "Adella"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065hkgw",
            "EntityName": "Aquata"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0cl19h": "Ariel"
    },
    "qid_topic_entity": {
      "Q892442": "Ariel"
    },
    "NoisyQuestion": "what are the names of ariel's six sistrs?"
  },
  {
    "QuestionId": "WebQTest-33",
    "RawQuestion": "what timezone is sweden?",
    "ProcessedQuestion": "what timezone is sweden",
    "Parses": [
      {
        "ParseId": "WebQTest-33.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d0vqn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d0vqn ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "sweden",
        "TopicEntityName": "Sweden",
        "TopicEntityMid": "m.0d0vqn",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02llzg",
            "EntityName": "Central European Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d0vqn": "Sweden"
    },
    "qid_topic_entity": {
      "Q34": "Sweden"
    },
    "NoisyQuestion": "what timezone is sweeden?"
  },
  {
    "QuestionId": "WebQTest-766",
    "RawQuestion": "what is malaysian currency?",
    "ProcessedQuestion": "what is malaysian currency",
    "Parses": [
      {
        "ParseId": "WebQTest-766.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09pmkv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09pmkv ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "malaysian",
        "TopicEntityName": "Malaysia",
        "TopicEntityMid": "m.09pmkv",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_c9q",
            "EntityName": "Malaysian ringgit"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09pmkv": "Malaysia"
    },
    "qid_topic_entity": {
      "Q833": "Malaysia"
    },
    "NoisyQuestion": "what is malaysian currency?"
  },
  {
    "QuestionId": "WebQTest-989",
    "RawQuestion": "what happened to dunkirk during ww2?",
    "ProcessedQuestion": "what happened to dunkirk during ww2",
    "Parses": [
      {
        "ParseId": "WebQTest-989.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "good problem!"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0md6f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0md6f ns:location.location.events ?x .\n?x ns:time.event.included_in_event ns:m.081pw .\n}\n",
        "PotentialTopicEntityMention": "dunkirk",
        "TopicEntityName": "Dunkirk",
        "TopicEntityMid": "m.0md6f",
        "InferentialChain": [
          "location.location.events"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.081pw",
            "EntityName": "World War II",
            "SourceNodeIndex": 0,
            "NodePredicate": "time.event.included_in_event",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03hm2pk",
            "EntityName": "Siege of Dunkirk"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jpb7",
            "EntityName": "Battle of Dunkirk"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0md6f": "Dunkirk"
    },
    "qid_topic_entity": {
      "Q45797": "Dunkirk"
    },
    "NoisyQuestion": "what happened to Dunkirk during ww2?"
  },
  {
    "QuestionId": "WebQTest-1420",
    "RawQuestion": "what does monsanto own?",
    "ProcessedQuestion": "what does monsanto own",
    "Parses": [
      {
        "ParseId": "WebQTest-1420.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0n8m6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0n8m6 ns:business.business_operation.industry ?x .\n}\n",
        "PotentialTopicEntityMention": "monsanto",
        "TopicEntityName": "Monsanto",
        "TopicEntityMid": "m.0n8m6",
        "InferentialChain": [
          "business.business_operation.industry"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02ntf00",
            "EntityName": "Agrochemical"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09dh0",
            "EntityName": "Seed"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g10z",
            "EntityName": "Chemical industry"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hkf",
            "EntityName": "Agriculture"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0n8m6": "Monsanto"
    },
    "qid_topic_entity": {
      "Q207983": "Monsanto"
    },
    "NoisyQuestion": "what does monsantto own?"
  },
  {
    "QuestionId": "WebQTest-654",
    "RawQuestion": "what are egyptian money called?",
    "ProcessedQuestion": "what are egyptian money called",
    "Parses": [
      {
        "ParseId": "WebQTest-654.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "egyptian",
        "TopicEntityName": "Egypt",
        "TopicEntityMid": "m.02k54",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04phzg",
            "EntityName": "Egyptian pound"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02k54": "Egypt"
    },
    "qid_topic_entity": {
      "Q79": "Egypt"
    },
    "NoisyQuestion": "what are egyptian moneu called?"
  },
  {
    "QuestionId": "WebQTest-1255",
    "RawQuestion": "what type of cancer did eva peron die from?",
    "ProcessedQuestion": "what type of cancer did eva peron die from",
    "Parses": [
      {
        "ParseId": "WebQTest-1255.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dltj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dltj ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "eva peron",
        "TopicEntityName": "Eva Perón",
        "TopicEntityMid": "m.0dltj",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d_bk",
            "EntityName": "Cervical cancer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0qcr0",
            "EntityName": "Cancer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0dltj": "Eva Perón"
    },
    "qid_topic_entity": {
      "Q40933": "Eva Perón"
    },
    "NoisyQuestion": "what type of cancer did eva peron die from?"
  },
  {
    "QuestionId": "WebQTest-1459",
    "RawQuestion": "what are some books that mark twain wrote?",
    "ProcessedQuestion": "what are some books that mark twain wrote",
    "Parses": [
      {
        "ParseId": "WebQTest-1459.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.014635)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.014635 ns:book.author.book_editions_published ?x .\n}\n",
        "PotentialTopicEntityMention": "mark twain",
        "TopicEntityName": "Mark Twain",
        "TopicEntityMid": "m.014635",
        "InferentialChain": [
          "book.author.book_editions_published"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__sd",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__sw",
            "EntityName": "The Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__t3",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__tc",
            "EntityName": "The Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__tm",
            "EntityName": "The Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__tw",
            "EntityName": "The Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__v3",
            "EntityName": "The Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__vc",
            "EntityName": "The Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__vm",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__w3",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__wm",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t__y0",
            "EntityName": "The Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_17f",
            "EntityName": "The Adventures of Tom Sawyer (Puffin Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_17p",
            "EntityName": "Adventures of Tom Sawyer (New Windmill)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_195",
            "EntityName": "Adventures of Tom Sawyer (Children's Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_19g",
            "EntityName": "Adventures of Tom Sawyer (Streamline Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1b5",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1bn",
            "EntityName": "Adventures of Tom Sawyer (Progress English)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1by",
            "EntityName": "Adventures of Tom Sawyer (Classic Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1c5",
            "EntityName": "Adventures of Tom Sawyer (Ec04)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1cf",
            "EntityName": "Adventures Of Tom Sawyer (Whole Story)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1cp",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1d4",
            "EntityName": "Adventures of Tom Sawyer, The (Classic Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1dd",
            "EntityName": "Adventures of Tom Sawyer (Dramascripts)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1dn",
            "EntityName": "Adventures of Tom Sawyer (Penguin Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1f4",
            "EntityName": "Adventures of Tom Sawyer and Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1fw",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1gb",
            "EntityName": "Adventures of Tom Sawyer (Saddleback Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1gm",
            "EntityName": "The adventures of Tom Sawyer ; Tom Sawyer abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_1hk",
            "EntityName": "Adventures of Tom Sawyer (Dramascripts)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_41v",
            "EntityName": "The Adventures of Tom Sawyer and The Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_43n",
            "EntityName": "Adventures of Tom Sawyer GB"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_5p_",
            "EntityName": "Adventures of Tom Sawyer (Oxford Progressive English Readers)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_5pr",
            "EntityName": "The Adventures of Tom Sawyer Adventure Classic (Adventure Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_5qj",
            "EntityName": "Adventures of Tom Sawyer Promo (Action Packs)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7jb",
            "EntityName": "The Adventures of Tom Sawyer (The Classic Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7jl",
            "EntityName": "Adventures of Tom Sawyer (Longman Simplified English Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7jw",
            "EntityName": "The Adventures of Tom Sawyer - Literary Touchstone Edition"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7k3",
            "EntityName": "Adventures of Tom Sawyer - Huckleberry Finn (Classic Compendium)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7kd",
            "EntityName": "Adventures of Tom Sawyer (Children's Illustrated Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7kp",
            "EntityName": "Adventures of Tom Sawyer (Webster's Korean Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7kz",
            "EntityName": "Adventures of Tom Sawyer (Everyman's Classics S.)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7l6",
            "EntityName": "Adventures of Tom Sawyer (Modern Library Classics (Sagebrush))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7lg",
            "EntityName": "Adventures of Tom Sawyer (Deluxe Watermill Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7lq",
            "EntityName": "Adventures of Tom Sawyer (Cassette Sac 967)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7lz",
            "EntityName": "Adventures of Tom Sawyer (Family Classics Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_7mq",
            "EntityName": "Adventures of Tom Sawyer (08454) (Deans Childrens Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9dn",
            "EntityName": "The Adventures of Tom Sawyer and The Adventures of Huckleberry Finn (Signet Classical Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9fz",
            "EntityName": "The Adventures of Tom Sawyer and The Adventures of Huckleberry Finn (Everyman's Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9g6",
            "EntityName": "The Adventures of Tom Sawyer and The Adventures of Huckleberry Finn (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9gg",
            "EntityName": "The adventures of Tom Sawyer ; The adventures of Huckleberry Finn ; The prince and the pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9gy",
            "EntityName": "The Adventures of Tom Sawyer and The Adventures of Huckleberry Finn (Everyman Paperbacks)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9h5",
            "EntityName": "The Adventures of Tom Sawyer and the Adventures of Huckleberry Finn (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9hf",
            "EntityName": "The Adventures of Tom Sawyer With Audio CD (Hear It Read It)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9hr",
            "EntityName": "The Adventures of Tom Sawyer, (Classic Books on CDs) [UNABRIDGED] (Classic Books on CD)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9r6",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9rg",
            "EntityName": "Tom Sawyer abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9ry",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9s6",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9sh",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9ss",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9t1",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9tb",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9tl",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9tv",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9vl",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9vw",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_9x1",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_b9v",
            "EntityName": "Adventures of Tom Sawyer. Adventure stories typically. Prince and pauper. Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_bb3",
            "EntityName": "Adventures of Tom Sawyer & Huck Finn Collector's Library Volume I (Collector's Library of Classics, Volume 1)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_bbm",
            "EntityName": "Adventures of Tom Sawyer (Episodes from/Cdl 51205)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_bc9",
            "EntityName": "The Adventures of Tom Sawyer, 1876 (IN RUSSIAN LANGUAGE) / (Las aventuras de Tom Sawyer / les Aventures de Tom Sawyer / Die Abenteuer des Tom Sawyer)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_bcl",
            "EntityName": "The adventures of Tom Sawyer ; The adventures of Huckleberry Finn ; The prince and the pauper ; Pudd'nhead Wilson ; Short stories ; A Connecticut Yankee at King Arthur's court"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cgb",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cgm",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cgx",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_ch4",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_chw",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cj_",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cj4",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cjf",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cjq",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_ck8",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_ckj",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_ckt",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cmr",
            "EntityName": "A Connecticut Yankee in King Arthur's Court Readalong"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cn0",
            "EntityName": "A Connecticut Yankee in King Arthur's Court (Classics Read By Celebrities Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cnp",
            "EntityName": "A Connecticut Yankee in King Arthur's Court"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cnz",
            "EntityName": "A Connecticut Yankee in King Arthur's Court (Penguin Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cp_",
            "EntityName": "A Connecticut Yankee in King Arthur's Court"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cp6",
            "EntityName": "A Connecticut Yankee in King Arthur's Court, Set"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cpr",
            "EntityName": "A Connecticut Yankee in King Arthur's Court (Tor Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cq7",
            "EntityName": "A Connecticut Yankee in King Arthur's Court"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cqh",
            "EntityName": "A Connecticut Yankee in King Arthur's Court (Enriched Classics Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_cqr",
            "EntityName": "A Connecticut Yankee in King Arthur's Court, 1889 (novel) (IN RUSSIAN LANGUAGE) / (Ein Yankee am Hofe des König Artus / Janki iz Konnektikuta pri dvore korolja Artura)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_f8k",
            "EntityName": "Tom Sawyer Abroad (Penguin Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_f9k",
            "EntityName": "Tom Sawyer abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_fbh",
            "EntityName": "Tom Sawyer Abroad (Watermill Classics Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_fbr",
            "EntityName": "Tom Sawyer Abroad (Tor Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_fc7",
            "EntityName": "Tom Sawyer Abroad (Watermill Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_ft_",
            "EntityName": "Tom Sawyer Abroad (1894) (The Oxford Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_fv7",
            "EntityName": "Tom Sawyer Abroad (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_fvj",
            "EntityName": "Tom Sawyer Abroad (The Works Of Mark Twain - 25 Volumes - Author's National Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gsc",
            "EntityName": "Tom Sawyer Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gsm",
            "EntityName": "Tom Sawyer, Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gsw",
            "EntityName": "Tom Sawyer Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gt_",
            "EntityName": "Tom Sawyer, Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gt4",
            "EntityName": "Tom Sawyer, Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gtf",
            "EntityName": "Tom Sawyer, Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gtq",
            "EntityName": "Tom Sawyer - Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gv8",
            "EntityName": "Tom Sawyer Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gvj",
            "EntityName": "Tom Sawyer Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gvs",
            "EntityName": "Tom Sawyer, Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gw1",
            "EntityName": "Tom Sawyer Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gwb",
            "EntityName": "Tom Sawyer, Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gwl",
            "EntityName": "Tom Sawyer, Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gwv",
            "EntityName": "Tom Sawyer Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gx3",
            "EntityName": "Tom Sawyer Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_gxd",
            "EntityName": "Tom Sawyer Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jsg",
            "EntityName": "Tom Sawyer, Detective (Hesperus Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jt_",
            "EntityName": "Tom Sawyer, detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jvg",
            "EntityName": "Tom Sawyer Detective (Watermill Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jwk",
            "EntityName": "Tom Sawyer, Detective (Tor Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_jwt",
            "EntityName": "Tom Sawyer Detective (Austral Juvenil)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_l8m",
            "EntityName": "Tom Sawyer, Detective (Dover Evergreen Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wlj",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wmk",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wn0",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wnh",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wnz",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wpf",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wpx",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wqc",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wqv",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wr9",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wrs",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_ws7",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wsq",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wt5",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wv3",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wvv",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_ww9",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_wwm",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z1s",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z27",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z2q",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z3n",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z3z",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z4f",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z4y",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z57",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z5q",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z65",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_z6n",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_1p",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_24",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_2m",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_40",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_4h",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tz_4z",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzt82",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzt8l",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzt9_",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzt91",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzt9j",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztbz",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztcf",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztcx",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztdc",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztdv",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztf9",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztfs",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztgh",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztgz",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzthf",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzvt_",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzvtj",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzvvx",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzvwc",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzvwv",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzvxs",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzvy2",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy65",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy6y",
            "EntityName": "The adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy76",
            "EntityName": "The Adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy7g",
            "EntityName": "Adventures of Tom Sawyer (Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy7q",
            "EntityName": "The Adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy87",
            "EntityName": "The Adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy8j",
            "EntityName": "The Adventures Of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy8t",
            "EntityName": "Adventures of Tom Sawyer (Fiction)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy92",
            "EntityName": "The Adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy9b",
            "EntityName": "Adventures of Tom Sawyer, The"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzy9l",
            "EntityName": "Adventures of Tom Sawyer, The"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzyb2",
            "EntityName": "The Adventures of Tom Sawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01_d",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01_w",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01xb",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01xt",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01y8",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01yr",
            "EntityName": "Adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01z6",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01zy",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03w9",
            "EntityName": "The Adventures of Huckleberry Finn (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03x2",
            "EntityName": "The Adventures of Huckleberry Finn (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03xb",
            "EntityName": "The adventures of Huckleberry Finn (Tom Sawyer's comrade)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03xt",
            "EntityName": "The adventures of Huckleberry Finn (Tom Sawyer's comrade)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03zz",
            "EntityName": "The adventures of Huckleberry Finn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v05m2",
            "EntityName": "Adventures of Huckleberry Finn (Tom Sawyer's comrade)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v05mk",
            "EntityName": "Adventures of Huckleberry Finn (Tom Sawyer's comrade)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v05mw",
            "EntityName": "The Adventures of Huckleberry Finn, Complete (Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v05n4",
            "EntityName": "Adventures of Huckleberry Finn (Illustrated Edition) (Dodo Press)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v05nf",
            "EntityName": "The Adventures of Huckleberry Finn CD set (Cambridge Literature)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07_0",
            "EntityName": "Adventures of Huckleberry Finn With Reader's Guide (Amsco Literature Program Series Grade 7 12, R 120 ALP)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07_k",
            "EntityName": "Adventures of Huckleberry Finn (Tom Sawyer's comrade)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07zj",
            "EntityName": "Adventures of Huckleberry Finn/Tom Sawyer (Junior Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07zs",
            "EntityName": "Adventures of Huckleberry Finn (1885) (The Oxford Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v080s",
            "EntityName": "Adventures of Huckleberry Finn With Reader's Guide (Amsco Literature Program Series Grade 7-12)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0gdl",
            "EntityName": "Life on the Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0gfl",
            "EntityName": "Life on the Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0gg9",
            "EntityName": "Life on the Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0ggs",
            "EntityName": "Life on the Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0ghh",
            "EntityName": "Life on the Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0gj1",
            "EntityName": "Life on the Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12kg",
            "EntityName": "Sketches New and Old"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12l8",
            "EntityName": "Sketches New and Old (Complete)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12lk",
            "EntityName": "Sketches New And Old"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12lv",
            "EntityName": "Sketches, new and old"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12m9",
            "EntityName": "Sketches New and Old"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12ml",
            "EntityName": "Sketches New And Old"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12mv",
            "EntityName": "Sketches New and Old"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12n3",
            "EntityName": "Sketches New And Old"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12nd",
            "EntityName": "Sketches New and Old"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v12np",
            "EntityName": "Sketches New And Old"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v138g",
            "EntityName": "Sketches, New and Old (1875) (The Oxford Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v139n",
            "EntityName": "Sketches New And Old (The Works Of Mark Twain - 25 Volumes - Author's National Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v156y",
            "EntityName": "How to tell a story, and other essays"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v159t",
            "EntityName": "How to Tell a Story and Other Essays (1897) (The Oxford Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2mpk",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2mq8",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2mqr",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2ms0",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2ms9",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2msl",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2msw",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2mt4",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2mtd",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2mtp",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2mtz",
            "EntityName": "Christian Science"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2mwn",
            "EntityName": "Christian Science (Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2nwy",
            "EntityName": "Christian Science (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2nxg",
            "EntityName": "Christian Science (1907) (The Oxford Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t_6",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2t_p",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2txw",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tyb",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tyt",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tz8",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2tzr",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v04",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v0m",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v12",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v1k",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v20",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2v2h",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vm2",
            "EntityName": "Personal recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vmp",
            "EntityName": "Personal recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vn4",
            "EntityName": "Personal recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vnm",
            "EntityName": "Personal Recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vnx",
            "EntityName": "Personal Recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vp5",
            "EntityName": "Personal recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vpn",
            "EntityName": "Personal recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vq3",
            "EntityName": "Personal Recollections Of Joan Of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vqd",
            "EntityName": "Personal Recollections Of Joan Of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vqp",
            "EntityName": "Personal Recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vsc",
            "EntityName": "Personal Recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2vtl",
            "EntityName": "Personal Recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xbt",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xc8",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xcj",
            "EntityName": "The prince and the pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xdf",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xdp",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xml",
            "EntityName": "Personal recollections of Joan of Arc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xn1",
            "EntityName": "Personal Recollections of Joan of Arc (Complete)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xnm",
            "EntityName": "Personal Recollections of Joan of Arc Volume 1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xnx",
            "EntityName": "Personal Recollections of Joan of Arc Volume 2 (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xq9",
            "EntityName": "Personal Recollections of Joan of Arc, V2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xql",
            "EntityName": "Personal Recollections of Joan of Arc Volume 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xr8",
            "EntityName": "Personal Recollections of Joan of Arc Volume 1 (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xrz",
            "EntityName": "Personal Recollections of Joan of Arc (1896) (The Oxford Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2zrc",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2zrm",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2zs4",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2zsd",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2zsp",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2zsz",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2zt7",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2ztj",
            "EntityName": "The Prince And the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2ztt",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2zv1",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2zxw",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3093",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v309v",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30b3",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30bl",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30bv",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30c8",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30cj",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30cs",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30d1",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30db",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30dl",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30f2",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30fv",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v30g2",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v31_4",
            "EntityName": "The Prince and the Pauper (Webster's Italian Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v31_p",
            "EntityName": "The Prince and the Pauper (Dover Children's Thrift Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v31z3",
            "EntityName": "The Prince and the Pauper (New Method Supplementary Readers)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3207",
            "EntityName": "The Prince and the Pauper (Webster's Chinese-Traditional Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v320j",
            "EntityName": "The Prince and the Pauper (Webster's Korean Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v321k",
            "EntityName": "The Prince and the Pauper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v321t",
            "EntityName": "The Prince and the Pauper (Webster's Chinese-Simplified Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3fx9",
            "EntityName": "Letters from the Earth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3fxk",
            "EntityName": "Letters from the Earth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3fxt",
            "EntityName": "Letters from the earth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3fy3",
            "EntityName": "Letters from the Earth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3fyc",
            "EntityName": "Letters from the Earth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3fyx",
            "EntityName": "Letters from the Earth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3fz4",
            "EntityName": "Letters from the Earth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3vt9",
            "EntityName": "Old Times on the Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3vtv",
            "EntityName": "Old Times On The Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3vvc",
            "EntityName": "Old Times on the Mississippi."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3vw5",
            "EntityName": "Old times on the Mississippi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v40f9",
            "EntityName": "1601"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v40fk",
            "EntityName": "1601"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v40fv",
            "EntityName": "1601"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v44qq",
            "EntityName": "Following the equator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v44r9",
            "EntityName": "Following the Equator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v44rl",
            "EntityName": "Following the Equator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v44rw",
            "EntityName": "Following the Equator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v44sb",
            "EntityName": "Following the Equator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v44sn",
            "EntityName": "Following the Equator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v44sx",
            "EntityName": "Following the Equator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45_2",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45_b",
            "EntityName": "Roughing it"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45_t",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v459h",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v459r",
            "EntityName": "The mysterious stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45b_",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45b6",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45br",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45c_",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45c7",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45ch",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45cr",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45d8",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45dj",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45ds",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45f1",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45f9",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45fl",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45fv",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45hm",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45xx",
            "EntityName": "Roughing it"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45yc",
            "EntityName": "Roughing it"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45yv",
            "EntityName": "Roughing it"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45zl",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v45zv",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v460j",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v460t",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v461m",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47_2",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47_b",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47_l",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v477_",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v477q",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v478j",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v479b",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v479l",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v479w",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47b4",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47bd",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47bz",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47ch",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47cs",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47db",
            "EntityName": "The Mysterious Stranger (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47dl",
            "EntityName": "The Mysterious Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47xl",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47y4",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47yf",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47yp",
            "EntityName": "Roughing it"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47z1",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47z9",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47zl",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v47zv",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v48_p",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4802",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v48yk",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v48yv",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v48zn",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v48zy",
            "EntityName": "A Tramp Abroad (Konemann Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49_4",
            "EntityName": "Roughing it."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49_d",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49_n",
            "EntityName": "Roughing it."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v490d",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v490z",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4917",
            "EntityName": "A Tramp Abroad (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v491j",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v491s",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4921",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v492b",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v493_",
            "EntityName": "A Tramp Abroad (1880) (The Oxford Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4930",
            "EntityName": "A Tramp Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49hm",
            "EntityName": "The Mysterious Stranger (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49wm",
            "EntityName": "Roughing it"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49x2",
            "EntityName": "Roughing it"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49y2",
            "EntityName": "Roughing it"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49yv",
            "EntityName": "Roughing it"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49zl",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v49zw",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4b03",
            "EntityName": "Roughing It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4b21",
            "EntityName": "Roughing It (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4c8p",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4c94",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4c9d",
            "EntityName": "The innocents abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4c9w",
            "EntityName": "The innocents abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cbb",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cbm",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cc3",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4ccc",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4ccm",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4ccx",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cd5",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cdf",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cnv",
            "EntityName": "Roughing It (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cpb",
            "EntityName": "Roughing It (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cpl",
            "EntityName": "Roughing It (Centre for Editions of American Authors)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cpw",
            "EntityName": "Roughing It (Classics of the Old West)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cqd",
            "EntityName": "Roughing It (Konemann Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cqp",
            "EntityName": "Roughing It (1872) (The Oxford Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cqy",
            "EntityName": "Roughing It (Works of Mark Twain, Volume One)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4cr6",
            "EntityName": "Roughing It (Mark Twain Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4crs",
            "EntityName": "Roughing It (Classics of the Old West)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4d_0",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4d_9",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4d_l",
            "EntityName": "The innocents abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4dxb",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4dxw",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4dy3",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4dz2",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4dzb",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4f_v",
            "EntityName": "The innocents abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4g0d",
            "EntityName": "The Innocents Abroad (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4g0n",
            "EntityName": "The innocents abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4g0x",
            "EntityName": "The Innocents Abroad (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4g1q",
            "EntityName": "The Innocents Abroad (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4g1z",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4g35",
            "EntityName": "The Innocents Abroad, vol. 1: The Authorized Uniform Edition"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4g3g",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4g3r",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4gvg",
            "EntityName": "The Innocents Abroad (Classic Books on Cassettes Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62_6",
            "EntityName": "The American claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62_p",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62_z",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v6307",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v630j",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v630s",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v6311",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v631b",
            "EntityName": "American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v631m",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v631x",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v6325",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v632y",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v633n",
            "EntityName": "The American Claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v64cm",
            "EntityName": "The American claimant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v64cx",
            "EntityName": "The American Claimant (1896)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v64d5",
            "EntityName": "The American Claimant (Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v64dg",
            "EntityName": "The American Claimant (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v64dr",
            "EntityName": "The American Claimant (1896)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v64g9",
            "EntityName": "American Claimant (Writings of Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v64rn",
            "EntityName": "The American Claimant (1892) (The Oxford Mark Twain)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqgs_",
            "EntityName": "The wit and wisdom of Mark Twain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqgth",
            "EntityName": "The wit and wisdom of Mark Twain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqgv4",
            "EntityName": "The wit and wisdom of Mark Twain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05bqkhl",
            "EntityName": "The Innocents Abroad (1869) (The Oxford Mark Twain)"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1459.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.014635)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.014635 ns:book.book_subject.works ?x .\n}\n",
        "PotentialTopicEntityMention": "mark twain",
        "TopicEntityName": "Mark Twain",
        "TopicEntityMid": "m.014635",
        "InferentialChain": [
          "book.book_subject.works"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04042z9",
            "EntityName": "Wild Nights!"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04pqwr",
            "EntityName": "The Innocents Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wx00",
            "EntityName": "Tom Sawyer, Detective"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0507mq",
            "EntityName": "Tom Sawyer Abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05bzb6",
            "EntityName": "Autobiography of Mark Twain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05v7wt9",
            "EntityName": "Who Is Mark Twain?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05yxls7",
            "EntityName": "The Trouble Begins at 8: A Life of Mark Twain in the Wild, Wild West"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05z39sg",
            "EntityName": "Ignorance, Confidence, and Filthy Rich Friends: The Business Adventures of Mark Twain, Chronic Speculator and Entrepreneur"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.062pbx6",
            "EntityName": "Grant and Twain: The Story of a Friendship That Changed America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06pftnw",
            "EntityName": "Life on the Mississippi"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.014635": "Mark Twain"
    },
    "qid_topic_entity": {
      "Q7245": "Mark Twain"
    },
    "NoisyQuestion": "what are some books that mark twain wrot?"
  },
  {
    "QuestionId": "WebQTest-1454",
    "RawQuestion": "where did madonna grew up?",
    "ProcessedQuestion": "where did madonna grew up",
    "Parses": [
      {
        "ParseId": "WebQTest-1454.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? grew up"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vs_v8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vs_v8 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "madonna",
        "TopicEntityName": "Madonna",
        "TopicEntityMid": "m.01vs_v8",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0v1xg",
            "EntityName": "Bay City"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01vs_v8": "Madonna"
    },
    "qid_topic_entity": {
      "Q1744": "Madonna"
    },
    "NoisyQuestion": "where did madonna grouw up?"
  },
  {
    "QuestionId": "WebQTest-729",
    "RawQuestion": "who plays stanley hudson?",
    "ProcessedQuestion": "who plays stanley hudson",
    "Parses": [
      {
        "ParseId": "WebQTest-729.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026nx7k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026nx7k ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "stanley hudson",
        "TopicEntityName": "Stanley Hudson",
        "TopicEntityMid": "m.026nx7k",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cnl09",
            "EntityName": "Leslie David Baker"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.026nx7k": "Stanley Hudson"
    },
    "qid_topic_entity": {
      "Q7599690": "Stanley Hudson"
    },
    "NoisyQuestion": "who plays stonley hudson?"
  },
  {
    "QuestionId": "WebQTest-68",
    "RawQuestion": "who plays the voice of kitt in knight rider?",
    "ProcessedQuestion": "who plays the voice of kitt in knight rider",
    "Parses": [
      {
        "ParseId": "WebQTest-68.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bvxv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bvxv ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:m.02nsjvf .\n?y ns:tv.regular_tv_appearance.character ns:m.05_bhx .\n}\n",
        "PotentialTopicEntityMention": "knight rider",
        "TopicEntityName": "Knight Rider",
        "TopicEntityMid": "m.0bvxv",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02nsjvf",
            "EntityName": "Voice",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.special_performance_type",
            "ValueType": "String"
          },
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05_bhx",
            "EntityName": "KITT",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0309r1",
            "EntityName": "William Daniels"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0bvxv": "Knight Rider"
    },
    "qid_topic_entity": {
      "Q464009": "Knight Rider"
    },
    "NoisyQuestion": "who plays the voice of kitt in knight rider?"
  },
  {
    "QuestionId": "WebQTest-1925",
    "RawQuestion": "who did james franco play in milk?",
    "ProcessedQuestion": "who did james franco play in milk",
    "Parses": [
      {
        "ParseId": "WebQTest-1925.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03hkch7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03hkch7 ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:m.05bnp0 .\n}\n",
        "PotentialTopicEntityMention": "milk",
        "TopicEntityName": "Milk",
        "TopicEntityMid": "m.03hkch7",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05bnp0",
            "EntityName": "James Franco",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.actor",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04zgntd",
            "EntityName": "Scott Smith"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03hkch7": "Milk"
    },
    "qid_topic_entity": {
      "Q201687": "Milk"
    },
    "NoisyQuestion": "who did james franco play in milky?"
  },
  {
    "QuestionId": "WebQTest-1644",
    "RawQuestion": "what did mary wollstonecraft fight for?",
    "ProcessedQuestion": "what did mary wollstonecraft fight for",
    "Parses": [
      {
        "ParseId": "WebQTest-1644.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04_cw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04_cw ns:base.activism.activist.area_of_activism ?x .\n}\n",
        "PotentialTopicEntityMention": "mary wollstonecraft",
        "TopicEntityName": "Mary Wollstonecraft",
        "TopicEntityMid": "m.04_cw",
        "InferentialChain": [
          "base.activism.activist.area_of_activism"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012h0y",
            "EntityName": "Women's rights"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04_cw": "Mary Wollstonecraft"
    },
    "qid_topic_entity": {
      "Q101638": "Mary Wollstonecraft"
    },
    "NoisyQuestion": "what did mary wollstonecraft fight for?"
  },
  {
    "QuestionId": "WebQTest-170",
    "RawQuestion": "who played bilbo in lord of the rings?",
    "ProcessedQuestion": "who played bilbo in lord of the rings",
    "Parses": [
      {
        "ParseId": "WebQTest-170.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g6z1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g6z1 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.023cjg .\n}\n",
        "PotentialTopicEntityMention": "bilbo",
        "TopicEntityName": "Old Bilbo",
        "TopicEntityMid": "m.0g6z1",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.023cjg",
            "EntityName": "The Lord of the Rings",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f_wwf",
            "EntityName": "Norman Bird"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0g6z1": "Old Bilbo"
    },
    "qid_topic_entity": {
      "Q185737": "Old Bilbo"
    },
    "NoisyQuestion": "who played bilbo in lord of the rings?"
  },
  {
    "QuestionId": "WebQTest-190",
    "RawQuestion": "what did dr. seuss do?",
    "ProcessedQuestion": "what did dr. seuss do",
    "Parses": [
      {
        "ParseId": "WebQTest-190.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02g3w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02g3w ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "dr . seuss",
        "TopicEntityName": "Theodore Lesieg",
        "TopicEntityMid": "m.02g3w",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015h31",
            "EntityName": "Animator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0196pc",
            "EntityName": "Cartoonist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d_h8",
            "EntityName": "Film Producer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020xn5",
            "EntityName": "Illustrator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gjzk",
            "EntityName": "Television producer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03hz6vv",
            "EntityName": "Visual Artist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05z96",
            "EntityName": "Poet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dxtg",
            "EntityName": "Screenwriter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n1h",
            "EntityName": "Artist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0nbcg",
            "EntityName": "Songwriter"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02g3w": "Theodore Lesieg"
    },
    "qid_topic_entity": {
      "Q298685": "Theodore Lesieg"
    },
    "NoisyQuestion": "what did dr. seuss do?"
  },
  {
    "QuestionId": "WebQTest-207",
    "RawQuestion": "where is harvard university?",
    "ProcessedQuestion": "where is harvard university",
    "Parses": [
      {
        "ParseId": "WebQTest-207.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ksy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ksy ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "harvard university",
        "TopicEntityName": "Harvard University",
        "TopicEntityMid": "m.03ksy",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01qh7",
            "EntityName": "Cambridge"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05k7sb",
            "EntityName": "Massachusetts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          }
        ]
      },
      {
        "ParseId": "WebQTest-207.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ksy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ksy ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.state_province_region ?x .\n}\n",
        "PotentialTopicEntityMention": "harvard university",
        "TopicEntityName": "Harvard University",
        "TopicEntityMid": "m.03ksy",
        "InferentialChain": [
          "organization.organization.headquarters",
          "location.mailing_address.state_province_region"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05k7sb",
            "EntityName": "Massachusetts"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03ksy": "Harvard University"
    },
    "qid_topic_entity": {
      "Q13371": "Harvard University"
    },
    "NoisyQuestion": "where is harvar university?"
  },
  {
    "QuestionId": "WebQTest-787",
    "RawQuestion": "where is the riviera casino?",
    "ProcessedQuestion": "where is the riviera casino",
    "Parses": [
      {
        "ParseId": "WebQTest-787.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05vv6l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05vv6l ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "riviera casino",
        "TopicEntityName": "Riviera",
        "TopicEntityMid": "m.05vv6l",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cv3w",
            "EntityName": "Las Vegas"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05vv6l": "Riviera"
    },
    "qid_topic_entity": {
      "Q1535845": "Riviera"
    },
    "NoisyQuestion": "where is the riviera casino?"
  },
  {
    "QuestionId": "WebQTest-231",
    "RawQuestion": "when did florida marlins join mlb?",
    "ProcessedQuestion": "when did florida marlins join mlb",
    "Parses": [
      {
        "ParseId": "WebQTest-231.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02__x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02__x ns:baseball.baseball_team.team_stats ?y .\n?y ns:baseball.baseball_team_stats.season ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PotentialTopicEntityMention": "florida marlins",
        "TopicEntityName": "Miami Marlins",
        "TopicEntityMid": "m.02__x",
        "InferentialChain": [
          "baseball.baseball_team.team_stats",
          "baseball.baseball_team_stats.season"
        ],
        "Constraints": [],
        "Time": null,
        "Order": {
          "SortOrder": "Ascending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 1,
          "NodePredicate": "time.event.end_date",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h7s8p",
            "EntityName": "1994 Major League Baseball Season"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02__x": "Miami Marlins"
    },
    "qid_topic_entity": {
      "Q652879": "Miami Marlins"
    },
    "NoisyQuestion": "when did florida marlins join mlb?"
  },
  {
    "QuestionId": "WebQTest-575",
    "RawQuestion": "who is louisiana state senator?",
    "ProcessedQuestion": "who is louisiana state senator",
    "Parses": [
      {
        "ParseId": "WebQTest-575.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ly1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ly1 ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.02_7l8y .\n}\n",
        "PotentialTopicEntityMention": "louisiana",
        "TopicEntityName": "Louisiana",
        "TopicEntityMid": "m.04ly1",
        "InferentialChain": [
          "government.political_district.representatives",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02_7l8y",
            "EntityName": "United States Senator",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.office_position_or_title",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_nrx",
            "EntityName": "John Slidell"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019tyn",
            "EntityName": "Mary Landrieu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01bxb3",
            "EntityName": "Edward Livingston"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fptq",
            "EntityName": "Judah P. Benjamin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01gqtx",
            "EntityName": "Russell B. Long"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01xctw",
            "EntityName": "John Breaux"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025jr2",
            "EntityName": "David Vitter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02s1w9",
            "EntityName": "William C. C. Claiborne"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0337h3",
            "EntityName": "Edward Douglass White"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jm72",
            "EntityName": "Pierre Soulé"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04r1w2",
            "EntityName": "James Brown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05mmtq",
            "EntityName": "Thomas Posey"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05tvn8",
            "EntityName": "Charles Magill Conrad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.095vrl",
            "EntityName": "Eligius Fromentin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b079s",
            "EntityName": "Jean Noel Destréhan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cvwfs",
            "EntityName": "Henry Johnson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d04_1",
            "EntityName": "Alexander Barrow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d21y8",
            "EntityName": "Charles Dominique Joseph Bouligny"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d2rbw",
            "EntityName": "Jeremiah B. Howell"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d2s6n",
            "EntityName": "George A. Waggaman"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d3287",
            "EntityName": "Robert C. Nicholas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d32rg",
            "EntityName": "Allan B. Magruder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d32vk",
            "EntityName": "Josiah S. Johnston"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d3g7j",
            "EntityName": "Alexander Porter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d3g9m",
            "EntityName": "Alexandre Mouton"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0py1g",
            "EntityName": "Huey Long"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04ly1": "Louisiana"
    },
    "qid_topic_entity": {
      "Q1588": "Louisiana"
    },
    "NoisyQuestion": "who is louisiana state senatour?"
  },
  {
    "QuestionId": "WebQTest-1100",
    "RawQuestion": "what document did thomas jefferson wrote?",
    "ProcessedQuestion": "what document did thomas jefferson wrote",
    "Parses": [
      {
        "ParseId": "WebQTest-1100.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07cbs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07cbs ns:book.author.works_written ?x .\n}\n",
        "PotentialTopicEntityMention": "thomas jefferson",
        "TopicEntityName": "Thomas Jefferson",
        "TopicEntityMid": "m.07cbs",
        "InferentialChain": [
          "book.author.works_written"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_l_szn",
            "EntityName": "Foundations of Freedom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r2w1j",
            "EntityName": "The essential Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010rn1pv",
            "EntityName": "Jefferson the man"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010rzrdd",
            "EntityName": "Jefferson abroad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010ss8d1",
            "EntityName": "Jefferson in love"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fr4l",
            "EntityName": "Jefferson Bible"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gmpp9",
            "EntityName": "A Summary View of the Rights of British America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1m8w",
            "EntityName": "Jefferson on Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1m9c",
            "EntityName": "Citizen Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1mb3",
            "EntityName": "Light and liberty"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1mbc",
            "EntityName": "\\\"Ye will say I am no Christian\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1mbm",
            "EntityName": "A Manual of Parliamentary Practice for the Use of the Senate of the United States"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1mbw",
            "EntityName": "The political writings of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1mcc",
            "EntityName": "The quotable Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1mcm",
            "EntityName": "The republic of letters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1mcw",
            "EntityName": "Autobiography of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1md3",
            "EntityName": "The wisdom of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t1mdc",
            "EntityName": "Thomas Jefferson, his words and vision"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wgv0d",
            "EntityName": "Jefferson and Madison on the Separation of Church and State"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.055wjd3",
            "EntityName": "Memorandums taken on a journey from Paris into the southern parts of France and Northern Italy, in the year 1787"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0676qtd",
            "EntityName": "The Commonplace book of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.067c9t_",
            "EntityName": "To the girls and boys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.067w8c2",
            "EntityName": "Junior Fact Summer 2007 Bundle"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.068lc9q",
            "EntityName": "Catalogue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0692hsh",
            "EntityName": "Responsibility Skills"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.069qggp",
            "EntityName": "The Works of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bk56g",
            "EntityName": "An essay towards facilitating instruction in the Anglo-Saxon and modern dialects of the English language. For the use of the University of Virginia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bnn32",
            "EntityName": "The Statute of Virginia for Religious Freedom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06c3483",
            "EntityName": "The complete Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06c59dv",
            "EntityName": "Letters and addresses of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06c59fv",
            "EntityName": "Letters of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06cmgnx",
            "EntityName": "Revolutionary Philosopher"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06cn8cl",
            "EntityName": "Thomas Jefferson Travels"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06dqc9v",
            "EntityName": "The four versions of Jefferson's letter to Mazzei"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06drjxx",
            "EntityName": "The life & morals of Jesus Christ of Nazareth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06f211z",
            "EntityName": "The correspondence of Jefferson and Du Pont de Nemours"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06fn7pj",
            "EntityName": "An appendix to the Notes on Virginia relative to the murder of Logan's family"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06fych1",
            "EntityName": "The Literary Bible of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06gkkmm",
            "EntityName": "The portable Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06hjlhq",
            "EntityName": "Master thoughts of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06jwkq_",
            "EntityName": "The family letters of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06jxy__",
            "EntityName": "The life and letters of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06kj19r",
            "EntityName": "Minor Vocabularies of Nanticoke-Conoy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06kq3qc",
            "EntityName": "Manual de práctica parlamentaria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06lq9c0",
            "EntityName": "Public and private papers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06ltbsx",
            "EntityName": "Crusade against ignorance"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06m_41v",
            "EntityName": "The best letters of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06m36qp",
            "EntityName": "The proceedings of the government of the United States, in maintaining the public right to the beach of the Missisipi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06mf9v0",
            "EntityName": "Elementary School Support Kit/Bulletin Boards"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06msb9t",
            "EntityName": "An American Christian Bible"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06n7twm",
            "EntityName": "John Dewey presents the living thoughts of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06ng0dy",
            "EntityName": "The inaugural addresses of President Thomas Jefferson, 1801 and 1805"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06p5bnb",
            "EntityName": "State of the Union Addresses of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06pqntr",
            "EntityName": "Documents Relating To The Purchase And Exploration Of Louisiana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06pr64t",
            "EntityName": "The essence of Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06rmrff",
            "EntityName": "The anas of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s38_y",
            "EntityName": "Calendar of the correspondence of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06sw8b5",
            "EntityName": "Account of Louisiana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tvl87",
            "EntityName": "The religious and moral wisdom of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06vtcxw",
            "EntityName": "Il pensiero politico e sociale di Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07v5q",
            "EntityName": "United States Declaration of Independence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg0_",
            "EntityName": "The address of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg15",
            "EntityName": "The inaugural speeches and messages of Thomas Jefferson, Esq"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg18",
            "EntityName": "Letters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg1c",
            "EntityName": "Memoir, correspondence, and miscellanies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg1g",
            "EntityName": "The President's speech"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg1k",
            "EntityName": "The speech of Logan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg1n",
            "EntityName": "Speech of Thomas Jefferson, president of the United States, delivered at his inauguration, March 4, 1801"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg1r",
            "EntityName": "Speech of Thomas Jefferson, president of the United States, delivered at his instalment, March 4, 1801, at the city of Washington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg1v",
            "EntityName": "Speech of Thomas Jefferson, president of the United States, delivered in the Senate chamber, March 4th, 1801"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg1y",
            "EntityName": "Speech of Thomas Jefferson, president of the United States"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg20",
            "EntityName": "A supplementary note on the mould board described in a letter to Sir John Sinclair, of March 23, 1798"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhjg23",
            "EntityName": "Unpublished correspondence between Thomas Jefferson and some American Jews"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bqq_tq",
            "EntityName": "Correspondence between His Excellency Thomas Jefferson, President of the United States and James Monroe, Esq., late American ambassador to the Court of St. James"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bqq_ty",
            "EntityName": "Jeffersonian principles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bqq_v2",
            "EntityName": "Republican notes on religion ; and, An act establishing religious freedom, passed in the assembly of Virginia, in the year 1786"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t849",
            "EntityName": "Basic writings of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t84l",
            "EntityName": "The Jefferson-Dunglison letters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t84p",
            "EntityName": "Jefferson himself"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t84s",
            "EntityName": "A Jefferson profile as revealed in his letters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t84w",
            "EntityName": "Jefferson's extracts from the Gospels"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t84z",
            "EntityName": "Jefferson's Germantown letters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t85_",
            "EntityName": "Thomas Jefferson correspondence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t851",
            "EntityName": "Jefferson's ideas on a university library"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t854",
            "EntityName": "Jefferson's literary commonplace book"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t857",
            "EntityName": "Jefferson's parliamentary writings"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t85b",
            "EntityName": "Jefferson's proposed instructions to the Virginia delegates, 1744"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t85f",
            "EntityName": "The life and selected writings of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t85j",
            "EntityName": "The living thoughts of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t85m",
            "EntityName": "Papers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t85q",
            "EntityName": "The papers of Thomas Jefferson. Index"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t85x",
            "EntityName": "Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t862",
            "EntityName": "Thomas Jefferson, political writings"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t865",
            "EntityName": "Thomas Jefferson's architectural drawings"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t868",
            "EntityName": "Thomas Jefferson's Farm book"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1t86c",
            "EntityName": "The writings of Thomas Jefferson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crw0k",
            "EntityName": "Notes on the State of Virginia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dq_53k",
            "EntityName": "The Papers of Thomas Jefferson, Volume 9: November 1785 to June 1786"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dq_gp3",
            "EntityName": "The Papers of Thomas Jefferson, Volume 11: January 1787 to August 1787"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dq_qp6",
            "EntityName": "The Papers of Thomas Jefferson, Volume 12: August 1787 to March 1788"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dq_zgd",
            "EntityName": "The Papers of Thomas Jefferson, Volume 15: March 1789 to November 1789"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqp34k",
            "EntityName": "The Papers of Thomas Jefferson, Volume 1: 14 January 1760 to 6 December 1776"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqsxfc",
            "EntityName": "The Papers of Thomas Jefferson, Volume 13: March 1788 to October 1788"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqt433",
            "EntityName": "The Papers of Thomas Jefferson, Retirement Series: Volume 1: 4 March 1809 to 15 November 1809"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqt4s1",
            "EntityName": "The Papers of Thomas Jefferson, Retirement Series: Volume 2: 16 November 1809 to 11 August 1810"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqt99b",
            "EntityName": "The Papers of Thomas Jefferson, Retirement Series: Volume 3: 12 August 1810 to 17 June 1811"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqtgf6",
            "EntityName": "The Papers of Thomas Jefferson, Retirement Series: Volume 4: 18 June 1811 to 30 April 1812"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqvywd",
            "EntityName": "The Papers of Thomas Jefferson, Retirement Series: Volume 5: 1 May 1812 to 10 March 1813"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqx7xz",
            "EntityName": "The Papers of Thomas Jefferson, Volume 6: May 1781 to March 1784"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqyfz8",
            "EntityName": "The Papers of Thomas Jefferson, Volume 2: January 1777 to 18 June 1779"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqz3y6",
            "EntityName": "The Papers of Thomas Jefferson, Volume 4: October 1780 to February 1781"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqzhwf",
            "EntityName": "The Papers of Thomas Jefferson, Volume 5: February 1781 to May 1781"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqzq_0",
            "EntityName": "The Papers of Thomas Jefferson, Volume 7: March 1784 to February 1785"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqzzvp",
            "EntityName": "The Papers of Thomas Jefferson, Volume 8: February 1785 to October 1785"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dr0cgb",
            "EntityName": "The Papers of Thomas Jefferson, Volume 14: October 1788 to March 1789"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dr0kqv",
            "EntityName": "The Papers of Thomas Jefferson, Volume 16: November 1789 to July 1790"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dr0pfw",
            "EntityName": "The Papers of Thomas Jefferson, Volume 17: July 1790 to November 1790"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dr0sf8",
            "EntityName": "The Papers of Thomas Jefferson, Volume 18: 4 November 1790 to 24 January 1791"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dr0vl9",
            "EntityName": "The Papers of Thomas Jefferson, Volume 19: January 1791 to March 1791"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dr13bb",
            "EntityName": "The Papers of Thomas Jefferson, Volume 20: April 1791 to August 1791"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dr19fq",
            "EntityName": "The Papers of Thomas Jefferson, Volume 21: Index, Vols. 1-20"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dr1cyf",
            "EntityName": "The Papers of Thomas Jefferson, Volume 22: 6 August to 31 December 1791"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv5_62",
            "EntityName": "The Papers of Thomas Jefferson, Volume 24: 1 June to 31 December 1792"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv5xvy",
            "EntityName": "The Papers of Thomas Jefferson, Volume 23: 1 January to 31 May 1792"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv645v",
            "EntityName": "The Papers of Thomas Jefferson, Volume 25: 1 January to 10 May 1793"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv65fd",
            "EntityName": "The Papers of Thomas Jefferson, Volume 26: 11 May to 31 August 1793"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv67qs",
            "EntityName": "The Papers of Thomas Jefferson, Volume 27: 1 September to 31 December 1793"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv69pn",
            "EntityName": "The Papers of Thomas Jefferson, Volume 28: 1 January 1794 to 29 February 1796"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv6ght",
            "EntityName": "The Papers of Thomas Jefferson, Volume 29: 1 March 1796 to 31 December 1797"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv6lrt",
            "EntityName": "The Papers of Thomas Jefferson, Volume 30: 1 January 1798 to 31 January 1799"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv6qxd",
            "EntityName": "The Papers of Thomas Jefferson, Volume 32: 1 June 1800 to 16 February 1801"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv6rp_",
            "EntityName": "The Papers of Thomas Jefferson, Volume 33: 17 February to 30 April 1801"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv6xp5",
            "EntityName": "The Papers of Thomas Jefferson, Volume 34: 1 May to 31 July 1801"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv8d4y",
            "EntityName": "The Papers of Thomas Jefferson, Retirement Series: Volume 6: 11 March to 27 November 1813"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dv9vp3",
            "EntityName": "The Papers of Thomas Jefferson, Volume 3: June 1779 to September 1780"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dvbxfp",
            "EntityName": "The Papers of Thomas Jefferson, Volume 10: June 1786 to December 1786"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dvf493",
            "EntityName": "The Papers of Thomas Jefferson, Volume 31: 1 February 1799 to 31 May 1800"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dvfqr9",
            "EntityName": "The Papers of Thomas Jefferson, Volume 36: 1 December 1801 to 3 March 1802"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dvfqrl",
            "EntityName": "The Papers of Thomas Jefferson, Volume 35: 1 August to 30 November 1801"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07cbs": "Thomas Jefferson"
    },
    "qid_topic_entity": {
      "Q11812": "Thomas Jefferson"
    },
    "NoisyQuestion": "what document did thomas jefferson wrotte?"
  },
  {
    "QuestionId": "WebQTest-385",
    "RawQuestion": "when did william mckinley died?",
    "ProcessedQuestion": "when did william mckinley died",
    "Parses": [
      {
        "ParseId": "WebQTest-385.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083p7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083p7 ns:people.deceased_person.date_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "william mckinley",
        "TopicEntityName": "William McKinley",
        "TopicEntityMid": "m.083p7",
        "InferentialChain": [
          "people.deceased_person.date_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "1901-09-14",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.083p7": "William McKinley"
    },
    "qid_topic_entity": {
      "Q35041": "William McKinley"
    },
    "NoisyQuestion": "when did william mckinley dide?"
  },
  {
    "QuestionId": "WebQTest-1587",
    "RawQuestion": "who does chris hemsworth have a baby with?",
    "ProcessedQuestion": "who does chris hemsworth have a baby with",
    "Parses": [
      {
        "ParseId": "WebQTest-1587.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Longer chain. Original comment: F Spouse whose children count > 0"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.04jnqj ns:people.person.children ?y .\n\t?y ns:people.person.parents ?x .\n  FILTER (?x != ns:m.04jnqj) .\n}",
        "PotentialTopicEntityMention": "chris hemsworth",
        "TopicEntityName": "Chris Hemsworth",
        "TopicEntityMid": "m.04jnqj",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fccsp",
            "EntityName": "Elsa Pataky"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04jnqj": "Chris Hemsworth"
    },
    "qid_topic_entity": {
      "Q54314": "Chris Hemsworth"
    },
    "NoisyQuestion": "who does chris hemsworsh have a baby with?"
  },
  {
    "QuestionId": "WebQTest-1000",
    "RawQuestion": "what countries included in oceania?",
    "ProcessedQuestion": "what countries included in oceania",
    "Parses": [
      {
        "ParseId": "WebQTest-1000.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nrg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nrg ns:location.location.contains ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"Country\")\n}\n",
        "PotentialTopicEntityMention": "oceania",
        "TopicEntityName": "Oceania",
        "TopicEntityMid": "m.05nrg",
        "InferentialChain": [
          "location.location.contains"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Value",
            "Argument": "Country",
            "EntityName": null,
            "SourceNodeIndex": 0,
            "NodePredicate": "base.biblioness.bibs_location.loc_type",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01n8qg",
            "EntityName": "Solomon Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020p1",
            "EntityName": "Cook Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wt0",
            "EntityName": "Fiji"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.034tl",
            "EntityName": "Guam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ryn",
            "EntityName": "Indonesia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047t_",
            "EntityName": "Kiribati"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v6v",
            "EntityName": "Marshall Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05c17",
            "EntityName": "New Caledonia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05cnr",
            "EntityName": "Northern Mariana Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qkp",
            "EntityName": "Papua New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s9y",
            "EntityName": "Samoa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07fb6",
            "EntityName": "Tonga"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07z5n",
            "EntityName": "Vanuatu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chghy",
            "EntityName": "Australia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ctw_b",
            "EntityName": "New Zealand"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05nrg": "Oceania"
    },
    "qid_topic_entity": {
      "Q538": "Oceania"
    },
    "NoisyQuestion": "what countries included in oceania?"
  },
  {
    "QuestionId": "WebQTest-210",
    "RawQuestion": "where is tyrese gibson from?",
    "ProcessedQuestion": "where is tyrese gibson from",
    "Parses": [
      {
        "ParseId": "WebQTest-210.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01l1b90)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01l1b90 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "tyrese gibson",
        "TopicEntityName": "Tyrese Gibson",
        "TopicEntityMid": "m.01l1b90",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027sp2",
            "EntityName": "Watts"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01l1b90": "Tyrese Gibson"
    },
    "qid_topic_entity": {
      "Q311232": "Tyrese Gibson"
    },
    "NoisyQuestion": "where is tyrese gibson from?"
  },
  {
    "QuestionId": "WebQTest-1508",
    "RawQuestion": "when did bill clinton go to college?",
    "ProcessedQuestion": "when did bill clinton go to college",
    "Parses": [
      {
        "ParseId": "WebQTest-1508.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0157m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0157m ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "bill clinton",
        "TopicEntityName": "Bill Clinton",
        "TopicEntityMid": "m.0157m",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bq1j",
            "EntityName": "Yale Law School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02ckl3",
            "EntityName": "Edmund A. Walsh School of Foreign Service"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07tgn",
            "EntityName": "University of Oxford"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08815",
            "EntityName": "University Yale"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0pspl",
            "EntityName": "Georgetown University"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ymf1",
            "EntityName": "University College, Oxford"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0157m": "Bill Clinton"
    },
    "qid_topic_entity": {
      "Q1124": "Bill Clinton"
    },
    "NoisyQuestion": "when did bill clintn go to college?"
  },
  {
    "QuestionId": "WebQTest-1773",
    "RawQuestion": "who was the son of king leonidas?",
    "ProcessedQuestion": "who was the son of king leonidas",
    "Parses": [
      {
        "ParseId": "WebQTest-1773.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nb2t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nb2t ns:people.person.children ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PotentialTopicEntityMention": "king leonidas",
        "TopicEntityName": "Leonidas I",
        "TopicEntityMid": "m.0nb2t",
        "InferentialChain": [
          "people.person.children"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05zppz",
            "EntityName": "Male",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.person.gender",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.063sr6",
            "EntityName": "Pleistarchus"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0nb2t": "Leonidas I"
    },
    "qid_topic_entity": {
      "Q44228": "Leonidas I"
    },
    "NoisyQuestion": "who was the son of king leonidas?"
  },
  {
    "QuestionId": "WebQTest-2015",
    "RawQuestion": "what type of government does argentina have today?",
    "ProcessedQuestion": "what type of government does argentina have today",
    "Parses": [
      {
        "ParseId": "WebQTest-2015.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "argentina",
        "TopicEntityName": "Argentina",
        "TopicEntityMid": "m.0jgd",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d9r3",
            "EntityName": "Presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0drnm",
            "EntityName": "Representative democracy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j729",
            "EntityName": "Federal republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jgd": "Argentina"
    },
    "qid_topic_entity": {
      "Q414": "Argentina"
    },
    "NoisyQuestion": "what type of government does argenntina have today?"
  },
  {
    "QuestionId": "WebQTest-1337",
    "RawQuestion": "what all did ben franklin invent?",
    "ProcessedQuestion": "what all did ben franklin invent",
    "Parses": [
      {
        "ParseId": "WebQTest-1337.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:law.inventor.inventions ?x .\n}\n",
        "PotentialTopicEntityMention": "ben franklin",
        "TopicEntityName": "Benjamin Franklin",
        "TopicEntityMid": "m.019fz",
        "InferentialChain": [
          "law.inventor.inventions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0135nr",
            "EntityName": "Lightning rod"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.013cqs",
            "EntityName": "Bifocals"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01zh8g",
            "EntityName": "Glass harmonica"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.029mmz",
            "EntityName": "Franklin stove"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.019fz": "Benjamin Franklin"
    },
    "qid_topic_entity": {
      "Q34969": "Benjamin Franklin"
    },
    "NoisyQuestion": "what all did Ben Franklind invent?"
  },
  {
    "QuestionId": "WebQTest-932",
    "RawQuestion": "what year did super mario bros 2 come out?",
    "ProcessedQuestion": "what year did super mario bros 2 come out",
    "Parses": [
      {
        "ParseId": "WebQTest-932.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011v_m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011v_m ns:cvg.computer_videogame.release_date ?x .\n}\n",
        "PotentialTopicEntityMention": "super mario bros 2",
        "TopicEntityName": "Super Mario Bros. 2",
        "TopicEntityMid": "m.011v_m",
        "InferentialChain": [
          "cvg.computer_videogame.release_date"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "1988-10",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.011v_m": "Super Mario Bros. 2"
    },
    "qid_topic_entity": {
      "Q854479": "Super Mario Bros. 2"
    },
    "NoisyQuestion": "what year did super mario bros 2 come out?"
  },
  {
    "QuestionId": "WebQTest-420",
    "RawQuestion": "where is perpignan located?",
    "ProcessedQuestion": "where is perpignan located",
    "Parses": [
      {
        "ParseId": "WebQTest-420.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09nkq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09nkq ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "perpignan",
        "TopicEntityName": "Perpignan",
        "TopicEntityMid": "m.09nkq",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01087l",
            "EntityName": "Pyrénées-Orientales"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f8l9c",
            "EntityName": "France"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0lwkz",
            "EntityName": "Languedoc-Roussillon"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09nkq": "Perpignan"
    },
    "qid_topic_entity": {
      "Q6730": "Perpignan"
    },
    "NoisyQuestion": "where is perpignan located?"
  },
  {
    "QuestionId": "WebQTest-1611",
    "RawQuestion": "what is armenian currency?",
    "ProcessedQuestion": "what is armenian currency",
    "Parses": [
      {
        "ParseId": "WebQTest-1611.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgx ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "armenian",
        "TopicEntityName": "Armenia",
        "TopicEntityMid": "m.0jgx",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.033xr3",
            "EntityName": "Armenian dram"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jgx": "Armenia"
    },
    "qid_topic_entity": {
      "Q399": "Armenia"
    },
    "NoisyQuestion": "what is armenian currancy?"
  },
  {
    "QuestionId": "WebQTest-1209",
    "RawQuestion": "when does ziva start on ncis?",
    "ProcessedQuestion": "when does ziva start on ncis",
    "Parses": [
      {
        "ParseId": "WebQTest-1209.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m8sg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m8sg ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.seasons ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.093xn8 .\n?x ns:tv.tv_series_season.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PotentialTopicEntityMention": "ncis",
        "TopicEntityName": "NCIS",
        "TopicEntityMid": "m.03m8sg",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.seasons"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.093xn8",
            "EntityName": "Mossad Agent Ziva David",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": {
          "SortOrder": "Ascending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 1,
          "NodePredicate": "tv.tv_series_season.from",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05df6zw",
            "EntityName": "NCIS - Season 3"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03m8sg": "NCIS"
    },
    "qid_topic_entity": {
      "Q4525": "NCIS"
    },
    "NoisyQuestion": "when does ziva start on ncis?"
  },
  {
    "QuestionId": "WebQTest-1665",
    "RawQuestion": "where is the latin language from?",
    "ProcessedQuestion": "where is the latin language from",
    "Parses": [
      {
        "ParseId": "WebQTest-1665.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04h9h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04h9h ns:language.human_language.language_family ?x .\n}\n",
        "PotentialTopicEntityMention": "latin",
        "TopicEntityName": "Latin Language",
        "TopicEntityMid": "m.04h9h",
        "InferentialChain": [
          "language.human_language.language_family"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03t28",
            "EntityName": "Italic languages"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03v09",
            "EntityName": "Indo-European languages"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04h9h": "Latin Language"
    },
    "qid_topic_entity": {
      "Q397": "Latin Language"
    },
    "NoisyQuestion": "where is the laten language from?"
  },
  {
    "QuestionId": "WebQTest-1627",
    "RawQuestion": "what are malaysian coins called?",
    "ProcessedQuestion": "what are malaysian coins called",
    "Parses": [
      {
        "ParseId": "WebQTest-1627.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09pmkv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09pmkv ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "malaysian",
        "TopicEntityName": "Malaysia",
        "TopicEntityMid": "m.09pmkv",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_c9q",
            "EntityName": "Malaysian ringgit"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09pmkv": "Malaysia"
    },
    "qid_topic_entity": {
      "Q833": "Malaysia"
    },
    "NoisyQuestion": "what are malaysian coins called?"
  },
  {
    "QuestionId": "WebQTest-1102",
    "RawQuestion": "where is victoria british columbia?",
    "ProcessedQuestion": "where is victoria british columbia",
    "Parses": [
      {
        "ParseId": "WebQTest-1102.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ypt ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "victoria british columbia",
        "TopicEntityName": "Victoria",
        "TopicEntityMid": "m.07ypt",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015jr",
            "EntityName": "British Columbia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07ypt": "Victoria"
    },
    "qid_topic_entity": {
      "Q2132": "Victoria"
    },
    "NoisyQuestion": "where is victoria britsh columbia?"
  },
  {
    "QuestionId": "WebQTest-224",
    "RawQuestion": "where did william morris go to college?",
    "ProcessedQuestion": "where did william morris go to college",
    "Parses": [
      {
        "ParseId": "WebQTest-224.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08304)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08304 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "william morris",
        "TopicEntityName": "William Morris",
        "TopicEntityMid": "m.08304",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07tgn",
            "EntityName": "University of Oxford"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ylvj",
            "EntityName": "Exeter College, Oxford"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.08304": "William Morris"
    },
    "qid_topic_entity": {
      "Q182589": "William Morris"
    },
    "NoisyQuestion": "where did william morris go to colleg?"
  },
  {
    "QuestionId": "WebQTest-405",
    "RawQuestion": "who fought the battle of gettysburg?",
    "ProcessedQuestion": "who fought the battle of gettysburg",
    "Parses": [
      {
        "ParseId": "WebQTest-405.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jnm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jnm ns:base.culturalevent.event.entity_involved ?x .\n}\n",
        "PotentialTopicEntityMention": "battle of gettysburg",
        "TopicEntityName": "Battle of Gettysburg",
        "TopicEntityMid": "m.01jnm",
        "InferentialChain": [
          "base.culturalevent.event.entity_involved"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012pml",
            "EntityName": "George Meade"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020d5",
            "EntityName": "Confederate States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fp48",
            "EntityName": "Union"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06f5j",
            "EntityName": "Robert E. Lee"
          }
        ]
      },
      {
        "ParseId": "WebQTest-405.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jnm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jnm ns:military.military_conflict.combatants ?y .\n?y ns:military.military_combatant_group.combatants ?x .\n}\n",
        "PotentialTopicEntityMention": "battle of gettysburg",
        "TopicEntityName": "Battle of Gettysburg",
        "TopicEntityMid": "m.01jnm",
        "InferentialChain": [
          "military.military_conflict.combatants",
          "military.military_combatant_group.combatants"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020d5",
            "EntityName": "Confederate States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fp48",
            "EntityName": "Union"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          }
        ]
      },
      {
        "ParseId": "WebQTest-405.P2",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jnm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jnm ns:military.military_conflict.commanders ?y .\n?y ns:military.military_command.military_combatant ?x .\n}\n",
        "PotentialTopicEntityMention": "battle of gettysburg",
        "TopicEntityName": "Battle of Gettysburg",
        "TopicEntityMid": "m.01jnm",
        "InferentialChain": [
          "military.military_conflict.commanders",
          "military.military_command.military_combatant"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020d5",
            "EntityName": "Confederate States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01jnm": "Battle of Gettysburg"
    },
    "qid_topic_entity": {
      "Q33132": "Battle of Gettysburg"
    },
    "NoisyQuestion": "who fought the battle of gettysburk?"
  },
  {
    "QuestionId": "WebQTest-1324",
    "RawQuestion": "what college did john nash go to?",
    "ProcessedQuestion": "what college did john nash go to",
    "Parses": [
      {
        "ParseId": "WebQTest-1324.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pyqh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pyqh ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "john nash",
        "TopicEntityName": "John Forbes Nash, Jr.",
        "TopicEntityMid": "m.0pyqh",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01q2sk",
            "EntityName": "Carnegie Mellon College of Engineering"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zl0",
            "EntityName": "Princeton University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0pyqh": "John Forbes Nash, Jr."
    },
    "qid_topic_entity": {
      "Q128736": "John Forbes Nash, Jr."
    },
    "NoisyQuestion": "what college did jhon nash go to?"
  },
  {
    "QuestionId": "WebQTest-1427",
    "RawQuestion": "who was the secretary of state when andrew jackson was president?",
    "ProcessedQuestion": "who was the secretary of state when andrew jackson was president",
    "Parses": [
      {
        "ParseId": "WebQTest-1427.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0rlz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0rlz ns:government.political_appointer.appointees ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0789n .\n}\n",
        "PotentialTopicEntityMention": "andrew jackson",
        "TopicEntityName": "Andrew Jackson",
        "TopicEntityMid": "m.0rlz",
        "InferentialChain": [
          "government.political_appointer.appointees",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0789n",
            "EntityName": "Secretary of State",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.basic_title",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01bxb3",
            "EntityName": "Edward Livingston"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02ggrk",
            "EntityName": "Louis McLane"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04_0m",
            "EntityName": "Martin Van Buren"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04lhfcl",
            "EntityName": "James Alexander Hamilton"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0rlz": "Andrew Jackson"
    },
    "qid_topic_entity": {
      "Q11817": "Andrew Jackson"
    },
    "NoisyQuestion": "who was the secretary of state when andrew jackson was president?"
  },
  {
    "QuestionId": "WebQTest-525",
    "RawQuestion": "who are the senators of virginia 2013?",
    "ProcessedQuestion": "who are the senators of virginia 2013",
    "Parses": [
      {
        "ParseId": "WebQTest-525.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07z1m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07z1m ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.governmental_body ns:m.07t58 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2013-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2013-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "virginia",
        "TopicEntityName": "Virginia",
        "TopicEntityMid": "m.07z1m",
        "InferentialChain": [
          "government.political_district.representatives",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.07t58",
            "EntityName": "United States Senate",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.governmental_body",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2013-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2013-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2013-01-01",
          "End": "2013-12-31",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": "2013"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.024mm1",
            "EntityName": "Mark Warner"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.053f8h",
            "EntityName": "Tim Kaine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0574xy",
            "EntityName": "Jim Webb"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07z1m": "Virginia"
    },
    "qid_topic_entity": {
      "Q1370": "Virginia"
    },
    "NoisyQuestion": "who are the senators of virgina 2013?"
  },
  {
    "QuestionId": "WebQTest-1054",
    "RawQuestion": "who played denver in four christmases?",
    "ProcessedQuestion": "who played denver in four christmases",
    "Parses": [
      {
        "ParseId": "WebQTest-1054.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gttvn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gttvn ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0zw3029 .\n}\n",
        "PotentialTopicEntityMention": "four christmases",
        "TopicEntityName": "Four Christmases",
        "TopicEntityMid": "m.03gttvn",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0zw3029",
            "EntityName": "Denver",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01twdk",
            "EntityName": "Jon Favreau filmography"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03gttvn": "Four Christmases"
    },
    "qid_topic_entity": {
      "Q315592": "Four Christmases"
    },
    "NoisyQuestion": "who played denver in four christmases?"
  },
  {
    "QuestionId": "WebQTest-1599",
    "RawQuestion": "where did kim jong il die?",
    "ProcessedQuestion": "where did kim jong il die",
    "Parses": [
      {
        "ParseId": "WebQTest-1599.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0143y5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0143y5 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "kim jong il",
        "TopicEntityName": "Kim Jong-il",
        "TopicEntityMid": "m.0143y5",
        "InferentialChain": [
          "people.deceased_person.place_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cw5k",
            "EntityName": "Pyongyang"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0143y5": "Kim Jong-il"
    },
    "qid_topic_entity": {
      "Q10665": "Kim Jong-il"
    },
    "NoisyQuestion": "where did kimm jong il die?"
  },
  {
    "QuestionId": "WebQTest-1680",
    "RawQuestion": "when was the last time the orioles won the world series?",
    "ProcessedQuestion": "when was the last time the orioles won the world series",
    "Parses": [
      {
        "ParseId": "WebQTest-1680.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01d6g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01d6g ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PotentialTopicEntityMention": "orioles",
        "TopicEntityName": "Baltimore Orioles",
        "TopicEntityMid": "m.01d6g",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [],
        "Time": null,
        "Order": {
          "SortOrder": "Descending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "time.event.end_date",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.046_p6",
            "EntityName": "1983 World Series"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01d6g": "Baltimore Orioles"
    },
    "qid_topic_entity": {
      "Q650816": "Baltimore Orioles"
    },
    "NoisyQuestion": "when was the last time the orioles won the world seris?"
  },
  {
    "QuestionId": "WebQTest-1771",
    "RawQuestion": "what is the islamic belief?",
    "ProcessedQuestion": "what is the islamic belief",
    "Parses": [
      {
        "ParseId": "WebQTest-1771.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.beliefs ?x .\n}\n",
        "PotentialTopicEntityMention": "islamic",
        "TopicEntityName": "Islam",
        "TopicEntityMid": "m.0flw86",
        "InferentialChain": [
          "religion.religion.beliefs"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019vqj",
            "EntityName": "Mahdi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01bbmp",
            "EntityName": "Tawhid"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.024b22",
            "EntityName": "Prophets in Islam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025w817",
            "EntityName": "Predestination in Islam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wvcg4",
            "EntityName": "Entering Heaven alive"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04xy3",
            "EntityName": "Monotheism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0698fs",
            "EntityName": "Islamic view of angels"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06rvp0",
            "EntityName": "Qiyamah"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.074hw",
            "EntityName": "Sharia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07bfrc",
            "EntityName": "Masih ad-Dajjal"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07r6vw",
            "EntityName": "Islamic holy books"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09kb_2",
            "EntityName": "God in Islam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hr6vbp",
            "EntityName": "Ṭūbā"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0flw86": "Islam"
    },
    "qid_topic_entity": {
      "Q432": "Islam"
    },
    "NoisyQuestion": "what is the islamc belief?"
  },
  {
    "QuestionId": "WebQTest-1629",
    "RawQuestion": "what currency does dominican republic take?",
    "ProcessedQuestion": "what currency does dominican republic take",
    "Parses": [
      {
        "ParseId": "WebQTest-1629.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027rn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027rn ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "dominican republic",
        "TopicEntityName": "Dominican Republic",
        "TopicEntityMid": "m.027rn",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04lt7_",
            "EntityName": "Dominican peso"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.027rn": "Dominican Republic"
    },
    "qid_topic_entity": {
      "Q786": "Dominican Republic"
    },
    "NoisyQuestion": "what currency does dominican republik take?"
  },
  {
    "QuestionId": "WebQTest-1051",
    "RawQuestion": "when did the san francisco earthquake occur?",
    "ProcessedQuestion": "when did the san francisco earthquake occur",
    "Parses": [
      {
        "ParseId": "WebQTest-1051.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f6rm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f6rm ns:time.event.start_date ?x .\n}\n",
        "PotentialTopicEntityMention": "san francisco earthquake",
        "TopicEntityName": "1906 San Francisco earthquake",
        "TopicEntityMid": "m.01f6rm",
        "InferentialChain": [
          "time.event.start_date"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "1906-04-18",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01f6rm": "1906 San Francisco earthquake"
    },
    "qid_topic_entity": {
      "Q211386": "1906 San Francisco earthquake"
    },
    "NoisyQuestion": "when did the san fransisco earthquake occur?"
  },
  {
    "QuestionId": "WebQTest-489",
    "RawQuestion": "who plays stephanie plum in one for the money?",
    "ProcessedQuestion": "who plays stephanie plum in one for the money",
    "Parses": [
      {
        "ParseId": "WebQTest-489.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g5sxb4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g5sxb4 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.098by5 .\n}\n",
        "PotentialTopicEntityMention": "one for the money",
        "TopicEntityName": "One for the Money",
        "TopicEntityMid": "m.0g5sxb4",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.098by5",
            "EntityName": "Stephanie Plum",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025b5y",
            "EntityName": "Katherine Heigl"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0g5sxb4": "One for the Money"
    },
    "qid_topic_entity": {
      "Q602501": "One for the Money"
    },
    "NoisyQuestion": "who plays stephanie plum in one for the money?"
  },
  {
    "QuestionId": "WebQTest-1343",
    "RawQuestion": "what degree did martin luther king earn?",
    "ProcessedQuestion": "what degree did martin luther king earn",
    "Parses": [
      {
        "ParseId": "WebQTest-1343.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n",
        "PotentialTopicEntityMention": "martin luther king",
        "TopicEntityName": "Martin Luther King, Jr.",
        "TopicEntityMid": "m.051cc",
        "InferentialChain": [
          "people.person.education",
          "education.education.degree"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.014mlp",
            "EntityName": "Bachelor of Arts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04zx3q1",
            "EntityName": "PhD"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05vjnk",
            "EntityName": "Bachelor of Divinity"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.079h0",
            "EntityName": "Secondary education"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.051cc": "Martin Luther King, Jr."
    },
    "qid_topic_entity": {
      "Q8027": "Martin Luther King, Jr."
    },
    "NoisyQuestion": "what degree did martyn luther king earn?"
  },
  {
    "QuestionId": "WebQTest-1449",
    "RawQuestion": "what was laura ingalls wilder famous for?",
    "ProcessedQuestion": "what was laura ingalls wilder famous for",
    "Parses": [
      {
        "ParseId": "WebQTest-1449.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bt87)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bt87 ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "laura ingalls wilder",
        "TopicEntityName": "Laura Ingalls Wilder",
        "TopicEntityMid": "m.01bt87",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d30f",
            "EntityName": "Teacher"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d8qb",
            "EntityName": "Journalist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kyk",
            "EntityName": "Author"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01bt87": "Laura Ingalls Wilder"
    },
    "qid_topic_entity": {
      "Q237514": "Laura Ingalls Wilder"
    },
    "NoisyQuestion": "what was laura ingalls wilder famous for?"
  },
  {
    "QuestionId": "WebQTest-584",
    "RawQuestion": "where buddha come from?",
    "ProcessedQuestion": "where buddha come from",
    "Parses": [
      {
        "ParseId": "WebQTest-584.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015k7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015k7 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "buddha",
        "TopicEntityName": "Gautama Buddha",
        "TopicEntityMid": "m.015k7",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06_86x",
            "EntityName": "Kapilavastu"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.015k7": "Gautama Buddha"
    },
    "qid_topic_entity": {
      "Q9441": "Gautama Buddha"
    },
    "NoisyQuestion": "where buddha cme from?"
  },
  {
    "QuestionId": "WebQTest-1043",
    "RawQuestion": "what kind of government is mali?",
    "ProcessedQuestion": "what kind of government is mali",
    "Parses": [
      {
        "ParseId": "WebQTest-1043.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v09)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v09 ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "mali",
        "TopicEntityName": "Mali",
        "TopicEntityMid": "m.04v09",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01dw03",
            "EntityName": "Semi-presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fpfn",
            "EntityName": "Unitary state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06cx9",
            "EntityName": "Republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04v09": "Mali"
    },
    "qid_topic_entity": {
      "Q912": "Mali"
    },
    "NoisyQuestion": "what kind of government is mali?"
  },
  {
    "QuestionId": "WebQTest-1770",
    "RawQuestion": "what country does rafael nadal play for?",
    "ProcessedQuestion": "what country does rafael nadal play for",
    "Parses": [
      {
        "ParseId": "WebQTest-1770.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051q39)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051q39 ns:people.person.nationality ?x .\n}\n",
        "PotentialTopicEntityMention": "rafael nadal",
        "TopicEntityName": "Rafael Nadal",
        "TopicEntityMid": "m.051q39",
        "InferentialChain": [
          "people.person.nationality"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06mkj",
            "EntityName": "Spain"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.051q39": "Rafael Nadal"
    },
    "qid_topic_entity": {
      "Q10132": "Rafael Nadal"
    },
    "NoisyQuestion": "what country does rafael nadal play for?"
  },
  {
    "QuestionId": "WebQTest-261",
    "RawQuestion": "what is cindy sherman known for?",
    "ProcessedQuestion": "what is cindy sherman known for",
    "Parses": [
      {
        "ParseId": "WebQTest-261.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.074g02)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.074g02 ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "cindy sherman",
        "TopicEntityName": "Cindy Sherman",
        "TopicEntityMid": "m.074g02",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jknp",
            "EntityName": "Film director"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03hz6vv",
            "EntityName": "Visual Artist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0lgw7",
            "EntityName": "Photographer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n1h",
            "EntityName": "Artist"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.074g02": "Cindy Sherman"
    },
    "qid_topic_entity": {
      "Q229455": "Cindy Sherman"
    },
    "NoisyQuestion": "what is Cindy Sherman known for?"
  },
  {
    "QuestionId": "WebQTest-730",
    "RawQuestion": "what record label is kelly clarkson signed with?",
    "ProcessedQuestion": "what record label is kelly clarkson signed with",
    "Parses": [
      {
        "ParseId": "WebQTest-730.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025ldg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025ldg ns:music.artist.label ?x .\n}\n",
        "PotentialTopicEntityMention": "kelly clarkson",
        "TopicEntityName": "Kelly Clarkson",
        "TopicEntityMid": "m.025ldg",
        "InferentialChain": [
          "music.artist.label"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0181dw",
            "EntityName": "RCA Records"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03mp8k",
            "EntityName": "Sony BMG"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.043g7l",
            "EntityName": "Sony Music Entertainment"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0rpfr83",
            "EntityName": "19 Recordings"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.025ldg": "Kelly Clarkson"
    },
    "qid_topic_entity": {
      "Q483507": "Kelly Clarkson"
    },
    "NoisyQuestion": "what record label is kelly clarkson signed with?"
  },
  {
    "QuestionId": "WebQTest-599",
    "RawQuestion": "what inventions did thomas edison invent list?",
    "ProcessedQuestion": "what inventions did thomas edison invent list",
    "Parses": [
      {
        "ParseId": "WebQTest-599.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07bty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07bty ns:law.inventor.inventions ?x .\n}\n",
        "PotentialTopicEntityMention": "thomas edison",
        "TopicEntityName": "Thomas Edison",
        "TopicEntityMid": "m.07bty",
        "InferentialChain": [
          "law.inventor.inventions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01cbh9",
            "EntityName": "Movie camera"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02r0w8q",
            "EntityName": "Quadruplex telegraph"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03q9w5j",
            "EntityName": "Electric Power Distribution"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0505x",
            "EntityName": "Mimeograph"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.063md",
            "EntityName": "Phonograph"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cpk7",
            "EntityName": "Incandescent light bulb"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d9fkw",
            "EntityName": "Carbon microphone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0xrxw",
            "EntityName": "Phonograph cylinder"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07bty": "Thomas Edison"
    },
    "qid_topic_entity": {
      "Q8743": "Thomas Edison"
    },
    "NoisyQuestion": "what inventions did thomas edison invent list?"
  },
  {
    "QuestionId": "WebQTest-1187",
    "RawQuestion": "where are english speakers distributed?",
    "ProcessedQuestion": "where are english speakers distributed",
    "Parses": [
      {
        "ParseId": "WebQTest-1187.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PotentialTopicEntityMention": "english",
        "TopicEntityName": "English Language",
        "TopicEntityMid": "m.02h40lc",
        "InferentialChain": [
          "language.human_language.countries_spoken_in"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0160w",
            "EntityName": "Bahamas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0162b",
            "EntityName": "Bangladesh"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0162v",
            "EntityName": "Barbados"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0164b",
            "EntityName": "Belize"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0165b",
            "EntityName": "Bermuda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0166v",
            "EntityName": "Botswana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0167v",
            "EntityName": "Brunei"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016p5p",
            "EntityName": "Transkei"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019pcs",
            "EntityName": "Ethiopia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019rg5",
            "EntityName": "Kenya"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01k0p4",
            "EntityName": "State of Palestine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nln",
            "EntityName": "Cameroon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nty",
            "EntityName": "Cayman Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01ppq",
            "EntityName": "Cyprus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020p1",
            "EntityName": "Cook Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026wtlf",
            "EntityName": "Territory of Papua and New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027nb",
            "EntityName": "Dominica"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jx1",
            "EntityName": "England"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lx0",
            "EntityName": "Timor-Leste"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wt0",
            "EntityName": "Fiji"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03__y",
            "EntityName": "Jordan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_3d",
            "EntityName": "Japan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_xj",
            "EntityName": "Jersey"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.034m8",
            "EntityName": "Guyana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.034tl",
            "EntityName": "Guam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035dk",
            "EntityName": "Ghana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035hm",
            "EntityName": "Gibraltar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035hr8",
            "EntityName": "South Yemen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035yg",
            "EntityName": "Grenada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h2c",
            "EntityName": "Honduras"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h64",
            "EntityName": "Hong Kong"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rk0",
            "EntityName": "India"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rt9",
            "EntityName": "Republic of Ireland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ryn",
            "EntityName": "Indonesia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03spz",
            "EntityName": "Israel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03t1s",
            "EntityName": "Isle of Man"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047t_",
            "EntityName": "Kiribati"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hhv",
            "EntityName": "Laos"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hvw",
            "EntityName": "Lesotho"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hzj",
            "EntityName": "Liberia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3q",
            "EntityName": "Malta"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v6v",
            "EntityName": "Marshall Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wcf",
            "EntityName": "Montserrat"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05bmq",
            "EntityName": "Namibia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05br2",
            "EntityName": "Nauru"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05cgv",
            "EntityName": "Nigeria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qkp",
            "EntityName": "Papua New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05r7t",
            "EntityName": "Puerto Rico"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05sb1",
            "EntityName": "Pakistan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05v8c",
            "EntityName": "Philippines"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065skb",
            "EntityName": "Gazankulu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0697s",
            "EntityName": "Qatar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06dfg",
            "EntityName": "Rwanda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06m_5",
            "EntityName": "Sri Lanka"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06ryl",
            "EntityName": "Saint Kitts and Nevis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s_2",
            "EntityName": "Sierra Leone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s0l",
            "EntityName": "Saint Lucia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s6l",
            "EntityName": "Saint Vincent and the Grenadines"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s9y",
            "EntityName": "Samoa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06t2t",
            "EntityName": "Singapore"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tw8",
            "EntityName": "Sudan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06v36",
            "EntityName": "Swaziland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07dzf",
            "EntityName": "Tanzania"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07f9q",
            "EntityName": "Tokelau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07fr_",
            "EntityName": "Turks and Caicos Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07fsv",
            "EntityName": "Tuvalu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ssc",
            "EntityName": "United Kingdom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07tp2",
            "EntityName": "Uganda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ytt",
            "EntityName": "Vatican City"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07z5n",
            "EntityName": "Vanuatu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.088q4",
            "EntityName": "Zimbabwe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.088vb",
            "EntityName": "Zambia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09pmkv",
            "EntityName": "Malaysia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09wfqp",
            "EntityName": "Territory of New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chghy",
            "EntityName": "Australia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ctw_b",
            "EntityName": "New Zealand"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d05w3",
            "EntityName": "China"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h44w",
            "EntityName": "Mandatory Palestine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hbgh",
            "EntityName": "Curaçao"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hdx8",
            "EntityName": "Gambia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hzlz",
            "EntityName": "South Africa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j5g9",
            "EntityName": "Wales"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0l3h",
            "EntityName": "Antigua and Barbuda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0rdr4",
            "EntityName": "Bonaire"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1187.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.main_country ?x .\n}\n",
        "PotentialTopicEntityMention": "english",
        "TopicEntityName": "English Language",
        "TopicEntityMid": "m.02h40lc",
        "InferentialChain": [
          "language.human_language.main_country"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.014tss",
            "EntityName": "Kingdom of Great Britain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rt9",
            "EntityName": "Republic of Ireland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ssc",
            "EntityName": "United Kingdom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chghy",
            "EntityName": "Australia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ctw_b",
            "EntityName": "New Zealand"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02h40lc": "English Language"
    },
    "qid_topic_entity": {
      "Q1860": "English Language"
    },
    "NoisyQuestion": "where are englis speakers distributed?"
  },
  {
    "QuestionId": "WebQTest-898",
    "RawQuestion": "what county is st paul nc in?",
    "ProcessedQuestion": "what county is st paul nc in",
    "Parses": [
      {
        "ParseId": "WebQTest-898.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yk9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yk9v ns:location.hud_county_place.county ?x .\n}\n",
        "PotentialTopicEntityMention": "st paul nc",
        "TopicEntityName": "St. Pauls",
        "TopicEntityMid": "m.0yk9v",
        "InferentialChain": [
          "location.hud_county_place.county"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n3s6",
            "EntityName": "Robeson County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0yk9v": "St. Pauls"
    },
    "qid_topic_entity": {
      "Q651403": "St. Pauls"
    },
    "NoisyQuestion": "what county is st paul n.c. in?"
  },
  {
    "QuestionId": "WebQTest-1012",
    "RawQuestion": "what to do in hollywood ca this weekend?",
    "ProcessedQuestion": "what to do in hollywood ca this weekend",
    "Parses": [
      {
        "ParseId": "WebQTest-1012.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2wj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2wj ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PotentialTopicEntityMention": "hollywood",
        "TopicEntityName": "Hollywood",
        "TopicEntityMid": "m.0f2wj",
        "InferentialChain": [
          "travel.travel_destination.tourist_attractions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02_4ml",
            "EntityName": "Griffith Observatory"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025shr0",
            "EntityName": "Universal CityWalk"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.029x2z",
            "EntityName": "Grauman's Egyptian Theatre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hksn",
            "EntityName": "Dolby Theatre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.031dp8",
            "EntityName": "Hollywood Heritage Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04n2h_",
            "EntityName": "TCL Chinese Theatre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.050ctv",
            "EntityName": "Hollywood Sign"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qsy8",
            "EntityName": "Universal Studios Hollywood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07_dsf",
            "EntityName": "Hollywood Wax Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0qjfl",
            "EntityName": "Hollywood Walk of Fame"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0f2wj": "Hollywood"
    },
    "qid_topic_entity": {
      "Q34006": "Hollywood"
    },
    "NoisyQuestion": "what to do in hollywood ca this weekend?"
  },
  {
    "QuestionId": "WebQTest-339",
    "RawQuestion": "what nationality is mother teresa?",
    "ProcessedQuestion": "what nationality is mother teresa",
    "Parses": [
      {
        "ParseId": "WebQTest-339.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01yv6p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01yv6p ns:people.person.nationality ?x .\n}\n",
        "PotentialTopicEntityMention": "mother teresa",
        "TopicEntityName": "Mother Teresa",
        "TopicEntityMid": "m.01yv6p",
        "InferentialChain": [
          "people.person.nationality"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rk0",
            "EntityName": "India"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05kyr",
            "EntityName": "Ottoman Empire"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01yv6p": "Mother Teresa"
    },
    "qid_topic_entity": {
      "Q30547": "Mother Teresa"
    },
    "NoisyQuestion": "what nationality is mother teresa?"
  },
  {
    "QuestionId": "WebQTest-1014",
    "RawQuestion": "where did kim kardashian come from?",
    "ProcessedQuestion": "where did kim kardashian come from",
    "Parses": [
      {
        "ParseId": "WebQTest-1014.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0261x8t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0261x8t ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "kim kardashian",
        "TopicEntityName": "Kim Kardashian",
        "TopicEntityMid": "m.0261x8t",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.030qb3t",
            "EntityName": "Los Angeles"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0261x8t": "Kim Kardashian"
    },
    "qid_topic_entity": {
      "Q186304": "Kim Kardashian"
    },
    "NoisyQuestion": "where did Kim Kardashian come from?"
  },
  {
    "QuestionId": "WebQTest-1516",
    "RawQuestion": "where did sanjay gupta go to school?",
    "ProcessedQuestion": "where did sanjay gupta go to school",
    "Parses": [
      {
        "ParseId": "WebQTest-1516.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02yyk6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02yyk6 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "sanjay gupta",
        "TopicEntityName": "Sanjay Gupta",
        "TopicEntityMid": "m.02yyk6",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027j22s",
            "EntityName": "Novi High School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07szy",
            "EntityName": "University of Michigan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08mhmx",
            "EntityName": "University of Michigan Health System"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02yyk6": "Sanjay Gupta"
    },
    "qid_topic_entity": {
      "Q510034": "Sanjay Gupta"
    },
    "NoisyQuestion": "where did sanjay gupta go to school?"
  },
  {
    "QuestionId": "WebQTest-1914",
    "RawQuestion": "what year was allen iverson mvp?",
    "ProcessedQuestion": "what year was allen iverson mvp",
    "Parses": [
      {
        "ParseId": "WebQTest-1914.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01sg7_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01sg7_ ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:m.02yqk8 .\n}\n",
        "PotentialTopicEntityMention": "allen iverson",
        "TopicEntityName": "Allen Iverson",
        "TopicEntityMid": "m.01sg7_",
        "InferentialChain": [
          "sports.sports_award_winner.awards",
          "sports.sports_award.season"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02yqk8",
            "EntityName": "NBA Most Valuable Player Award",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_award.award",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.080b2d",
            "EntityName": "2000–01 NBA season"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01sg7_": "Allen Iverson"
    },
    "qid_topic_entity": {
      "Q190094": "Allen Iverson"
    },
    "NoisyQuestion": "what year was allan iverson mvp?"
  },
  {
    "QuestionId": "WebQTest-1311",
    "RawQuestion": "what was antoni gaudi inspired by?",
    "ProcessedQuestion": "what was antoni gaudi inspired by",
    "Parses": [
      {
        "ParseId": "WebQTest-1311.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yb0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yb0 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PotentialTopicEntityMention": "antoni gaudi",
        "TopicEntityName": "Antoni Gaudí",
        "TopicEntityMid": "m.0yb0",
        "InferentialChain": [
          "influence.influence_node.influenced_by"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02mpv",
            "EntityName": "Eugène Viollet-le-Duc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08304",
            "EntityName": "William Morris"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0yb0": "Antoni Gaudí"
    },
    "qid_topic_entity": {
      "Q25328": "Antoni Gaudí"
    },
    "NoisyQuestion": "what was antoni gaudi inspird by?"
  },
  {
    "QuestionId": "WebQTest-20",
    "RawQuestion": "what did st augustine do?",
    "ProcessedQuestion": "what did st augustine do",
    "Parses": [
      {
        "ParseId": "WebQTest-20.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0w6w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0w6w ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "augustine",
        "TopicEntityName": "Augustine of Hippo",
        "TopicEntityMid": "m.0w6w",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h6fbs",
            "EntityName": "Philosopher"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05t4q",
            "EntityName": "Physician"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0w6w": "Augustine of Hippo"
    },
    "qid_topic_entity": {
      "Q8018": "Augustine of Hippo"
    },
    "NoisyQuestion": "what did st augustin do?"
  },
  {
    "QuestionId": "WebQTest-248",
    "RawQuestion": "what state new york city belong to?",
    "ProcessedQuestion": "what state new york city belong to",
    "Parses": [
      {
        "ParseId": "WebQTest-248.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_286)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_286 ns:base.biblioness.bibs_location.state ?x .\n}\n",
        "PotentialTopicEntityMention": "new york city",
        "TopicEntityName": "New York City",
        "TopicEntityMid": "m.02_286",
        "InferentialChain": [
          "base.biblioness.bibs_location.state"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059rby",
            "EntityName": "New York"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02_286": "New York City"
    },
    "qid_topic_entity": {
      "Q60": "New York City"
    },
    "NoisyQuestion": "what state new york citty belong to?"
  },
  {
    "QuestionId": "WebQTest-2001",
    "RawQuestion": "who won the 2000 fa cup final?",
    "ProcessedQuestion": "who won the 2000 fa cup final",
    "Parses": [
      {
        "ParseId": "WebQTest-2001.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_p0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_p0 ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n?y ns:sports.sports_award.season ns:m.03wcq72 .\n}\n",
        "PotentialTopicEntityMention": "fa cup",
        "TopicEntityName": "FA Cup",
        "TopicEntityMid": "m.02_p0",
        "InferentialChain": [
          "sports.sports_award_type.winners",
          "sports.sports_award.award_winner"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.03wcq72",
            "EntityName": "1999–2000 FA Cup",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_award.season",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.023fb",
            "EntityName": "Chelsea F.C."
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02_p0": "FA Cup"
    },
    "qid_topic_entity": {
      "Q11151": "FA Cup"
    },
    "NoisyQuestion": "who won the 2000 fa cup final?"
  },
  {
    "QuestionId": "WebQTest-1081",
    "RawQuestion": "where did george washington carver go to collage?",
    "ProcessedQuestion": "where did george washington carver go to collage",
    "Parses": [
      {
        "ParseId": "WebQTest-1081.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03djm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03djm ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "george washington carver",
        "TopicEntityName": "George Washington Carver",
        "TopicEntityMid": "m.03djm",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01xssh",
            "EntityName": "Simpson College"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03v6t",
            "EntityName": "Iowa State University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03djm": "George Washington Carver"
    },
    "qid_topic_entity": {
      "Q296898": "George Washington Carver"
    },
    "NoisyQuestion": "where did george washington carver go to collige?"
  },
  {
    "QuestionId": "WebQTest-775",
    "RawQuestion": "what to do this weekend in manchester with kids?",
    "ProcessedQuestion": "what to do this weekend in manchester with kids",
    "Parses": [
      {
        "ParseId": "WebQTest-775.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.052bw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.052bw ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PotentialTopicEntityMention": "manchester",
        "TopicEntityName": "Manchester",
        "TopicEntityMid": "m.052bw",
        "InferentialChain": [
          "travel.travel_destination.tourist_attractions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lv55",
            "EntityName": "Imperial War Museum North"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w89p",
            "EntityName": "Urbis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.030lpl",
            "EntityName": "Old Trafford"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0383g6",
            "EntityName": "Whitworth Art Gallery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0383jm",
            "EntityName": "Manchester Art Gallery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.039s65",
            "EntityName": "Manchester Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.039s6j",
            "EntityName": "Manchester Jewish Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cwfv_",
            "EntityName": "Great Manchester Run"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03d5f9f",
            "EntityName": "Chinatown, Manchester"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.041xlb",
            "EntityName": "Manchester Cathedral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bm8swc",
            "EntityName": "The Moon Under Water, Manchester"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gg7rlr",
            "EntityName": "Wheel of Manchester"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n4890m",
            "EntityName": "Albert Hall, Manchester"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.052bw": "Manchester"
    },
    "qid_topic_entity": {
      "Q18125": "Manchester"
    },
    "NoisyQuestion": "what to do this weekend in manchestor with kids?"
  },
  {
    "QuestionId": "WebQTest-540",
    "RawQuestion": "what college did brett favre?",
    "ProcessedQuestion": "what college did brett favre",
    "Parses": [
      {
        "ParseId": "WebQTest-540.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cv72h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cv72h ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "brett favre",
        "TopicEntityName": "Brett Favre",
        "TopicEntityMid": "m.0cv72h",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cchk3",
            "EntityName": "University of Southern Mississippi"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0cv72h": "Brett Favre"
    },
    "qid_topic_entity": {
      "Q267088": "Brett Favre"
    },
    "NoisyQuestion": "what college did bret favre?"
  },
  {
    "QuestionId": "WebQTest-450",
    "RawQuestion": "what is the national flower of hawaii?",
    "ProcessedQuestion": "what is the national flower of hawaii",
    "Parses": [
      {
        "ParseId": "WebQTest-450.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gh4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gh4 ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.04627gn .\n}\n",
        "PotentialTopicEntityMention": "hawaii",
        "TopicEntityName": "Hawaii",
        "TopicEntityMid": "m.03gh4",
        "InferentialChain": [
          "government.governmental_jurisdiction.official_symbols",
          "location.location_symbol_relationship.symbol"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04627gn",
            "EntityName": "State flower",
            "SourceNodeIndex": 0,
            "NodePredicate": "location.location_symbol_relationship.Kind_of_symbol",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03dkj_",
            "EntityName": "Hawaiian hibiscus"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03gh4": "Hawaii"
    },
    "qid_topic_entity": {
      "Q782": "Hawaii"
    },
    "NoisyQuestion": "what is the national flower of hawii?"
  },
  {
    "QuestionId": "WebQTest-180",
    "RawQuestion": "where the missouri river ends?",
    "ProcessedQuestion": "where the missouri river ends",
    "Parses": [
      {
        "ParseId": "WebQTest-180.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ykz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ykz ns:geography.river.mouth ?x .\n}\n",
        "PotentialTopicEntityMention": "missouri river",
        "TopicEntityName": "Missouri River",
        "TopicEntityMid": "m.04ykz",
        "InferentialChain": [
          "geography.river.mouth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yf_",
            "EntityName": "Mississippi River"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04ykz": "Missouri River"
    },
    "qid_topic_entity": {
      "Q5419": "Missouri River"
    },
    "NoisyQuestion": "where the missouri river end?"
  },
  {
    "QuestionId": "WebQTest-322",
    "RawQuestion": "what has ian somerhalder acted in?",
    "ProcessedQuestion": "what has ian somerhalder acted in",
    "Parses": [
      {
        "ParseId": "WebQTest-322.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.044mvs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.044mvs ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "ian somerhalder",
        "TopicEntityName": "Ian Somerhalder",
        "TopicEntityMid": "m.044mvs",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026_ghc",
            "EntityName": "National Lampoon's TV: The Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02vn93f",
            "EntityName": "The Tournament"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03m8y5",
            "EntityName": "Celebrity"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04f20d",
            "EntityName": "Life as a House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j16_m",
            "EntityName": "Anatomy of a Hate Crime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j2fyc",
            "EntityName": "Changing Hearts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04zyhx",
            "EntityName": "The Rules of Attraction"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05q8gln",
            "EntityName": "Marco Polo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06zpsmp",
            "EntityName": "How to Make Love to a Woman"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0892jh",
            "EntityName": "In Enemy Hands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08bgt3",
            "EntityName": "Pulse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bd5mrx",
            "EntityName": "Lost City Raiders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cnbrgy",
            "EntityName": "Wake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crts8b",
            "EntityName": "The Lost Samaritan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cs0g8b",
            "EntityName": "Fireball"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dqpx9",
            "EntityName": "Fearless"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0glymk",
            "EntityName": "The Sensation of Sight"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0vsjfsp",
            "EntityName": "The Anomaly"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0w2rqf7",
            "EntityName": "Time Framed"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0w2rr0c",
            "EntityName": "Caught on Tape"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0w2rr84",
            "EntityName": "Recess"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0w2rrp1",
            "EntityName": "The Old Man and the Studio"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.044mvs": "Ian Somerhalder"
    },
    "qid_topic_entity": {
      "Q130447": "Ian Somerhalder"
    },
    "NoisyQuestion": "what has Ian Somerhalder acted in?"
  },
  {
    "QuestionId": "WebQTest-462",
    "RawQuestion": "what time is it in texas houston right now?",
    "ProcessedQuestion": "what time is it in texas houston right now",
    "Parses": [
      {
        "ParseId": "WebQTest-462.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03l2n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03l2n ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "houston",
        "TopicEntityName": "Houston",
        "TopicEntityMid": "m.03l2n",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fqwt",
            "EntityName": "Central Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03l2n": "Houston"
    },
    "qid_topic_entity": {
      "Q16555": "Houston"
    },
    "NoisyQuestion": "what time is it in texpas houston right now?"
  },
  {
    "QuestionId": "WebQTest-707",
    "RawQuestion": "who played cletus hogg?",
    "ProcessedQuestion": "who played cletus hogg",
    "Parses": [
      {
        "ParseId": "WebQTest-707.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bxcc6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bxcc6 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "cletus hogg",
        "TopicEntityName": "Cletus Hogg",
        "TopicEntityMid": "m.0bxcc6",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04cyn66",
            "EntityName": "Jack Polick"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0bxcc6": "Cletus Hogg"
    },
    "qid_topic_entity": {
      "Q3680572": "Cletus Hogg"
    },
    "NoisyQuestion": "who played cletus hog?"
  },
  {
    "QuestionId": "WebQTest-1063",
    "RawQuestion": "where is audrey hepburn from?",
    "ProcessedQuestion": "where is audrey hepburn from",
    "Parses": [
      {
        "ParseId": "WebQTest-1063.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dqcm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dqcm ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "audrey hepburn",
        "TopicEntityName": "Audrey Hepburn",
        "TopicEntityMid": "m.0dqcm",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nz8h",
            "EntityName": "Ixelles"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0dqcm": "Audrey Hepburn"
    },
    "qid_topic_entity": {
      "Q42786": "Audrey Hepburn"
    },
    "NoisyQuestion": "where is audrey hepburn from?"
  },
  {
    "QuestionId": "WebQTest-1213",
    "RawQuestion": "which country was michael jackson born?",
    "ProcessedQuestion": "which country was michael jackson born",
    "Parses": [
      {
        "ParseId": "WebQTest-1213.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Longer chain. Original comment: F need one more hop to get country containing Gary."
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.09889g ns:people.person.place_of_birth ?y .\n\t?y ns:location.location.containedby ?x .\n\t?x ns:common.topic.notable_types ns:m.01mp .  #Country\n}",
        "PotentialTopicEntityMention": "michael jackson",
        "TopicEntityName": "Michael Jackson",
        "TopicEntityMid": "m.09889g",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09889g": "Michael Jackson"
    },
    "qid_topic_entity": {
      "Q2831": "Michael Jackson"
    },
    "NoisyQuestion": "which country was michael jackson born?"
  },
  {
    "QuestionId": "WebQTest-1489",
    "RawQuestion": "what character did billy d williams play in star wars?",
    "ProcessedQuestion": "what character did billy d williams play in star wars",
    "Parses": [
      {
        "ParseId": "WebQTest-1489.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027_sn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027_sn ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.0g55yqj .\n}\n",
        "PotentialTopicEntityMention": "billy d williams",
        "TopicEntityName": "Billy Dee Williams",
        "TopicEntityMid": "m.027_sn",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0g55yqj",
            "EntityName": "Robot Chicken: Star Wars Episode III",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ddrb",
            "EntityName": "Lando Calrissian"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1489.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027_sn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027_sn ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.0f3m1 .\n}\n",
        "PotentialTopicEntityMention": "billy d williams",
        "TopicEntityName": "Billy Dee Williams",
        "TopicEntityMid": "m.027_sn",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0f3m1",
            "EntityName": "Star Wars Episode V: The Empire Strikes Back",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ddrb",
            "EntityName": "Lando Calrissian"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1489.P2",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027_sn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027_sn ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.0ddjy .\n}\n",
        "PotentialTopicEntityMention": "billy d williams",
        "TopicEntityName": "Billy Dee Williams",
        "TopicEntityMid": "m.027_sn",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0ddjy",
            "EntityName": "Return of the Jedi",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ddrb",
            "EntityName": "Lando Calrissian"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.027_sn": "Billy Dee Williams"
    },
    "qid_topic_entity": {
      "Q358345": "Billy Dee Williams"
    },
    "NoisyQuestion": "what character did billy d williams play in star wars?"
  },
  {
    "QuestionId": "WebQTest-788",
    "RawQuestion": "what is the holy book of the buddhist religion?",
    "ProcessedQuestion": "what is the holy book of the buddhist religion",
    "Parses": [
      {
        "ParseId": "WebQTest-788.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.092bf5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.092bf5 ns:religion.religion.texts ?x .\n}\n",
        "PotentialTopicEntityMention": "buddhist",
        "TopicEntityName": "Buddhism",
        "TopicEntityMid": "m.092bf5",
        "InferentialChain": [
          "religion.religion.texts"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01hnwm",
            "EntityName": "Pāli Canon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nv3q",
            "EntityName": "Dhammapada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01r1g7",
            "EntityName": "Mahāyāna sūtras"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01rky9",
            "EntityName": "Vimalakirti Sutra"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02k1bj",
            "EntityName": "Tibetan Buddhist canon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02l3dj",
            "EntityName": "Chinese Buddhist canon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.036z9c",
            "EntityName": "Śrīmālādevī Siṃhanāda Sūtra"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04_13vt",
            "EntityName": "Mahāvastu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04k1b0",
            "EntityName": "Amitabha Sutra"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05_m24",
            "EntityName": "Āgama"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05mwk22",
            "EntityName": "Gangōji Garan Engi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c00_gk",
            "EntityName": "Uṣṇīṣa Vijaya Dhāraṇī Sūtra"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c4pcl",
            "EntityName": "Longchen Nyingthig"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fs6g7",
            "EntityName": "Nīlakaṇṭha Dhāraṇī"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.092bf5": "Buddhism"
    },
    "qid_topic_entity": {
      "Q748": "Buddhism"
    },
    "NoisyQuestion": "what is the holy book of the buddhist religion?"
  },
  {
    "QuestionId": "WebQTest-388",
    "RawQuestion": "what are the important holidays of islam?",
    "ProcessedQuestion": "what are the important holidays of islam",
    "Parses": [
      {
        "ParseId": "WebQTest-388.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.holidays ?x .\n}\n",
        "PotentialTopicEntityMention": "islam",
        "TopicEntityName": "Islam",
        "TopicEntityMid": "m.0flw86",
        "InferentialChain": [
          "religion.religion.holidays"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_tkhhs",
            "EntityName": "Eid al-Fitr Eve"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_tkryk",
            "EntityName": "Eid-Ul-Adha Eve"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_403",
            "EntityName": "Eid al-Adha"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0114y4k_",
            "EntityName": "Lailat al Mi'raj"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011njw8h",
            "EntityName": "Nuzul Al-Quran"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0148n3",
            "EntityName": "Eid al-Fitr"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027cs49",
            "EntityName": "Day of Arafat"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02gk03",
            "EntityName": "Day of Ashura"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03clhwf",
            "EntityName": "Mourning of Muharram"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04b4l4",
            "EntityName": "Laylat al-Qadr"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jc26j",
            "EntityName": "Barat Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04q3_d",
            "EntityName": "Mawlid"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06j8x",
            "EntityName": "Ramadan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07_46x",
            "EntityName": "Islamic New Year"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0vpsp_r",
            "EntityName": "Night of Wishes"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0flw86": "Islam"
    },
    "qid_topic_entity": {
      "Q432": "Islam"
    },
    "NoisyQuestion": "what are the important holidays of islam?"
  },
  {
    "QuestionId": "WebQTest-1589",
    "RawQuestion": "where is the mts iceplex in winnipeg?",
    "ProcessedQuestion": "where is the mts iceplex in winnipeg",
    "Parses": [
      {
        "ParseId": "WebQTest-1589.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? cannot find address"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g5r_z_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g5r_z_ ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "mts iceplex",
        "TopicEntityName": "MTS Iceplex",
        "TopicEntityMid": "m.0g5r_z_",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08mhny",
            "EntityName": "Rural Municipality of Headingley"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0pmq2",
            "EntityName": "Winnipeg"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0g5r_z_": "MTS Iceplex"
    },
    "qid_topic_entity": {
      "UnknownQID": "MTS Iceplex"
    },
    "NoisyQuestion": "where is the mts iceplex in winnipeg?"
  },
  {
    "QuestionId": "WebQTest-1038",
    "RawQuestion": "who was wesley snipes?",
    "ProcessedQuestion": "who was wesley snipes",
    "Parses": [
      {
        "ParseId": "WebQTest-1038.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lymt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lymt ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "wesley snipes",
        "TopicEntityName": "Wesley Snipes",
        "TopicEntityMid": "m.02lymt",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012t_z",
            "EntityName": "Businessperson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d_h8",
            "EntityName": "Film Producer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h6p92",
            "EntityName": "Dancer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hrh1q",
            "EntityName": "Actor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wszfz",
            "EntityName": "Martial Artist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09l65",
            "EntityName": "Singer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02lymt": "Wesley Snipes"
    },
    "qid_topic_entity": {
      "Q189694": "Wesley Snipes"
    },
    "NoisyQuestion": "who was wesley snipes?"
  },
  {
    "QuestionId": "WebQTest-1001",
    "RawQuestion": "what country is nicki minaj from?",
    "ProcessedQuestion": "what country is nicki minaj from",
    "Parses": [
      {
        "ParseId": "WebQTest-1001.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.047sxrj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.047sxrj ns:people.person.nationality ?x .\n}\n",
        "PotentialTopicEntityMention": "nicki minaj",
        "TopicEntityName": "Nicki Minaj",
        "TopicEntityMid": "m.047sxrj",
        "InferentialChain": [
          "people.person.nationality"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.047sxrj": "Nicki Minaj"
    },
    "qid_topic_entity": {
      "Q162202": "Nicki Minaj"
    },
    "NoisyQuestion": "what country is Nicki Minaj from?"
  },
  {
    "QuestionId": "WebQTest-543",
    "RawQuestion": "what college did martin luther king jr go to?",
    "ProcessedQuestion": "what college did martin luther king jr go to",
    "Parses": [
      {
        "ParseId": "WebQTest-543.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "martin luther king jr",
        "TopicEntityName": "Martin Luther King, Jr.",
        "TopicEntityMid": "m.051cc",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_r9k",
            "EntityName": "Morehouse College"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06yr21",
            "EntityName": "Crozer Theological Seminary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gl5_",
            "EntityName": "Boston University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.051cc": "Martin Luther King, Jr."
    },
    "qid_topic_entity": {
      "Q8027": "Martin Luther King, Jr."
    },
    "NoisyQuestion": "what college did marting luther king jr go to?"
  },
  {
    "QuestionId": "WebQTest-1981",
    "RawQuestion": "what state did john adams live in?",
    "ProcessedQuestion": "what state did john adams live in",
    "Parses": [
      {
        "ParseId": "WebQTest-1981.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_js)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_js ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n?x ns:common.topic.notable_types ns:m.0kpys4 .\n}\n",
        "PotentialTopicEntityMention": "john adams",
        "TopicEntityName": "John Adams",
        "TopicEntityMid": "m.03_js",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0kpys4",
            "EntityName": "US State",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05k7sb",
            "EntityName": "Massachusetts"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03_js": "John Adams"
    },
    "qid_topic_entity": {
      "Q11806": "John Adams"
    },
    "NoisyQuestion": "what state did jhon adams live in?"
  },
  {
    "QuestionId": "WebQTest-717",
    "RawQuestion": "what timezone is tucson arizona in right now?",
    "ProcessedQuestion": "what timezone is tucson arizona in right now",
    "Parses": [
      {
        "ParseId": "WebQTest-717.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fr0t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fr0t ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "tucson arizona",
        "TopicEntityName": "Tucson",
        "TopicEntityMid": "m.0fr0t",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hczc",
            "EntityName": "Mountain Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0fr0t": "Tucson"
    },
    "qid_topic_entity": {
      "Q18575": "Tucson"
    },
    "NoisyQuestion": "what timezone is tucson arizona in rihgt now?"
  },
  {
    "QuestionId": "WebQTest-296",
    "RawQuestion": "what kind of government does libya have today?",
    "ProcessedQuestion": "what kind of government does libya have today",
    "Parses": [
      {
        "ParseId": "WebQTest-296.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gqr ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "libya",
        "TopicEntityName": "Libya",
        "TopicEntityMid": "m.04gqr",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02tz3y",
            "EntityName": "Provisional government"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0glnsx",
            "EntityName": "Parliamentary republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04gqr": "Libya"
    },
    "qid_topic_entity": {
      "Q1016": "Libya"
    },
    "NoisyQuestion": "what kind of government does libya have today?"
  },
  {
    "QuestionId": "WebQTest-172",
    "RawQuestion": "what do you call members of the senate?",
    "ProcessedQuestion": "what do you call members of the senate",
    "Parses": [
      {
        "ParseId": "WebQTest-172.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07t58)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07t58 ns:government.governmental_body.members ?y .\n?y ns:government.government_position_held.basic_title ?x .\n}\n",
        "PotentialTopicEntityMention": "senate",
        "TopicEntityName": "United States Senate",
        "TopicEntityMid": "m.07t58",
        "InferentialChain": [
          "government.governmental_body.members",
          "government.government_position_held.basic_title"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01hvfh",
            "EntityName": "President of the Senate"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01t7n9",
            "EntityName": "State Senator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025whr1",
            "EntityName": "Chief of staff"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02p31rg",
            "EntityName": "President pro tempore"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.048zv9l",
            "EntityName": "Senator"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05k99t",
            "EntityName": "Senate majority leader"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07t58": "United States Senate"
    },
    "qid_topic_entity": {
      "Q66096": "United States Senate"
    },
    "NoisyQuestion": "what do you call members of the senat?"
  },
  {
    "QuestionId": "WebQTest-1478",
    "RawQuestion": "who are the 9 justices of the supreme court 2011?",
    "ProcessedQuestion": "who are the 9 justices of the supreme court 2011",
    "Parses": [
      {
        "ParseId": "WebQTest-1478.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "Need Time Period"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07sz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07sz1 ns:law.court.judges ?y .\n?y ns:law.judicial_tenure.judge ?x .\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.from_date ?sk0} || \nEXISTS {?y ns:law.judicial_tenure.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.to_date ?sk2} || \nEXISTS {?y ns:law.judicial_tenure.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "supreme court",
        "TopicEntityName": "Supreme Court of the United States",
        "TopicEntityMid": "m.07sz1",
        "InferentialChain": [
          "law.court.judges",
          "law.judicial_tenure.judge"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2011-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "law.judicial_tenure.from_date",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2011-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "law.judicial_tenure.to_date",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2011-01-01",
          "End": "2011-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "2011"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_4j",
            "EntityName": "Clarence Thomas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0166zk",
            "EntityName": "Antonin Scalia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016m0v",
            "EntityName": "Stephen Breyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0199pk",
            "EntityName": "Ruth Bader Ginsburg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019s7r",
            "EntityName": "Anthony Kennedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gnxk",
            "EntityName": "Samuel Alito"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.066vhq",
            "EntityName": "John Roberts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06lnfm",
            "EntityName": "Elena Kagan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06lvrr",
            "EntityName": "Sonia Sotomayor"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07sz1": "Supreme Court of the United States"
    },
    "qid_topic_entity": {
      "Q11201": "Supreme Court of the United States"
    },
    "NoisyQuestion": "who are the 9 justices of the supreme court 2011?"
  },
  {
    "QuestionId": "WebQTest-1902",
    "RawQuestion": "what year was hitler was born?",
    "ProcessedQuestion": "what year was hitler was born",
    "Parses": [
      {
        "ParseId": "WebQTest-1902.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:people.person.date_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "hitler",
        "TopicEntityName": "Adolf Hitler",
        "TopicEntityMid": "m.07_m9_",
        "InferentialChain": [
          "people.person.date_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "1889-04-20",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07_m9_": "Adolf Hitler"
    },
    "qid_topic_entity": {
      "Q352": "Adolf Hitler"
    },
    "NoisyQuestion": "what year was hitley was born?"
  },
  {
    "QuestionId": "WebQTest-1887",
    "RawQuestion": "what is the name of the currency used in switzerland?",
    "ProcessedQuestion": "what is the name of the currency used in switzerland",
    "Parses": [
      {
        "ParseId": "WebQTest-1887.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mzp ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "switzerland",
        "TopicEntityName": "Switzerland",
        "TopicEntityMid": "m.06mzp",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_h4b",
            "EntityName": "Swiss franc"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06mzp": "Switzerland"
    },
    "qid_topic_entity": {
      "Q39": "Switzerland"
    },
    "NoisyQuestion": "what is the name of the currency used in switzeraland?"
  },
  {
    "QuestionId": "WebQTest-1744",
    "RawQuestion": "what team does josh hamilton play for?",
    "ProcessedQuestion": "what team does josh hamilton play for",
    "Parses": [
      {
        "ParseId": "WebQTest-1744.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08zxm9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08zxm9 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "josh hamilton",
        "TopicEntityName": "Josh Hamilton",
        "TopicEntityMid": "m.08zxm9",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wmvz",
            "EntityName": "Los Angeles Angels of Anaheim"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.08zxm9": "Josh Hamilton"
    },
    "qid_topic_entity": {
      "Q716346": "Josh Hamilton"
    },
    "NoisyQuestion": "what team does josh hamiltion play for?"
  },
  {
    "QuestionId": "WebQTest-1483",
    "RawQuestion": "what is the political system in germany?",
    "ProcessedQuestion": "what is the political system in germany",
    "Parses": [
      {
        "ParseId": "WebQTest-1483.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "germany",
        "TopicEntityName": "Germany",
        "TopicEntityMid": "m.0345h",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0drnm",
            "EntityName": "Representative democracy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0glnsx",
            "EntityName": "Parliamentary republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j729",
            "EntityName": "Federal republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0345h": "Germany"
    },
    "qid_topic_entity": {
      "Q183": "Germany"
    },
    "NoisyQuestion": "what is the political system in germany?"
  },
  {
    "QuestionId": "WebQTest-673",
    "RawQuestion": "where did robert kardashian go to college?",
    "ProcessedQuestion": "where did robert kardashian go to college",
    "Parses": [
      {
        "ParseId": "WebQTest-673.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01x48v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01x48v ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "robert kardashian",
        "TopicEntityName": "Robert Kardashian",
        "TopicEntityMid": "m.01x48v",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rky4",
            "EntityName": "University of San Diego"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05pyvz",
            "EntityName": "University of San Diego School of Law"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065y4w7",
            "EntityName": "University of Southern California"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01x48v": "Robert Kardashian"
    },
    "qid_topic_entity": {
      "Q1816737": "Robert Kardashian"
    },
    "NoisyQuestion": "where did robert kardashian go to colleg?"
  },
  {
    "QuestionId": "WebQTest-604",
    "RawQuestion": "what kind of music did jimi hendrix play?",
    "ProcessedQuestion": "what kind of music did jimi hendrix play",
    "Parses": [
      {
        "ParseId": "WebQTest-604.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vsy3q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vsy3q ns:music.artist.genre ?x .\n}\n",
        "PotentialTopicEntityMention": "jimi hendrix",
        "TopicEntityName": "Jimi Hendrix",
        "TopicEntityMid": "m.01vsy3q",
        "InferentialChain": [
          "music.artist.genre"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0155w",
            "EntityName": "Blues"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02l96k",
            "EntityName": "Acid rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02yv6b",
            "EntityName": "Blues rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03lty",
            "EntityName": "Heavy metal"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05w3f",
            "EntityName": "Psychedelic rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06by7",
            "EntityName": "Rock music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06j6l",
            "EntityName": "Rhythm and blues"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08jyyk",
            "EntityName": "Experimental rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09nwwf",
            "EntityName": "Funk rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cgxt",
            "EntityName": "Psychedelia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dl5d",
            "EntityName": "Progressive rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0xhtw",
            "EntityName": "Hard rock"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01vsy3q": "Jimi Hendrix"
    },
    "qid_topic_entity": {
      "Q5928": "Jimi Hendrix"
    },
    "NoisyQuestion": "what kind of music did jimi hendrix play?"
  },
  {
    "QuestionId": "WebQTest-1510",
    "RawQuestion": "what are staffordshire terriers?",
    "ProcessedQuestion": "what are staffordshire terriers",
    "Parses": [
      {
        "ParseId": "WebQTest-1510.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01kv93)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01kv93 ns:biology.animal_breed.breed_of ?x .\n}\n",
        "PotentialTopicEntityMention": "staffordshire",
        "TopicEntityName": "Staffordshire Bull Terrier",
        "TopicEntityMid": "m.01kv93",
        "InferentialChain": [
          "biology.animal_breed.breed_of"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bt9lr",
            "EntityName": "Dog"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1510.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01kv93)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01kv93 ns:biology.organism_classification.higher_classification ?x .\n}\n",
        "PotentialTopicEntityMention": "staffordshire",
        "TopicEntityName": "Staffordshire Bull Terrier",
        "TopicEntityMid": "m.01kv93",
        "InferentialChain": [
          "biology.organism_classification.higher_classification"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bt9lr",
            "EntityName": "Dog"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01kv93": "Staffordshire Bull Terrier"
    },
    "qid_topic_entity": {
      "Q39285": "Staffordshire Bull Terrier"
    },
    "NoisyQuestion": "what are staffordshires terriers?"
  },
  {
    "QuestionId": "WebQTest-739",
    "RawQuestion": "what pieces of music did claude debussy compose?",
    "ProcessedQuestion": "what pieces of music did claude debussy compose",
    "Parses": [
      {
        "ParseId": "WebQTest-739.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vvy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vvy ns:music.composer.compositions ?x .\n}\n",
        "PotentialTopicEntityMention": "claude debussy",
        "TopicEntityName": "Claude Debussy",
        "TopicEntityMid": "m.01vvy",
        "InferentialChain": [
          "music.composer.compositions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.11b821q1dm",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.120ldwp4",
            "EntityName": "Lindaraja"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.1234bndn",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.1234nfvz",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.1ym_l6xb0",
            "EntityName": "Le promenoir des deux amants"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_5_6yg",
            "EntityName": "Le Martyre de Saint-Sébastien: I. La cour des lys: N°2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_5yrhj",
            "EntityName": "Le Martyre de Saint-Sébastien: II. La chambre magique: N°1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_5zc3z",
            "EntityName": "Études, L. 136: XI. Pour les arpèges composés"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_5zhxw",
            "EntityName": "Pelléas et Mélisande: Act II, Scene II. \\\"Je suis ... je suis malade ici\\\" (Mélisande, Golaud)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_5zm61",
            "EntityName": "Chansons de Bilitis, L. 90: La Flûte de Pan «Pour le jour des Hyacinthies»"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_5zvq3",
            "EntityName": "Chansons de Bilitis, L. 90: «La Chevelure «Il m'a dit «Cette nuit d'ai rêvé»»"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6_zhg",
            "EntityName": "Dans le jardin, L. 78, CD 107, mélodie pour voix et piano \\\"Je regardais dans le jardin\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_605jr",
            "EntityName": "Preludes, Book I: 6. Des pas sur la neige"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_60cr2",
            "EntityName": "Estampes II: La soir e dans Grenade"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_60czy",
            "EntityName": "Chansons de Bilitis, L. 90: Le Tombeau des naïades: «Le long du bois couvert de givre»"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_60q1h",
            "EntityName": "Petite Suite, L. 65, CD 71b, pour orchestre : I. En bateau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_61wmp",
            "EntityName": "Le promenoir des deux amants, L. 118, CD 129, mélodies pour voix et piano : I. \\\"Auprès de cette grotte sombre\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_626vh",
            "EntityName": "My Reverie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_62vb5",
            "EntityName": "Proses lyriques, L. 84, CD 90 : IV. De Soirs, mélodie \\\"Dimanche sur les villes\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_63vyz",
            "EntityName": "Trio in G Major for Violin, Cello and Piano: II. Scherzo - Intermezzo. Moderato con allegro"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6478t",
            "EntityName": "La Damoiselle élue, L. 62, CD 69, poème lyrique pour voix de femmes, solo, chœur et orchestre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_647ch",
            "EntityName": "Études, L. 136: V. Pour les octaves"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_64jsh",
            "EntityName": "Six épigraphes antiques, L. 131: III. Pour que la nuit soit propice"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_64mfg",
            "EntityName": "Preludes, Book II: 7. La Terrasse des audiences du clair de lune"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_65d7k",
            "EntityName": "En blanc et noir: II. Lent, sombre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_667ql",
            "EntityName": "Quatuor à cordes en sol mineur, op. 10, L. 85, CD 91 : IV. Très modéré"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_66lnh",
            "EntityName": "Suite bergamasque, L. 75, CD 82a, pour orchestre : III. Clair de lune"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_66pb7",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 3. Les Contes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6721p",
            "EntityName": "Le Martyre de Saint-Sébastien: I. La cour des lys: N°1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_67q33",
            "EntityName": "Quatuor à cordes en sol mineur, op. 10, L. 85, CD 91 : II. Assez vif et bien rythmé"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_67qq5",
            "EntityName": "Le Martyre de Saint-Sébastien: III. Le concile des faux dieux: N°4"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_67yr1",
            "EntityName": "Deux arabesques, L. 66, CD 74, pour piano : No. 2 en sol majeur, Allegretto scherzando"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6857g",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 6. Bilitis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_68qzd",
            "EntityName": "Pantomime, L. 31, CD 47, mélodie pour voix et piano \\\"Pierrot, qui n’a rien d’un Clitandre\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_69yfv",
            "EntityName": "Sonata for flute, viola and harp, L. 137: II. Interlude"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6b4px",
            "EntityName": "Preludes, Book II: 3. La Puerta del Vino"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6bjlf",
            "EntityName": "Estampes, L. 100: III. Jardins sous la pluie. Net et vif"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6c184",
            "EntityName": "Pelléas et Mélisande: Act I, Scene II. \\\"Grand-père, j'ai reçu en même temps que la lettre de mon frère...\\\" (Pelléas, Arkel, Geneviève)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6c7fn",
            "EntityName": "Three Preludes: Feuilles mortes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6cz57",
            "EntityName": "Pelléas et Mélisande: Act IV, Scene II. \\\"Oh! Cette pierre est lourde ...\\\" (Yniold, Le Berger)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6d6lm",
            "EntityName": "Pelléas et Mélisande: Act III, Scene II. \\\"Prenez garde; par ici, par ici\\\" (Golaud, Pelléas)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6dtbk",
            "EntityName": "Syrinx huilulle, L 129"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6dyl4",
            "EntityName": "Pelléas et Mélisande - Concert Suite: Acte V. Une chambre dans le château"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6f191",
            "EntityName": "Pelléas et Mélisande: Act III, Scene I. \\\"Oh! Oh! Mes cheveux descendent de la tour!\\\" (Mélisande, Pelléas)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6g83_",
            "EntityName": "Suite bergamasque, L. 75, CD 82b, pour orchestre : III. Clair de lune"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6glx1",
            "EntityName": "Preludes, Book II: 1. Brouillards"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6gs5y",
            "EntityName": "Pelléas et Mélisande: Act I, Scene II. \\\"Voici ce qu'il écrit à son frère Pelléas: 'Un soir, je l'ai trouvée'\\\" (Geneviève)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6hj8p",
            "EntityName": "Trio in G Major for Violin, Cello and Piano: I. Andantino con moto allegro"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6jtms",
            "EntityName": "Pelléas et Mélisande: Act IV, Scene I. \\\"Apporte-la\\\" (Golaud, Arkel, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6k3cr",
            "EntityName": "Children's Corner, L. 113: V. The Little Shepherd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6lxl_",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 8. Les Courtisanes égyptiennes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6m_m5",
            "EntityName": "Pelléas et Mélisande: Act I, Scene III. \\\"Hoé! Hisse hoé! Hoé! Hoé!\\\" (Chœr, Mélisande, Pelléas, Geneviève)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6mn47",
            "EntityName": "Petite Suite, L. 65, CD 71a, pour piano à 4 mains : IV. Ballet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6n8l_",
            "EntityName": "Études, L. 136: II. Pour les tierces"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6q7bm",
            "EntityName": "Images pour orchestre, L 122: II. Iberia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6q7bt",
            "EntityName": "Iberia No. 2 from \\\"Images\\\" for Orchestra: II. The Perfumes of the Night"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6qhbw",
            "EntityName": "Three Preludes: Ce qu'a vu le vent de l'ouest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6ttlh",
            "EntityName": "3 Preludes from Book II: V. Bruyerès. Calme"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6vjgd",
            "EntityName": "Pelléas et Mélisande: Act V. \\\"Qu'avez-vous fait? Vous allez la tuer\\\" (Arkel, Golaud, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6vxqc",
            "EntityName": "Children's Corner, L. 113: III. Serenade for the Doll"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6x4r0",
            "EntityName": "Proses lyriques, L. 84, CD 90 : I. De Rêve, mélodie \\\"La nuit a des douceurs de femme\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_6yrsf",
            "EntityName": "Clair de lune Samba"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_704z6",
            "EntityName": "Pelléas et Mélisande: Act II, Scene II. \\\"Ah! Ah! Tout va bien, ce la ne sera rien\\\" (Golaud, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_70swk",
            "EntityName": "Children's Corner - I. Doctor Gradus ad Parnassum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7203v",
            "EntityName": "Cinq poèmes de Baudelaire, L. 64, CD 70: II. Harmonie du soir"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7363q",
            "EntityName": "Pierrot"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_74qc9",
            "EntityName": "Ariettes oubliées, L. 60, CD 63a : IV. Paysages belges. Chevaux de bois, mélodie pour voix et piano \\\"Tournez, tournez, bons chevaux de bois\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_74qkz",
            "EntityName": "Le Martyre de Saint-Sébastien: II. La chambre magique: N°2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_75kkp",
            "EntityName": "Études, L. 136: I. Pour les « cinq doigts » d'après monsieur Czerny"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_785n5",
            "EntityName": "Pelléas et Mélisande: Act III, Scene IV. \\\"Viens, nous allons nous asseoir ici, Yniold\\\" (Golaud, Yniold)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_79_89",
            "EntityName": "Cello sonata in D minor: I. Prologue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7dpnl",
            "EntityName": "Trois Ballades de François Villon, L. 119: I. Ballade de Villon à s'Amye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7gzrq",
            "EntityName": "Fêtes galantes (Premier recueil), L. 80, CD 86 : III. Clair de lune, mélodie pour voix et piano \\\"Votre âme est un paysage choisi\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7jv18",
            "EntityName": "Trois Ballades de François Villon, L. 119: II. Ballade que Villon feit à la requeste de sa mère pour prier Nostre-Dame"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7k80b",
            "EntityName": "En blanc et noir: I. Avec emportement"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7l3nl",
            "EntityName": "Pelléas et Mélisande: Act II, Scene I. \\\"Vous ne savez pas où je vous ai menée?\\\" (Pelléas, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7l7b6",
            "EntityName": "Nuit d’étoiles, L. 4, CD 2, mélodie pour voix et piano \\\"Nuit d’étoiles, sous tes voiles\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7l7wd",
            "EntityName": "Pelléas et Mélisande: Act V. \\\"Non, non, nous n'avons pas été coupables\\\" (Mélisande, Golaud)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7mtb0",
            "EntityName": "Nocturnes, L. 91, CD 98: III. Sirènes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7nk_p",
            "EntityName": "Petite Suite: Menuet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7pj_2",
            "EntityName": "La Romance d’Ariel, L. 54, CD 58, mélodie pour voix et piano \\\"Au long de ces montagnes douces\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7pmfh",
            "EntityName": "Proses lyriques, L. 84, CD 90 : III. De Fleurs, mélodie \\\"Dans l’ennui si désolément vert\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7qyt2",
            "EntityName": "Six épigraphes antiques, L. 131: VI. Pour remercier la pluie au matin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7t946",
            "EntityName": "Preludes, Book II: 8. Ondine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7t9jk",
            "EntityName": "Pelléas et Mélisande: Act I, Scene I. \\\"Je ne pourrai plus sortir de cette forêt\\\" (Golaud, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7tsmn",
            "EntityName": "Le Martyre de Saint-Sébastien: IV. Le laurier blessé: N°1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7tsqc",
            "EntityName": "Sonata for flute, viola and harp, L. 137: III. Finale"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7w7pf",
            "EntityName": "Preludes, Book I: 1. Danseuses de Delphes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7x7ck",
            "EntityName": "Children's Corner, L. 113: IV. The Snow is Dancing"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_7yxtv",
            "EntityName": "Pelléas et Mélisande: Act V. \\\"Ouvrez la fenêtre, ouvrez la fenêtre ...\\\" (Mélisande, Arkel, Le médecin)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_813fq",
            "EntityName": "Regret, L. 55, CD 59, mélodie pour voix et piano \\\"Devant le ciel d’été, tiède et calme\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_fk14v",
            "EntityName": "Star Gazers Theme Song"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hph7q",
            "EntityName": "Suite bergamasque, L. 75, CD 82 : III. Clair de lune, pour violon et piano"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hq905",
            "EntityName": "Études, L. 136: VII. Pour les degrés chromatiques"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hqkc2",
            "EntityName": "Les cloches"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hr0pw",
            "EntityName": "Pour le piano: Sarabande"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hrj54",
            "EntityName": "L’Enfant prodigue : 2b. Pourquoi m'as-tu quittée (Lia)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hrz7g",
            "EntityName": "Pelléas et Mélisande - Concert Suite: Acte III, scène 2. Les souterrains du château / Acte IV, scène 2. Un appartement dans le château"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hsrdk",
            "EntityName": "Pelléas et Mélisande: Act IV, Scene I. \\\"Où vas-tu? Il faut que je te parle ce soir\\\" (Pelléas, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hstxy",
            "EntityName": "Romance (Deux Romances, No. 2, 1891)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hsxp8",
            "EntityName": "Ariettes oubliées, L. 60, CD 63a : V. Aquarelles, 1. Green, mélodie pour voix et piano \\\"Voici des fruits, des fleurs, des feuilles\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ht0n6",
            "EntityName": "Ariettes oubliées, L. 60, CD 63a : III. Le rossignol qui, du haut d’une branche, mélodie pour voix et piano \\\"L’ombre des arbres dans la rivière embrumée\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hthyg",
            "EntityName": "Pelléas et Mélisande: Act I, Scene III. \\\"Il fait sombre dans les jardins\\\" (Mélisande, Geneviève, Pelléas)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_htp_j",
            "EntityName": "Préludes, Livre II, L. 123: IX. Hommage à S. Pickwick Esq. P.P.M.P.C.. Grave"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hv4js",
            "EntityName": "Trois Chansons de France, L. 102, CD 115: I. Rondel: Le temps a laissé son manteau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hv57k",
            "EntityName": "Iberia No. 2 from \\\"Images\\\" for Orchestra: I. Through the Streets and Roads"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hvvsj",
            "EntityName": "Three Preludes: Feux d'artifice"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hvx8w",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 1. Chant pastoral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hwd77",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 7. Le Tombeau sans nom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hwmys",
            "EntityName": "En blanc et noir, L. 134, CD 142"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hxw83",
            "EntityName": "Sonata for flute, viola and harp, L. 137: I. Pastorale"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hyr_4",
            "EntityName": "Études, L. 136: VIII. Pour les agréments"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hyxyy",
            "EntityName": "Prelude (From Suite Bergamasque)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hyzjt",
            "EntityName": "Le Martyre de Saint-Sébastien, fragments symphoniques: I. La Cour de lys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hzbwx",
            "EntityName": "Le Martyre de Saint-Sébastien: V. Le paradis: N°1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hzhpj",
            "EntityName": "Suite bergamasque, L. 75, CD 82, pour orchestre : III. Clair de lune"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_hzt3d",
            "EntityName": "III. Le Vent dans la plaine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j_367",
            "EntityName": "Le Martyre de Saint-Sébastien, fragments symphoniques: IV. Le Bon Pasteur"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j_9fv",
            "EntityName": "Trois Mélodies, L. 81, CD 85, pour une voix avec accompagnement de piano : I. La mer est plus belle que les cathédrales."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j_dcn",
            "EntityName": "Sonate pour violoncelle et piano: III. Finale"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j_xxl",
            "EntityName": "Pelléas et Mélisande: Act I, Scene I. \\\"Qu'est-ce qui brille ainsi, au fond de l'eau?\\\" (Golaud, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j10m0",
            "EntityName": "Études, L. 136: IX. Pour les notes répétées"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j125r",
            "EntityName": "Nocturnes, L 91: II. Fêtes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j18my",
            "EntityName": "Petite Suite, L. 65, CD 71, pour violon et piano : III. Menuet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j1vqk",
            "EntityName": "Trois Chansons de France, L. 102: II. La Grotte: Auprès de cette grotte sombre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j1ysx",
            "EntityName": "Le promenoir des deux amants, L. 118, CD 129, mélodies pour voix et piano"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j2cwc",
            "EntityName": "Pelléas et Mélisande: Act V. \\\"Ce n'est pas de cette petite blessure qu'elle peut mourir ...\\\" (Le médecin, Arkel, Golaud)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j3kw_",
            "EntityName": "Petite Suite, L. 65, CD 71b, pour orchestre : IV. Ballet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j42wt",
            "EntityName": "Préludes, Livre II, L. 123: XI. Les tierces alternées. Modérément animé"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j49vq",
            "EntityName": "Pour le piano, L. 95: I. Prélude. À Mademoiselle M.W. de Romilly. Assez animé et très rythmé - Tempo di cadenza - Tempo I"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j4b19",
            "EntityName": "Nocturnes, L 91: III. Sirènes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j52k3",
            "EntityName": "Cinq poèmes de Baudelaire, L. 64, CD 70: V. La Mort des amants"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j5stf",
            "EntityName": "Sonate pour violon et piano en sol mineur, L. 140"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j6h8x",
            "EntityName": "Le Martyre de Saint-Sébastien: III. Le concile des faux dieux: N°5"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j6n7b",
            "EntityName": "Cinq poèmes de Baudelaire, L. 64, CD 70: IV. Recueillement"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j7zrp",
            "EntityName": "Fêtes galantes II, L. 104: I. Les Ingénus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j8c26",
            "EntityName": "Études, L. 136: XII. Pour les accords"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j8hpw",
            "EntityName": "Fêtes galantes II, L. 104: III. Colloque sentimental"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j8k40",
            "EntityName": "Preludes, Book I: 2. Voiles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j93t2",
            "EntityName": "Pelléas et Mélisande: Act III, Scene I. \\\"Je les noue, je les noue aux branches du saule\\\" (Pelléas, Mélisande, Golaud)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j986w",
            "EntityName": "Petite Suite, L. 65, CD 71a, pour piano à 4 mains : II. Cortège"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j98ks",
            "EntityName": "Études, L. 136: IV. Pour les sixtes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j99gk",
            "EntityName": "Sonate pour violoncelle et piano: II. Sérénade"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_j9qcf",
            "EntityName": "Le Martyre de Saint-Sébastien: II. La chambre magique: N°3"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jb7d3",
            "EntityName": "Le Martyre de Saint-Sébastien: IV. Le laurier blessé: N°2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jbfl3",
            "EntityName": "Streichquartett in g-Moll, Op. 10: Andantino, doucement expressif (Endress-Quartett)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jclnm",
            "EntityName": "Préludes, Livre 1, L. 117 No. 9: La sérénade interrompue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jcpgz",
            "EntityName": "Le Martyre de Saint-Sébastien, fragments symphoniques: II. Danse extatique et final du premier acte"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jcyrt",
            "EntityName": "Engulfed Cathedral (Debussy)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jdffp",
            "EntityName": "Sonata for Violin and Piano in G Minor, L 140: II. Intermède: fantasque et léger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jdgg0",
            "EntityName": "Preludes, Book II: 2. Feuilles mortes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jf98_",
            "EntityName": "Musique pour “Le Roi Lear”, L. 107: Fanfare d’ouverture"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jfm84",
            "EntityName": "Prelude No. 8: The Girl with the Flaxen Hair"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jg6m7",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 2. Les Comparaisons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jhxly",
            "EntityName": "En blanc et noir: III. Scherzando"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jkghl",
            "EntityName": "Preludes, Book II: 6. General Lavine - Eccentric"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jlbpm",
            "EntityName": "Première Rapsodie pour clarinette en si bémol, avec accompagnement d'orchestre, L. 116, CD 124b"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jm5dj",
            "EntityName": "Rondel chinois, L. 17, CD 11, mélodie pour voix et piano \\\"Sur le lac bordé d’azalée\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jnmw5",
            "EntityName": "Suite Bergamasque: Passepied: Allegretto ma non troppo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jp2jg",
            "EntityName": "Pelléas et Mélisande: Act III, Scene I. \\\"Mes longs cheveux descendent\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jqdbr",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 9. L'Eau pure du bassin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jqhyb",
            "EntityName": "Pelléas et Mélisande: Act II, Scene II. \\\"Tiens, où est l'anneau que je t'avais donné?\\\" (Golaud, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jqjsm",
            "EntityName": "Pelléas et Mélisande: Act V. \\\"Attention... attention\\\" (Arkel, Le médecin)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jqsxk",
            "EntityName": "Le Martyre de Saint-Sébastien: III. Le concile des faux dieux: N°7"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jr4pp",
            "EntityName": "Petite Suite, L. 65, CD 71a, pour piano à 4 mains : I. En bateau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_js17c",
            "EntityName": "Le Martyre de Saint-Sébastien: III. Le concile des faux dieux: N°3"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_js5jc",
            "EntityName": "Le Martyre de Saint-Sébastien: III. Le concile des faux dieux: N°6"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jt121",
            "EntityName": "Pelléas et Mélisande: Act IV, Scene I. \\\"Maintenant que le père de Pelléas est sauvé ...\\\" (Arkel, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jtc90",
            "EntityName": "Suite: Pour le Piano, L.95: III. Toccata (vif)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jv13d",
            "EntityName": "Pelléas et Mélisande: Act III, Scene III. \\\"Ah! Je respire enfin!\\\" (Pelléas, Golaud)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jvgb9",
            "EntityName": "Ariettes oubliées, L. 60, CD 63a : I. Le vent dans la plaine suspend son haleine, mélodie pour voix et piano \\\"C'est l'extase langoureuse\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jvmy7",
            "EntityName": "Le promenoir des deux amants, L. 118, CD 129, mélodies pour voix et piano : II. \\\"Crois mon conseil, chère Climène\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jws40",
            "EntityName": "Preludes, Book I: 7. Ce qu'a vu le vent d'ouest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jxdsw",
            "EntityName": "La Mer: II. Jeux de vagues"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jxk74",
            "EntityName": "Iberia No. 2 from \\\"Images\\\" for Orchestra: III. The Morning of a Holiday"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jy0gc",
            "EntityName": "Carry"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jy4lv",
            "EntityName": "Nocturnes, L. 91, CD 98: I. Nuages"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jy8nh",
            "EntityName": "Petite Suite, L. 65, CD 71b, pour orchestre : II. Cortège"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jyd58",
            "EntityName": "Préludes, Livre I, L. 117: VIII. La fille aux cheveux de lin. Très calme et doucement expressif"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jykjp",
            "EntityName": "Dialogue of the Wind and the Sea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_jzrlf",
            "EntityName": "Spleen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k01yx",
            "EntityName": "En sourdine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k0d1c",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 11. Le Souvenir de Mnasidika"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k0srm",
            "EntityName": "From Dawn Till Noon on the Sea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k0t4j",
            "EntityName": "Pagodes from Estampes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k0vb_",
            "EntityName": "La Belle au bois dormant, L. 74, CD 81, mélodie \\\"Des trous à son pourpoint vermeil\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k29xg",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 10. La Danseuse aux crotales"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k2hh2",
            "EntityName": "Preludes, Book II: 12. Feux d'artifice"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k34tp",
            "EntityName": "Fêtes galantes (Premier recueil), L. 80, CD 86 : II. Fantoches, mélodie pour voix et piano \\\"Scaramouche et Pulcinella\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k3h6d",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 4. Chanson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k3vd9",
            "EntityName": "Le promenoir des deux amants, L. 118, CD 129, mélodies pour voix et piano : III. \\\"Je tremble en voyant ton visage\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k3x0t",
            "EntityName": "Nocturnes, L. 91, CD 98: II. Fêtes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k3zl4",
            "EntityName": "Le Martyre de Saint-Sébastien: III. Le concile des faux dieux: N°1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k42mz",
            "EntityName": "Préludes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k4g8h",
            "EntityName": "Études, L. 136: III. Pour les quartes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k4h6f",
            "EntityName": "Pelléas et Mélisande - Concert Suite: Acte I. Une forêt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k4lrp",
            "EntityName": "Coquetterie posthume, L. 39, CD 50, mélodie pour voix et piano \\\"Quand je mourrai, que l’on me mette\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k4v8w",
            "EntityName": "Ariettes oubliées, L. 60, CD 63a : VI. Aquarelles, 2. Spleen, mélodie pour voix et piano \\\"Les roses étaient toutes rouges\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k4z7f",
            "EntityName": "Children's Corner, L. 113: V. The Little Shepherd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k5d2x",
            "EntityName": "Images pour orchestre, L 122: III. Rondes de printemps"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k630v",
            "EntityName": "Apparition, L. 53, CD 57, mélodie pour voix et piano \\\"La lune s’attristait. Des séraphins en pleurs\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k63t3",
            "EntityName": "Arabesque 1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k673s",
            "EntityName": "Ariettes oubliées, L. 60, CD 63a : II. Il pleut doucement sur la ville, mélodie pour voix et piano \\\"Il pleure dans mon cœur comme il pleure sur la ville\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k737_",
            "EntityName": "Petite Suite, L. 65, CD 71b, pour orchestre : III. Menuet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k73zm",
            "EntityName": "Children's Corner, L. 113: II. Jimbo's Lullaby"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k7d0l",
            "EntityName": "Petite Suite, L. 65, CD 71a, pour piano à 4 mains"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_k7r_r",
            "EntityName": "Nocturnes, L 91: I. Nuages"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kbxxp",
            "EntityName": "Cinq poèmes de Baudelaire, L. 64, CD 70: I. Le Balcon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kc5_1",
            "EntityName": "Préludes, Livre II, L. 123: IV. «Les fées sont d'exquises danseuses». Rapide et léger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kc9vf",
            "EntityName": "Pelléas et Mélisande: Act V. \\\"Qu'y-a-t-il? Qu'est-ce que toutes ces femmes viennent faire ici?\\\" (Golaud, Le médecin, Arkel)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kcx_z",
            "EntityName": "Pelléas et Mélisande: Act III, Scene IV. \\\"Ah! Ah! Petite mère a allumé sa lampe\\\" (Yniold, Golaud)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kdtrr",
            "EntityName": "Le Martyre de Saint-Sébastien, fragments symphoniques: III. La Passion"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kf9wt",
            "EntityName": "N° 5: The Film: Clair de Lune"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kfrmb",
            "EntityName": "Le Martyre de Saint-Sébastien, L. 124: Prologue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kfwhr",
            "EntityName": "Preludes, Book II: 10. Canope"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kfzpt",
            "EntityName": "Pelléas et Mélisande: Act III, Scene I. Une des tours du château"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kg5pr",
            "EntityName": "Le Martyre de Saint-Sébastien: III. Le concile des faux dieux: N°2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kggph",
            "EntityName": "Pelléas et Mélisande: Act IV, Scene II. \\\"Quel est ce bruit? On ferme les portes\\\" (Pelléas, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kgvk3",
            "EntityName": "Proses lyriques, L. 84, CD 90 : II. De Grève, mélodie \\\"Sur la mer les crépuscules tombent\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kh_kk",
            "EntityName": "Sonata for Violin and Piano in G Minor, L 140: I. Allegro vivo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kh4ct",
            "EntityName": "Pelléas et Mélisande, L. 88, CD 93: Acte IV"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kh4ps",
            "EntityName": "Trois Chansons de France, L. 102: III. Rondel: Pour ce que Plaisance est morte"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kjyvx",
            "EntityName": "Pelléas et Mélisande: Act IV, Scene II. \\\"On dirait que ta voix a passé sur la mer au printemps!\\\" (Choeur, Mélisande, Pelléas, Geneviève)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kjz6p",
            "EntityName": "Children's Corner, L. 113: VI. Golliwogg's Cake-Walk"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kks2z",
            "EntityName": "Le Martyre de Saint-Sébastien: V. Le paradis: N°2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kkvmy",
            "EntityName": "Études, L. 136: X. Pour les sonorités opposées"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kljjn",
            "EntityName": "Études, L. 136: VI. Pour les huits doigts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_km12c",
            "EntityName": "Pelléas et Mélisande: Act II, Scene I. \\\"C'est au bord d'une fontaine aussi qu'il vous a trouvée?\\\" (Pelléas, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_km14z",
            "EntityName": "Fêtes galantes II, L. 104: II. Le Faune"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kmffq",
            "EntityName": "Pelléas et Mélisande: Act IV, Scene II. \\\"C'est le dernier soir ...\\\" (Pelléas, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_rk7bq",
            "EntityName": "Première Suite d’orchestre, L. 50, CD 46 : II. Ballet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_rkpdn",
            "EntityName": "Rêverie, L. 8, CD 3, mélodie pour voix et piano \\\"Le Zéphir à la douce haleine\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_rkyxc",
            "EntityName": "Romance, L. 43, CD 53, mélodie pour voix et piano \\\"Silence ineffable de l’heure\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_rn5wm",
            "EntityName": "Le Martyre de Saint-Sébastien, L. 124: Acte III \\\"Le Concile des faux dieux\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_rth63",
            "EntityName": "Première Suite d’orchestre, L. 50, CD 46 : III. Rêve"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_rv468",
            "EntityName": "La Fille aux cheveux de lin, L. 33, CD 15, mélodie pour voix et piano \\\"Sur la luzerne en fleur\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_rvrgg",
            "EntityName": "Première Suite d’orchestre, L. 50, CD 46 : I. Fête"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_rwh7q",
            "EntityName": "Première Suite d’orchestre, L. 50, CD 46 : IV. Bacchanale (Cortège et Bacchanale)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010_dtxz",
            "EntityName": "Trois chansons de Charles d'Orléans, pour chœur à quatre voix mixtes, L. 92, CD 99: III. \\\"Yver, vous n'estes qu'un vilain \\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010s18wn",
            "EntityName": "Bilitis: II. Pour un tombeau sans nom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010s8lf0",
            "EntityName": "Trois poèmes de Stéphane Mallarmé, L. 127, CD 135: III. Éventail \\\"Ô rêveuse pour que je plonge\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010sytyv",
            "EntityName": "Bilitis: IV. Pour la danseuse aux crotales"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010sz7qv",
            "EntityName": "Trois poèmes de Stéphane Mallarmé, L. 127, CD 135: I. Soupir \\\"Mon âme vers ton front où rêve, ô calme sœur\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010tnyxh",
            "EntityName": "Bilitis: VI. Pour remercier la pluie au matin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010tpkzw",
            "EntityName": "Trois poèmes de Stéphane Mallarmé, L. 127, CD 135: II. Placet futile \\\"Princesse! À jalouser le destin d'une Hébé\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010vft_p",
            "EntityName": "Bilitis: III. Pour que la nuit soit propice"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010xv_jw",
            "EntityName": "Khamma"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010y5t8h",
            "EntityName": "Clair de lune, L. 32, CD 45, mélodie pour voix et piano \\\"Votre âme est un paysage choisi\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010y6d7d",
            "EntityName": "My Reverie (Debussy's \\\"Reverie\\\")"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010yk19g",
            "EntityName": "Bilitis: V. Pour l'égyptienne"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010ylz79",
            "EntityName": "Trois chansons de Charles d'Orléans, pour chœur à quatre voix mixtes, L. 92, CD 99: II. \\\"Quand j'ay ouy le tabourin\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010z9pqn",
            "EntityName": "Rapsodie pour orchestre et saxophone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010zfkcw",
            "EntityName": "Bilitis: I. Pour invoquer Pan, dieu du vent d'été"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010zyg_m",
            "EntityName": "Petite Pièce"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01248h9t",
            "EntityName": "UTSUKUSHII YUUGURE"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0133nsl0",
            "EntityName": "Romance, L. 52, CD 56, mélodie pour voix et piano \\\"Voici que le printemps, ce fil léger d’avril\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0135ftry",
            "EntityName": "Paysage sentimental, L 45, CD 55, mélodie pour voix et piano \\\"Le ciel d’hiver si doux, si triste, si dormant\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0135s85z",
            "EntityName": "Chanson espagnole, L. 42, CD 49, duo pour 2 voix égales \\\"Nous venions de voir le taureau\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0135ycg0",
            "EntityName": "Triolet à Philis \\\"Zéphir\\\", L. 12, CD 19, mélodie pour voix et piano \\\"Si j’étais le zéphir ailé\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0136b801",
            "EntityName": "Musique, L. 44, CD 54, mélodie pour voix et piano \\\"La lune se levait, pure, mais plus glacée\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01381b1q",
            "EntityName": "Printemps, L. 61, CD 68a, suite symphonique en mi majeur pour 2 pianos et chœur"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01zprb",
            "EntityName": "Pelléas et Mélisande"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027kxq4",
            "EntityName": "Cello Sonata"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rtdzh",
            "EntityName": "String Quartet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.033nf5",
            "EntityName": "Children's Corner"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03c7ct9",
            "EntityName": "Pagodes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03c7cvp",
            "EntityName": "Jardins sous la pluie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cy7m0",
            "EntityName": "Voiles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cy7ps",
            "EntityName": "Ce qu'a vu le vent d'ouest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cy8t5",
            "EntityName": "Des pas sur la neige"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cy92g",
            "EntityName": "Hommage à S. Pickwick Esq. P.P.M.P.C."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03d7mtj",
            "EntityName": "Violin Sonata"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h2pvy",
            "EntityName": "Brouillards"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03r98g",
            "EntityName": "L'isle joyeuse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0409840",
            "EntityName": "Le Martyre de saint Sébastien"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.042cky",
            "EntityName": "Suite bergamasque"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047rcxb",
            "EntityName": "Études"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.053wty",
            "EntityName": "Syrinx"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b042d",
            "EntityName": "La chute de la maison Usher"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b2wv5",
            "EntityName": "Le diable dans le beffroi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b4_47",
            "EntityName": "La plus que lente"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b508d",
            "EntityName": "Rodrigue et Chimène"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05q7yst",
            "EntityName": "Première rhapsodie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06pzhs",
            "EntityName": "La mer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06w5rgn",
            "EntityName": "Pour le piano"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06y_gm",
            "EntityName": "Prelude to the Afternoon of a Faun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.071vr8",
            "EntityName": "Nocturnes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07k8v62",
            "EntityName": "Deux arabesques"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bb3zh0",
            "EntityName": "Children's Corner, L. 113 No. 5: The Little Shepherd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bb5lbr",
            "EntityName": "Children's Corner, L. 113 No. 6: Golliwog's Cake-walk"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bb5zrh",
            "EntityName": "Ballade (slave), L. 70, CD 78, pour piano"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cqw5w",
            "EntityName": "L'enfant prodigue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crjbd",
            "EntityName": "Jeux"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cxqwc",
            "EntityName": "Beau soir"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dq9b_",
            "EntityName": "Images pour orchestre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f44r_",
            "EntityName": "Reflets dans l'eau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g2x01",
            "EntityName": "Estampes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g3x2_",
            "EntityName": "Valse romantique"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8_7",
            "EntityName": "Les Angélus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8_g",
            "EntityName": "Proses Lyriques"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8_q",
            "EntityName": "Trois Chansons de France"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8_y",
            "EntityName": "Apparition"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8x_",
            "EntityName": "Chanson triste"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8x3",
            "EntityName": "Calme dans le demi-jour"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8xk",
            "EntityName": "L'échelonnement des haies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8xs",
            "EntityName": "La mer est plus belle"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8y6",
            "EntityName": "Le son du cor s'afflige"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8yf",
            "EntityName": "Chanson espagnole"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8yn",
            "EntityName": "Coquetterie posthume"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8yw",
            "EntityName": "Fête galante"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8z2",
            "EntityName": "Il dort encore"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8zb",
            "EntityName": "Le lilas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8zk",
            "EntityName": "Fleur des Blés"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm8zs",
            "EntityName": "La damoiselle élue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm92k",
            "EntityName": "Dans le Jardin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm93g",
            "EntityName": "La Belle au Bois dormant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm94c",
            "EntityName": "Ariettes Oubliées"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm94l",
            "EntityName": "Fêtes Galantes I"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm94t",
            "EntityName": "Fêtes Galantes II"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm965",
            "EntityName": "Trois Ballades de François Villon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm96g",
            "EntityName": "Trois Chansons de Charles d'Orléans"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm972",
            "EntityName": "Cinq Poèmes de Baudelaire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm97c",
            "EntityName": "La Romance d'Ariel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm97y",
            "EntityName": "Chansons de Bilitis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm98w",
            "EntityName": "De rêve"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm993",
            "EntityName": "De grève"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm99c",
            "EntityName": "De fleurs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm99m",
            "EntityName": "De soir"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9bl",
            "EntityName": "La grotte"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9bv",
            "EntityName": "Pour ce que Plaisance est morte"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9cf",
            "EntityName": "Le temps a laissé son manteau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9dc",
            "EntityName": "Trois Poèmes de Stéphane Mallarmé"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9dz",
            "EntityName": "Chevaux de bois"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9f6",
            "EntityName": "Green"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9fg",
            "EntityName": "C'est l'extase"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9fq",
            "EntityName": "L'ombre des arbres"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9gg",
            "EntityName": "En sourdine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9gq",
            "EntityName": "Clair de lune"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9gz",
            "EntityName": "Fantoches"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9hg",
            "EntityName": "Colloque sentimental"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9hq",
            "EntityName": "Le faune"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9hz",
            "EntityName": "Les ingénus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9j6",
            "EntityName": "Auprès de cette grotte sombre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9jg",
            "EntityName": "Crois mon conseil, chère Climène"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9kd",
            "EntityName": "Je tremble en voyant ton visage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9nf",
            "EntityName": "Ballade que Villon feit à la requeste de sa mère pour prier Nostre-Dame"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9ns",
            "EntityName": "Ballade de Villon a s'amye"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9p0",
            "EntityName": "Ballade des femmes de Paris"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9p8",
            "EntityName": "Dieu! qu'il la fait bon regarder!"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9pj",
            "EntityName": "Yver, vous n'estes qu'un vilain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9pt",
            "EntityName": "Quant j'ai ouy le tabourin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9q1",
            "EntityName": "Le balcon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9q9",
            "EntityName": "La mort des amants"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9qk",
            "EntityName": "Harmonie du soir"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9qt",
            "EntityName": "Le jet d'eau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9r1",
            "EntityName": "Recueillement"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9r9",
            "EntityName": "L'eau pure du bassin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9rk",
            "EntityName": "La Flûte de Pan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9rt",
            "EntityName": "Bilitis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9s1",
            "EntityName": "Le Tombeau des Naïades"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9s9",
            "EntityName": "La chevelure"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9sk",
            "EntityName": "La pluie au matin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9st",
            "EntityName": "Les Comparaisons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9t1",
            "EntityName": "Les contes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9t9",
            "EntityName": "La Danseuse aux crotales"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9tk",
            "EntityName": "Chant pastoral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9tt",
            "EntityName": "Les Courtisanes égyptiennes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9v1",
            "EntityName": "Chanson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9v9",
            "EntityName": "La Partie d'osselets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9vk",
            "EntityName": "Le Souvenir de Mnasidika"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9vt",
            "EntityName": "Le Tombeau sans nom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9xw",
            "EntityName": "Éventail"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9y3",
            "EntityName": "Placet futile"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbm9z7",
            "EntityName": "Soupir"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbg7",
            "EntityName": "Il pleure dans mon cœur"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmblg",
            "EntityName": "Noël des enfants qui n'ont plus de maisons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmblp",
            "EntityName": "Rondel chinois"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmblw",
            "EntityName": "Nuits blanches"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbm2",
            "EntityName": "Les papillons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbm9",
            "EntityName": "Nuit d'Étoiles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbmj",
            "EntityName": "Rêverie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbmr",
            "EntityName": "Les roses"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbmz",
            "EntityName": "Souhait"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbn5",
            "EntityName": "Mandoline"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbnm",
            "EntityName": "Sérénade"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbnv",
            "EntityName": "Pantomime"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbpd",
            "EntityName": "Rondeau: 'Fut-il jamais'"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbpm",
            "EntityName": "Tragédie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbqw",
            "EntityName": "Lia's Recitative and Aria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbr3",
            "EntityName": "Siméon's Recitative and Aria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbrc",
            "EntityName": "Nuit sans fin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbrm",
            "EntityName": "Lorsqu'elle est entrée"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbvm",
            "EntityName": "Paysage sentimental"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbvv",
            "EntityName": "Musique"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbw1",
            "EntityName": "Regret"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbw8",
            "EntityName": "Deux Romances"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmbx2",
            "EntityName": "Voici que le printemps"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gbmc06",
            "EntityName": "Romance"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hrc0vc",
            "EntityName": "Sonata for flute, viola and harp"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n5vf6t",
            "EntityName": "Petite Suite"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0sggpxq",
            "EntityName": "En blanc et noir"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0wf_vpd",
            "EntityName": "Fantaisie for piano and orchestra"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0wfy5sl",
            "EntityName": "Piano Trio"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zh1xxd",
            "EntityName": "Khamma: Scène 3"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zh5fb7",
            "EntityName": "Six épigraphes antiques, L. 131"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zh6nqy",
            "EntityName": "Cortège et Air de danse de \\\"L’Enfant prodigue\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zh8cfz",
            "EntityName": "Khamma: Scène 1. Le Temple intérieur du Grand-Dieu Amun-Ra –"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zh8g5x",
            "EntityName": "Mazurka, L. 67, CD 75, pour piano"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zh8j_z",
            "EntityName": "Les Elfes, CD 25, mélodie pour voix et piano \\\"Du sentier des bois aux daims familiers\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zhfddr",
            "EntityName": "Trois Mélodies, L. 81, CD 85, pour une voix avec accompagnement de piano : II. Le son du cor s’afflige vers les bois."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zhhl6q",
            "EntityName": "Deux danses pour Harpe, L. 103"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zhk1t8",
            "EntityName": "Two movements from \\\"L’Enfant prodigue\\\": Prélude"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zhk1wf",
            "EntityName": "Six épigraphes antiques, L. 131: V. Pour l'Égyptienne"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zhpnhw",
            "EntityName": "Ministrels for Cello and Piano"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zhsb53",
            "EntityName": "Étude retrouvée"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zhv3tc",
            "EntityName": "Printemps, L. 61, CD 68b : II. Modéré"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zhvgd9",
            "EntityName": "Six épigraphes antiques, L. 131: II. Pour un tombeau sans nom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zhzxkd",
            "EntityName": "Images, Livre 2, L. 111: No. 2. Et la lune descend sur le temple qui fut"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zj0y0p",
            "EntityName": "La Boîte à joujoux : III. 2e tableau. Le Champ de bataille"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zj155p",
            "EntityName": "Khamma: Au Mouvement –"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zj20cd",
            "EntityName": "Pièce pour le Vêtement du blessé (Page d'album), L. 133"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zj777b",
            "EntityName": "Images oubliées, L. 87: Quelques aspects de 'Nous n'irons plus au bois' parce qu'il fait un temps insupportable. Très vite - Modéré - Premier Mouvement (vit et joyeax)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zj788m",
            "EntityName": "Images I: II. Hommages Rameau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zj8v8r",
            "EntityName": "Rhapsodie pour saxophone et orchestre, L. 98"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjbv6y",
            "EntityName": "Khamma, L 125"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjf6zn",
            "EntityName": "Marche écossaise sur un thème populaire, L. 77, CD 83b (Marche des anciens comtes de Ross, dédiée à leur descendant le Général Meredith Reid, grand-croix de l'ordre royal du Rédempteur)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjgk9n",
            "EntityName": "Le Matelot qui tombe à l’eau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjk61w",
            "EntityName": "Élégie, L. 138"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjmrly",
            "EntityName": "Images, Livre 1, L. 110: No. 3. Mouvement"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjnxb5",
            "EntityName": "Rapsodie pour saxophone et piano, L. 98"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjqlpp",
            "EntityName": "The Tears of Billie Blue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjr1yc",
            "EntityName": "Danse profane"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjsdbt",
            "EntityName": "D'un cahier d'esquisses, L. 99"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjt4l9",
            "EntityName": "Images, Livre 2, L. 111: No. 3. Poissons d'or"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjtsvm",
            "EntityName": "Khamma: Scène 2 –"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjtymf",
            "EntityName": "Khamma: Deuxième Danse. Assez animé – Plus animé peu à peu – Très animé –"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zjvx06",
            "EntityName": "L’Enfant prodigue, L. 57, CD 61, scène lyrique \\\"L’année, en vain chasse l’année\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zk1hhj",
            "EntityName": "Noël des enfants qui n'ont plus de maison, L. 139, CD 147, mélodie pour voix et piano \\\"Nous n’avons plus de maison\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zk27d5",
            "EntityName": "Tarantelle styrienne, L. 69, CD 77a, (Danse) pour piano"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zk2k0c",
            "EntityName": "Printemps, L. 61, CD 68b : I. Très modéré"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zk40mx",
            "EntityName": "Deux danses pour Harpe, L. 103: Danse sacrée"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zk44cj",
            "EntityName": "Masques, L. 105"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zk8sj4",
            "EntityName": "Cortège et Air de danse de \\\"L’Enfant prodigue\\\": Cortège"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zkc50w",
            "EntityName": "Petite Suite, L. 65: I. En bateau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zkdj_g",
            "EntityName": "Khamma: Première Danse. Grave et lent – Animez – Revenez au Mouvement – Plus lent – Animez peu à peu –"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zkg3v2",
            "EntityName": "La Boîte à joujoux : IV. 3e tableau. La Bergerie à vendre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zkmw83",
            "EntityName": "Nocturne, L. 82, CD 89, pour piano"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zknbxp",
            "EntityName": "Cortège et Air de danse de \\\"L’Enfant prodigue\\\": Air de danse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zkp3h9",
            "EntityName": "Printemps, L. 61, CD 68b, suite symphonique en mi majeur pour 2 pianos et orchestre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zkpjrv",
            "EntityName": "Marche écossaise sur un thème populaire, L. 77, CD 83a (Marche des anciens comtes de Ross, dédiée à leur descendant le Général Meredith Reid, grand-croix de l'ordre royal du Rédempteur)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zkqvlx",
            "EntityName": "Les soirs illuminés par l'ardeur du charbon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zkwf3m",
            "EntityName": "Fantaisie pour piano et orchestre, L. 73, CD 72 : II. Lento e molto espressivo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zkwkn9",
            "EntityName": "Fantaisie pour piano et orchestre, L. 73, CD 72"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zl_133",
            "EntityName": "Berceuse héroïque pour piano, L. 132"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zl_41l",
            "EntityName": "Fantaisie pour piano et orchestre, L. 73, CD 72 : III. Allegro molto"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zl_97h",
            "EntityName": "Fantaisie pour piano et orchestre, L. 73, CD 72 : I. Andante - Allegro"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zl1f05",
            "EntityName": "La Boîte à joujoux : II. 1er tableau. Le Magasin de jouets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zl3q5p",
            "EntityName": "Images oubliées, L. 87: Lent (mélancolique et doux)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zl5lbp",
            "EntityName": "Mes longs cheveux"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zl6c71",
            "EntityName": "Khamma: Prélude. Modérément animé (comme un lointain tumulte) –"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zl8kw5",
            "EntityName": "Images II: I. Cloches trevers les feuilles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zl8vp5",
            "EntityName": "Hommage à Joseph Haydn, L. 115"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlb3c4",
            "EntityName": "Flots, palmes, sables, L. 25, CD 38, mélodie pour voix et piano (ou harpe) \\\"Loin des yeux du monde\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlcfft",
            "EntityName": "Danse bohémienne, L. 9, CD 4, pour piano"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlcrsg",
            "EntityName": "La Boîte à joujoux : VI. Épilogue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlgp7k",
            "EntityName": "Khamma: Troisième Danse. Très lent – Plus pénétrant – Doucement contenu –"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlgwg7",
            "EntityName": "La Boîte à Joujoux : I. Prélude. Le Sommeil de la boîte"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlhjbs",
            "EntityName": "Images oubliées, L. 87: Dans le mouvement d'une 'Sarabande', c'est-à-dire avec une élégance grâve et lente, même un peu vieux portrait, souvenir du Louvre, etc."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlkyst",
            "EntityName": "Le petit Nègre, L. 114"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlmtxl",
            "EntityName": "La Boîte à joujoux : V. 4e tableau. Après fortune faite"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlrdgg",
            "EntityName": "Morceau de concours, L. 108"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zls891",
            "EntityName": "Trois Mélodies, L. 81, CD 85, pour une voix avec accompagnement de piano : III. L’échelonnement des haies moutonne à l’infini"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlswy6",
            "EntityName": "夏の風の神（「６つの古代墓碑名」より）"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlz0_y",
            "EntityName": "L’Archet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlzpy2",
            "EntityName": "Fleurs des blés, L. 7, CD 16, mélodie pour voix et piano \\\"Le long des blés que la brise fait onduler\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zm4n6l",
            "EntityName": "Berceuse héroïque pour orchestre, L. 132"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zm6_br",
            "EntityName": "Danse: Tarantelle styrienne"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zm683f",
            "EntityName": "Aimons-nous et dormons, L. 16, CD 7, mélodie pour voix et piano \\\"Aimons-nous et dormons, sans songer au reste du monde\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zmww8h",
            "EntityName": "Duo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx19pm",
            "EntityName": "Le Martyre de Saint-Sébastien: IV. Le laurier blessé: N°3"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx26r5",
            "EntityName": "Première Rapsodie pour clarinette en si bémol, avec accompagnement de piano, L. 116, CD 124a"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx2wb7",
            "EntityName": "Trio in G Major for Violin, Cello and Piano: IV. Finale. Appassionato"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx5s79",
            "EntityName": "Pelléas et Mélisande: Act V. \\\"Mélisande...Mélisande ...\\\" - \\\"Est-ce vous, Golaud?\\\" (Golaud, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx5zs1",
            "EntityName": "Prélude à l'après-midi d'un faune, L. 86, CD 87"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx66ys",
            "EntityName": "Le Martyre de Saint-Sébastien, L. 124: Acte III \\\"Le Concile des faux dieux\\\". Fanfare no. 1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx7352",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 12. La Pluie au matin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx7xv5",
            "EntityName": "Les Chansons de Bilitis, L. 96: No. 5. La Partie d'osselets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx9d8y",
            "EntityName": "Suite Bergamasque - Menuet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zx9qvj",
            "EntityName": "Mandoline, L. 29, CD 43, mélodie pour voix et piano \\\"Les donneurs de sérénades\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxbzr5",
            "EntityName": "Sonate für Violine und Klavier in g-Moll: Finale: Très animé"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxfdj8",
            "EntityName": "Quatuor à cordes en sol mineur, op. 10, L. 85, CD 91 : I. Animé et très décidé"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxfkgp",
            "EntityName": "Pelléas et Mélisande: Act II, Scene III. \\\"Oui, c'est ici, nous y sommes\\\" (Pelléas, Mélisande)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxhrfq",
            "EntityName": "Six épigraphes antiques, L. 131: IV. Pour la danseuse aux crotales"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxlf2h",
            "EntityName": "Preludes, Book I: 11. La Danse de Puck"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxnb2h",
            "EntityName": "Le Martyre de Saint-Sébastien, L. 124: Acte III \\\"Le Concile des faux dieux\\\". Fanfare no. 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxnwpv",
            "EntityName": "Minstrels"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxpq7z",
            "EntityName": "Pelléas et Mélisande: Act I, Scene II. \\\"Je n'en dis rien\\\" (Arkel, Geneviève)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxrl2g",
            "EntityName": "Estampes - I. Pagodes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxrr8c",
            "EntityName": "Menuet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxt6kz",
            "EntityName": "Musique pour “Le Roi Lear”, L. 107: Le Sommeil de Lear"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxv16w",
            "EntityName": "Pour le piano: II. Sarabande"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxvq0n",
            "EntityName": "Trio in G Major for Violin, Cello and Piano: III. Andante espressivo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxvyvq",
            "EntityName": "Pelléas et Mélisande - Concert Suite: Acte II, scène 1. Une fontaine dans le parc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxwtzf",
            "EntityName": "Petite Suite, L. 65, CD 71a, pour piano à 4 mains : III. Menuet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxwzf0",
            "EntityName": "Trois Ballades de François Villon, L. 119: III. Ballade des femmes de Paris"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxxg9g",
            "EntityName": "Images pour orchestre, L 122: I. Gigues"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxxtm4",
            "EntityName": "Fête galante, L. 23, CD 31, mélodie pour voix et piano \\\"Voilà Sylandre et Lycas et Myrtil\\\""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zxy7vf",
            "EntityName": "Pelléas et Mélisande: Act IV, Scene I. \\\"Pelléas part ce soir\\\" (Golaud, Arkel, Mélisande)"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01vvy": "Claude Debussy"
    },
    "qid_topic_entity": {
      "Q4700": "Claude Debussy"
    },
    "NoisyQuestion": "what pieces of music did claude debussy compose?"
  },
  {
    "QuestionId": "WebQTest-616",
    "RawQuestion": "what was queen elizabeth ii childhood nickname?",
    "ProcessedQuestion": "what was queen elizabeth ii childhood nickname",
    "Parses": [
      {
        "ParseId": "WebQTest-616.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d1_f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d1_f ns:base.schemastaging.context_name.nickname ?x .\n}\n",
        "PotentialTopicEntityMention": "elizabeth ii",
        "TopicEntityName": "Elizabeth II",
        "TopicEntityMid": "m.0d1_f",
        "InferentialChain": [
          "base.schemastaging.context_name.nickname"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "Elizabeth II",
            "EntityName": null
          },
          {
            "AnswerType": "Value",
            "AnswerArgument": "Lilibet",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d1_f": "Elizabeth II"
    },
    "qid_topic_entity": {
      "Q9682": "Elizabeth II"
    },
    "NoisyQuestion": "what was queen elizabeth ii chilhood nickname?"
  },
  {
    "QuestionId": "WebQTest-1186",
    "RawQuestion": "what kind of government does cuba have today?",
    "ProcessedQuestion": "what kind of government does cuba have today",
    "Parses": [
      {
        "ParseId": "WebQTest-1186.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d04z6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d04z6 ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "cuba",
        "TopicEntityName": "Cuba",
        "TopicEntityMid": "m.0d04z6",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01dw03",
            "EntityName": "Semi-presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fpfn",
            "EntityName": "Unitary state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025tbxf",
            "EntityName": "Socialist state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06cx9",
            "EntityName": "Republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d04z6": "Cuba"
    },
    "qid_topic_entity": {
      "Q241": "Cuba"
    },
    "NoisyQuestion": "what kind of government does cuba have today?"
  },
  {
    "QuestionId": "WebQTest-1072",
    "RawQuestion": "who is the current governor of arizona 2010?",
    "ProcessedQuestion": "who is the current governor of arizona 2010",
    "Parses": [
      {
        "ParseId": "WebQTest-1072.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? current vs. 2010"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vmt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vmt ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "arizona",
        "TopicEntityName": "Arizona",
        "TopicEntityMid": "m.0vmt",
        "InferentialChain": [
          "government.governmental_jurisdiction.governing_officials",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0fkvn",
            "EntityName": "Governor",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.basic_title",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2010-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2010-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2010-01-01",
          "End": "2010-12-31",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": "2010"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02pkb1c",
            "EntityName": "Jan Brewer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0vmt": "Arizona"
    },
    "qid_topic_entity": {
      "Q816": "Arizona"
    },
    "NoisyQuestion": "who is the current governor of arizona 2010?"
  },
  {
    "QuestionId": "WebQTest-1004",
    "RawQuestion": "what movies did christopher plummer play in?",
    "ProcessedQuestion": "what movies did christopher plummer play in",
    "Parses": [
      {
        "ParseId": "WebQTest-1004.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ycbq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ycbq ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "christopher plummer",
        "TopicEntityName": "Christopher Plummer",
        "TopicEntityMid": "m.01ycbq",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010h352r",
            "EntityName": "Elsa & Fred"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011f26pr",
            "EntityName": "Remember"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011yth",
            "EntityName": "The Insider"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012wjtcf",
            "EntityName": "I Love N.Y."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015bpl",
            "EntityName": "Star Trek VI: The Undiscovered Country"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01jwxx",
            "EntityName": "Battle of Britain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01rwyq",
            "EntityName": "Malcolm X"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0224yq",
            "EntityName": "The Fall of the Roman Empire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0269yjk",
            "EntityName": "Little Gloria... Happy at Last"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026n9yk",
            "EntityName": "Money"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027c4mq",
            "EntityName": "Stage Struck"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027r7k",
            "EntityName": "Murder by Decree"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02pgkdn",
            "EntityName": "Triple Cross"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02q9_sn",
            "EntityName": "A Doll's House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qjg31",
            "EntityName": "Young Catherine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qqrpy",
            "EntityName": "Dolores Claiborne"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qy2zv",
            "EntityName": "Lily in Love"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02r79_h",
            "EntityName": "The Imaginarium of Doctor Parnassus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rn00y",
            "EntityName": "Up"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rn15c",
            "EntityName": "The Pyx"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w0_2l",
            "EntityName": "Babes in Toyland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wz1ch",
            "EntityName": "Eyewitness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x983k",
            "EntityName": "The Clown at Midnight"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02xkm8r",
            "EntityName": "Firehead"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z0nhq",
            "EntityName": "Nicholas Nickleby"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z0qgs",
            "EntityName": "9"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z14lh",
            "EntityName": "American Tragedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z7v8z",
            "EntityName": "Hamlet at Elsinore"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.032xx4",
            "EntityName": "Wolf"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.033srr",
            "EntityName": "National Treasure"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03grp9d",
            "EntityName": "Man in the Chair"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03hhtw_",
            "EntityName": "Lucky Break"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03jsdr",
            "EntityName": "Ararat"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03mddt9",
            "EntityName": "Riel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03p_np",
            "EntityName": "Somewhere in Time"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03qj86j",
            "EntityName": "The Amateur"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03vp54",
            "EntityName": "An American Tail"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03y8bw0",
            "EntityName": "The Spiral Staircase"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03y96y8",
            "EntityName": "My Dog Tulip"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047myg9",
            "EntityName": "The Last Station"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.049mql",
            "EntityName": "Alexander"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04f6hpg",
            "EntityName": "A Hazard of Hearts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04g14gk",
            "EntityName": "Conduct Unbecoming"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gm93",
            "EntityName": "Aces High"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j0834",
            "EntityName": "Already Dead"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j0f9m",
            "EntityName": "The Conspiracy of Fear"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j0ls5",
            "EntityName": "Liar's Edge"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j1_xc",
            "EntityName": "Blackheart"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j16jd",
            "EntityName": "Blizzard"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j1j4g",
            "EntityName": "The Dinosaur Hunter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j27vd",
            "EntityName": "Prototype"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j2m2s",
            "EntityName": "The First Circle"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jdgq",
            "EntityName": "Dracula 2000"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jh6fj",
            "EntityName": "Lock Up Your Daughters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jmkts",
            "EntityName": "Nobody Runs Forever"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04pmnt",
            "EntityName": "The New World"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04qgzk",
            "EntityName": "Dreamscape"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04ynd_",
            "EntityName": "Cold Creek Manor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051zdz6",
            "EntityName": "The Boss' Wife"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0520m52",
            "EntityName": "Wind Across the Everglades"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b5472",
            "EntityName": "Our Fathers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05f05n",
            "EntityName": "Inside Daisy Clover"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05r1bb",
            "EntityName": "The Return of the Pink Panther"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zqyzp",
            "EntityName": "When the Circus Came to Town"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zrzs1",
            "EntityName": "Shadow Dancing"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065qhp",
            "EntityName": "Rock-a-Doodle"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065tqqx",
            "EntityName": "On Golden Pond"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.068__1",
            "EntityName": "The Night of the Generals"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.069687",
            "EntityName": "Hanover Street"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06vggv",
            "EntityName": "Gandahar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06zk4vw",
            "EntityName": "The Man Who Planted Trees"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06zp5gf",
            "EntityName": "Secrets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07_7th",
            "EntityName": "Possessed"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.076xkps",
            "EntityName": "Priest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.078sj4",
            "EntityName": "Syriana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.079f7l",
            "EntityName": "The Scarlet and the Black"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07dzb3",
            "EntityName": "Must Love Dogs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07j6w",
            "EntityName": "12 Monkeys"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.083fl",
            "EntityName": "Waterloo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.087623",
            "EntityName": "Where the Heart Is"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08fsq3",
            "EntityName": "Full Disclosure"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08xvx8",
            "EntityName": "Starcrash"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09db8r",
            "EntityName": "The Boy in Blue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09m6kg",
            "EntityName": "A Beautiful Mind"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09nl36",
            "EntityName": "Inside Man"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09pyqc",
            "EntityName": "The Man Who Would Be King"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09v2wgp",
            "EntityName": "Winchell"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b44shh",
            "EntityName": "Beginners"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b4gnw",
            "EntityName": "Dragnet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b753df",
            "EntityName": "Ordeal by Innocence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b79dp9",
            "EntityName": "Impolite"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b813t",
            "EntityName": "Vampire in Venice"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bbmkh",
            "EntityName": "The Lake House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bbr312",
            "EntityName": "Night Flight"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bbw1jk",
            "EntityName": "The Day That Shook the World"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bg1bn",
            "EntityName": "The Gospel of John"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhbwpw",
            "EntityName": "Heidi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bnqf7",
            "EntityName": "Madeline: Lost in Paris"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bvpzw5",
            "EntityName": "Oedipus the King"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c3tmhs",
            "EntityName": "The Royal Hunt of the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c5fq4",
            "EntityName": "Woman Wanted"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chdsfl",
            "EntityName": "A Marriage: Georgia O'Keeffe and Alfred Stieglitz"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cq7tx",
            "EntityName": "The Sound of Music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crw6bn",
            "EntityName": "Four Minutes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crybp9",
            "EntityName": "Hidden Agenda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0czbcwb",
            "EntityName": "The Assignment"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d6mrfb",
            "EntityName": "Highpoint"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ddgbq3",
            "EntityName": "Souvenir"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0df1tr",
            "EntityName": "Harrison Bergeron"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dgq_kn",
            "EntityName": "The Girl with the Dragon Tattoo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dgr9sj",
            "EntityName": "Five Good Years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dnn1j",
            "EntityName": "The Silent Partner"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fc8w8",
            "EntityName": "Closing the Ring"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fdrns",
            "EntityName": "International Velvet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g0hgp",
            "EntityName": "Rumpelstiltskin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gh5_tc",
            "EntityName": "Silver Blaze"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gzqzl",
            "EntityName": "Emotional Arithmetic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hlpnhn",
            "EntityName": "Barrymore"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jt2423",
            "EntityName": "Dark Descent of the Forgotten Empress"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k3ddp2",
            "EntityName": "Kali the Little Vampire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0njcp_c",
            "EntityName": "Skeletons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0pmf3l5",
            "EntityName": "The Gnomes' Great Adventure"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0r8w0dm",
            "EntityName": "Imagine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0rpfm51",
            "EntityName": "The Legend of Sarila"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0rpt56y",
            "EntityName": "The Tempest"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0v_pgt2",
            "EntityName": "Hector and the Search for Happiness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0x0gfps",
            "EntityName": "Caesar and Cleopatra"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0xnph63",
            "EntityName": "Muhammad Ali's Greatest Fight"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ztkpk6",
            "EntityName": "The Forger"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01ycbq": "Christopher Plummer"
    },
    "qid_topic_entity": {
      "Q190523": "Christopher Plummer"
    },
    "NoisyQuestion": "what movies did christopher plummer play in?"
  },
  {
    "QuestionId": "WebQTest-380",
    "RawQuestion": "where is mount st helens volcano?",
    "ProcessedQuestion": "where is mount st helens volcano",
    "Parses": [
      {
        "ParseId": "WebQTest-380.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.094xz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.094xz ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "mount st helens",
        "TopicEntityName": "Mount St. Helens",
        "TopicEntityMid": "m.094xz",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059g4",
            "EntityName": "North America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.081yw",
            "EntityName": "Washington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k3nk",
            "EntityName": "Cascade Range"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0mly4",
            "EntityName": "Skamania County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.094xz": "Mount St. Helens"
    },
    "qid_topic_entity": {
      "Q4675": "Mount St. Helens"
    },
    "NoisyQuestion": "where is mount sht helens volcano?"
  },
  {
    "QuestionId": "WebQTest-1868",
    "RawQuestion": "who plays knox overstreet?",
    "ProcessedQuestion": "who plays knox overstreet",
    "Parses": [
      {
        "ParseId": "WebQTest-1868.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h5qcr7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h5qcr7 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "knox overstreet",
        "TopicEntityName": "Knox Overstreet",
        "TopicEntityMid": "m.0h5qcr7",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05gnf9",
            "EntityName": "Josh Charles"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0h5qcr7": "Knox Overstreet"
    },
    "qid_topic_entity": {
      "UnknownQID": "Knox Overstreet"
    },
    "NoisyQuestion": "who plays knox overstret?"
  },
  {
    "QuestionId": "WebQTest-1583",
    "RawQuestion": "what all movies has taylor lautner been in?",
    "ProcessedQuestion": "what all movies has taylor lautner been in",
    "Parses": [
      {
        "ParseId": "WebQTest-1583.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ldhs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ldhs ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "taylor lautner",
        "TopicEntityName": "Taylor Lautner",
        "TopicEntityMid": "m.07ldhs",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011q0_7k",
            "EntityName": "Run the Tide"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012z_7zt",
            "EntityName": "The Ridiculous Six"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02686wj",
            "EntityName": "He's a Bully, Charlie Brown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03nm_fh",
            "EntityName": "Twilight"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05pdh86",
            "EntityName": "The Twilight Saga: New Moon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06_wqk4",
            "EntityName": "Valentine's Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.066b_n",
            "EntityName": "Cheaper by the Dozen 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06crgb",
            "EntityName": "The Adventures of Sharkboy and Lavagirl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06zs80t",
            "EntityName": "Shadow Fury"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.075wx7_",
            "EntityName": "Eclipse"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.075wx89",
            "EntityName": "The Twilight Saga: Breaking Dawn - Part 1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07cdy_t",
            "EntityName": "The Nick and Jessica Variety Hour"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bdwfqj",
            "EntityName": "Northern Lights"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cmdl80",
            "EntityName": "Abduction"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0djz0rc",
            "EntityName": "The Twilight Saga: Breaking Dawn - Part 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g_w5hs",
            "EntityName": "Field of Dreams 2: Lockout"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx8qcw",
            "EntityName": "Incarceron"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0mzt5cs",
            "EntityName": "Grown Ups 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ngj__s",
            "EntityName": "Tracers"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07ldhs": "Taylor Lautner"
    },
    "qid_topic_entity": {
      "Q23359": "Taylor Lautner"
    },
    "NoisyQuestion": "what all movies has taylor lautner been in?"
  },
  {
    "QuestionId": "WebQTest-195",
    "RawQuestion": "what kind of guitar did george harrison use?",
    "ProcessedQuestion": "what kind of guitar did george harrison use",
    "Parses": [
      {
        "ParseId": "WebQTest-195.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03bnv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03bnv ns:music.guitarist.guitars_played ?x .\n}\n",
        "PotentialTopicEntityMention": "george harrison",
        "TopicEntityName": "George Harrison",
        "TopicEntityMid": "m.03bnv",
        "InferentialChain": [
          "music.guitarist.guitars_played"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02m873",
            "EntityName": "Fender Stratocaster"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02pqjvz",
            "EntityName": "Rickenbacker 360/12"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03bnv": "George Harrison"
    },
    "qid_topic_entity": {
      "Q2643": "George Harrison"
    },
    "NoisyQuestion": "what kind of guitar did george harrison use?"
  },
  {
    "QuestionId": "WebQTest-191",
    "RawQuestion": "where did drew brees go to college wikianswers?",
    "ProcessedQuestion": "where did drew brees go to college wikianswers",
    "Parses": [
      {
        "ParseId": "WebQTest-191.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030bdd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030bdd ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "drew brees",
        "TopicEntityName": "Drew Brees",
        "TopicEntityMid": "m.030bdd",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bb47",
            "EntityName": "Stanford Graduate School of Business"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05x_5",
            "EntityName": "Purdue University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.030bdd": "Drew Brees"
    },
    "qid_topic_entity": {
      "Q38952": "Drew Brees"
    },
    "NoisyQuestion": "where did drew breez go to college wikianswers?"
  },
  {
    "QuestionId": "WebQTest-1091",
    "RawQuestion": "what type of religions are in the united states?",
    "ProcessedQuestion": "what type of religions are in the united states",
    "Parses": [
      {
        "ParseId": "WebQTest-1091.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PotentialTopicEntityMention": "united states",
        "TopicEntityName": "United States of America",
        "TopicEntityMid": "m.09c7w0",
        "InferentialChain": [
          "location.statistical_region.religions",
          "location.religion_percentage.religion"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01lp8",
            "EntityName": "Christianity"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_gx",
            "EntityName": "Judaism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03j6c",
            "EntityName": "Hinduism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07w8f",
            "EntityName": "Unitarian Universalism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.092bf5",
            "EntityName": "Buddhism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0flw86",
            "EntityName": "Islam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kpl",
            "EntityName": "Atheism"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09c7w0": "United States of America"
    },
    "qid_topic_entity": {
      "Q30": "United States of America"
    },
    "NoisyQuestion": "what type of relijons are in the united states?"
  },
  {
    "QuestionId": "WebQTest-1252",
    "RawQuestion": "who plays eowyn in lord of the rings?",
    "ProcessedQuestion": "who plays eowyn in lord of the rings",
    "Parses": [
      {
        "ParseId": "WebQTest-1252.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017jd9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017jd9 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0gynx .\n}\n",
        "PotentialTopicEntityMention": "lord of the rings",
        "TopicEntityName": "The Lord of the Rings: The Return of the King",
        "TopicEntityMid": "m.017jd9",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0gynx",
            "EntityName": "Éowyn",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0294fd",
            "EntityName": "Miranda Otto"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.017jd9": "The Lord of the Rings: The Return of the King"
    },
    "qid_topic_entity": {
      "Q131074": "The Lord of the Rings: The Return of the King"
    },
    "NoisyQuestion": "who plays eowyn in lord of the rings?"
  },
  {
    "QuestionId": "WebQTest-899",
    "RawQuestion": "where is olympic national park wa?",
    "ProcessedQuestion": "where is olympic national park wa",
    "Parses": [
      {
        "ParseId": "WebQTest-899.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015nrn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015nrn ns:base.usnationalparks.us_national_park.state ?x .\n}\n",
        "PotentialTopicEntityMention": "olympic national park",
        "TopicEntityName": "Olympic National Park",
        "TopicEntityMid": "m.015nrn",
        "InferentialChain": [
          "base.usnationalparks.us_national_park.state"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.081yw",
            "EntityName": "Washington"
          }
        ]
      },
      {
        "ParseId": "WebQTest-899.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015nrn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015nrn ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "olympic national park",
        "TopicEntityName": "Olympic National Park",
        "TopicEntityMid": "m.015nrn",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.081yw",
            "EntityName": "Washington"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0mmqb",
            "EntityName": "Jefferson County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.015nrn": "Olympic National Park"
    },
    "qid_topic_entity": {
      "Q372093": "Olympic National Park"
    },
    "NoisyQuestion": "where is olympic national park w?"
  },
  {
    "QuestionId": "WebQTest-1637",
    "RawQuestion": "what are the catholic holy days?",
    "ProcessedQuestion": "what are the catholic holy days",
    "Parses": [
      {
        "ParseId": "WebQTest-1637.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c8wxp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c8wxp ns:religion.religion.holidays ?x .\n}\n",
        "PotentialTopicEntityMention": "catholic",
        "TopicEntityName": "Catholicism",
        "TopicEntityMid": "m.0c8wxp",
        "InferentialChain": [
          "religion.religion.holidays"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kv0v5",
            "EntityName": "Feast of St. Margaret of the Árpád House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kvb49",
            "EntityName": "Feast of Our Lady of Hungary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_kvbh6",
            "EntityName": "Feast of Our Lady of the Rosary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_l_d7h",
            "EntityName": "Our Lady of Aparecida's day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_lpd56",
            "EntityName": "Father Damien Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_lsyyw",
            "EntityName": "Our Lady of Guadalupe Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_m1438",
            "EntityName": "St. Spiridon Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_m14vv",
            "EntityName": "Saint Nicholas' Eve"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_mrbts",
            "EntityName": "Feast of Assumption"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011ncb1h",
            "EntityName": "Euthymius the Great's Feast Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011ncyv_",
            "EntityName": "The Feast of Our Lady of Mount Carmel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011nk6vg",
            "EntityName": "St. Anthony's Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011nkz4p",
            "EntityName": "Feast of Our Lady of Sorrows"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0148r6",
            "EntityName": "St Joseph's Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016s_l",
            "EntityName": "Saint Patrick's Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016v69",
            "EntityName": "Maundy Thursday"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01cqmf",
            "EntityName": "St. Stephen's Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01v147",
            "EntityName": "Corpus Christi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03nlrrk",
            "EntityName": "Nativity of Mary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0497bm",
            "EntityName": "Olsok"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04mrs1",
            "EntityName": "Feast of the Immaculate Conception"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04qnzg",
            "EntityName": "Feast of the Cross"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04sy0c",
            "EntityName": "Feast of Christ the King"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.058_lf",
            "EntityName": "Name day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0581_5",
            "EntityName": "Fat Thursday"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b22_z",
            "EntityName": "World Day of Peace"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.060_r",
            "EntityName": "Palm Sunday"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0604_c",
            "EntityName": "Saints Cyril and Methodius Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cpnkn",
            "EntityName": "Solemnity of Mary, Mother of God"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dsq86",
            "EntityName": "Feast of Saints Peter and Paul"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f6l2j",
            "EntityName": "St Crispin's Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fdm1h",
            "EntityName": "St Casimir's Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k0c",
            "EntityName": "All Saints' Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k5y347",
            "EntityName": "Feast of St Francis of Assisi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n_fbc8",
            "EntityName": "St Nicholas Day"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0c8wxp": "Catholicism"
    },
    "qid_topic_entity": {
      "Q1841": "Catholicism"
    },
    "NoisyQuestion": "what are the catholic holy days?"
  },
  {
    "QuestionId": "WebQTest-1298",
    "RawQuestion": "what does george wilson do for a living?",
    "ProcessedQuestion": "what does george wilson do for a living",
    "Parses": [
      {
        "ParseId": "WebQTest-1298.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gmk9p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gmk9p ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "george wilson",
        "TopicEntityName": "George Wilson",
        "TopicEntityMid": "m.0gmk9p",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h665k",
            "EntityName": "American football player"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0gmk9p": "George Wilson"
    },
    "qid_topic_entity": {
      "Q5546416": "George Wilson"
    },
    "NoisyQuestion": "what does george wilsen do for a living?"
  },
  {
    "QuestionId": "WebQTest-1993",
    "RawQuestion": "what language do speak in argentina?",
    "ProcessedQuestion": "what language do speak in argentina",
    "Parses": [
      {
        "ParseId": "WebQTest-1993.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "argentina",
        "TopicEntityName": "Argentina",
        "TopicEntityMid": "m.0jgd",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bjrlw",
            "EntityName": "Italian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w_hsv",
            "EntityName": "Guaraní language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03d9kg",
            "EntityName": "Quechuan languages"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nm1",
            "EntityName": "Spanish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0880p",
            "EntityName": "Yiddish Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jgd": "Argentina"
    },
    "qid_topic_entity": {
      "Q414": "Argentina"
    },
    "NoisyQuestion": "what language do speak in argenitna?"
  },
  {
    "QuestionId": "WebQTest-960",
    "RawQuestion": "who plays dwight in the office?",
    "ProcessedQuestion": "who plays dwight in the office",
    "Parses": [
      {
        "ParseId": "WebQTest-960.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08jgk1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08jgk1 ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.089pwh .\n}\n",
        "PotentialTopicEntityMention": "the office",
        "TopicEntityName": "The Office",
        "TopicEntityMid": "m.08jgk1",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.089pwh",
            "EntityName": "Dwight Schrute",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.083chw",
            "EntityName": "Rainn Wilson"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.08jgk1": "The Office"
    },
    "qid_topic_entity": {
      "Q23831": "The Office"
    },
    "NoisyQuestion": "who plays dwight in the office?"
  },
  {
    "QuestionId": "WebQTest-60",
    "RawQuestion": "where did eleanor roosevelt die?",
    "ProcessedQuestion": "where did eleanor roosevelt die",
    "Parses": [
      {
        "ParseId": "WebQTest-60.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02n9k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02n9k ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "eleanor roosevelt",
        "TopicEntityName": "Eleanor Roosevelt",
        "TopicEntityMid": "m.02n9k",
        "InferentialChain": [
          "people.deceased_person.place_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cc56",
            "EntityName": "Manhattan"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02n9k": "Eleanor Roosevelt"
    },
    "qid_topic_entity": {
      "Q83396": "Eleanor Roosevelt"
    },
    "NoisyQuestion": "where did eleanor roosevelt die?"
  },
  {
    "QuestionId": "WebQTest-1194",
    "RawQuestion": "what club does cristiano ronaldo play for in 2010?",
    "ProcessedQuestion": "what club does cristiano ronaldo play for in 2010",
    "Parses": [
      {
        "ParseId": "WebQTest-1194.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xt6q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xt6q ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "cristiano ronaldo",
        "TopicEntityName": "Cristiano Ronaldo",
        "TopicEntityMid": "m.02xt6q",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2010-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2010-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2010-01-01",
          "End": "2010-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "2010"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rqxc",
            "EntityName": "Portugal national football team"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06l22",
            "EntityName": "Real Madrid C.F."
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02xt6q": "Cristiano Ronaldo"
    },
    "qid_topic_entity": {
      "Q11571": "Cristiano Ronaldo"
    },
    "NoisyQuestion": "what club does cristiano ronaldo play for in 2010?"
  },
  {
    "QuestionId": "WebQTest-735",
    "RawQuestion": "what kind of money do i need in costa rica?",
    "ProcessedQuestion": "what kind of money do i need in costa rica",
    "Parses": [
      {
        "ParseId": "WebQTest-735.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p8s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p8s ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "costa rica",
        "TopicEntityName": "Costa Rica",
        "TopicEntityMid": "m.01p8s",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wccn",
            "EntityName": "Costa Rican colón"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01p8s": "Costa Rica"
    },
    "qid_topic_entity": {
      "Q800": "Costa Rica"
    },
    "NoisyQuestion": "what kind of money do i need in costarica?"
  },
  {
    "QuestionId": "WebQTest-337",
    "RawQuestion": "who is mary mcleod bethune for kids?",
    "ProcessedQuestion": "who is mary mcleod bethune for kids",
    "Parses": [
      {
        "ParseId": "WebQTest-337.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025rv7p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025rv7p ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "mary mcleod bethune",
        "TopicEntityName": "Mary McLeod Bethune",
        "TopicEntityMid": "m.025rv7p",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.121bkpjb",
            "EntityName": "Educator"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.025rv7p": "Mary McLeod Bethune"
    },
    "qid_topic_entity": {
      "Q291068": "Mary McLeod Bethune"
    },
    "NoisyQuestion": "who is mary mcleod bethune for kidz?"
  },
  {
    "QuestionId": "WebQTest-888",
    "RawQuestion": "what 5 countries border switzerland?",
    "ProcessedQuestion": "what 5 countries border switzerland",
    "Parses": [
      {
        "ParseId": "WebQTest-888.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mzp ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PotentialTopicEntityMention": "switzerland",
        "TopicEntityName": "Switzerland",
        "TopicEntityMid": "m.06mzp",
        "InferentialChain": [
          "location.location.adjoin_s",
          "location.adjoining_relationship.adjoins"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01mp",
            "EntityName": "Country",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0345h",
            "EntityName": "Germany"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rjj",
            "EntityName": "Italy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j53",
            "EntityName": "Liechtenstein"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f8l9c",
            "EntityName": "France"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h7x",
            "EntityName": "Austria"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06mzp": "Switzerland"
    },
    "qid_topic_entity": {
      "Q39": "Switzerland"
    },
    "NoisyQuestion": "what 5 countries border switzerlond?"
  },
  {
    "QuestionId": "WebQTest-523",
    "RawQuestion": "what is the largest nation in europe?",
    "ProcessedQuestion": "what is the largest nation in europe",
    "Parses": [
      {
        "ParseId": "WebQTest-523.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02j9z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02j9z ns:base.locations.continents.countries_within ?x .\n?x ns:topic_server.population_number ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n",
        "PotentialTopicEntityMention": "europe",
        "TopicEntityName": "Europe",
        "TopicEntityMid": "m.02j9z",
        "InferentialChain": [
          "base.locations.continents.countries_within"
        ],
        "Constraints": [],
        "Time": null,
        "Order": {
          "SortOrder": "Descending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "topic_server.population_number",
          "ValueType": "Number"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bnz",
            "EntityName": "Russia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02j9z": "Europe"
    },
    "qid_topic_entity": {
      "Q46": "Europe"
    },
    "NoisyQuestion": "what is the largest nation in eurpe?"
  },
  {
    "QuestionId": "WebQTest-1448",
    "RawQuestion": "where does michelle pfeiffer live now?",
    "ProcessedQuestion": "where does michelle pfeiffer live now",
    "Parses": [
      {
        "ParseId": "WebQTest-1448.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gx_p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gx_p ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "michelle pfeiffer",
        "TopicEntityName": "Michelle Pfeiffer",
        "TopicEntityMid": "m.0gx_p",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.place_lived.end_date",
            "ValueType": "DateTime"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.place_lived.start_date",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "now"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cb4j",
            "EntityName": "Orange County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0gx_p": "Michelle Pfeiffer"
    },
    "qid_topic_entity": {
      "Q159778": "Michelle Pfeiffer"
    },
    "NoisyQuestion": "where does michelle pfeiffer live now?"
  },
  {
    "QuestionId": "WebQTest-1719",
    "RawQuestion": "who was married to jane wyman?",
    "ProcessedQuestion": "who was married to jane wyman",
    "Parses": [
      {
        "ParseId": "WebQTest-1719.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01933d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01933d ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n?y ns:people.marriage.to ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PotentialTopicEntityMention": "jane wyman",
        "TopicEntityName": "Jane Wyman",
        "TopicEntityMid": "m.01933d",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": {
          "SortOrder": "Descending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "people.marriage.to",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jzkdh",
            "EntityName": "Fred Karger"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01933d": "Jane Wyman"
    },
    "qid_topic_entity": {
      "Q95055": "Jane Wyman"
    },
    "NoisyQuestion": "who was married to jane wymen?"
  },
  {
    "QuestionId": "WebQTest-1987",
    "RawQuestion": "what materials did eduardo paolozzi use in his work?",
    "ProcessedQuestion": "what materials did eduardo paolozzi use in his work",
    "Parses": [
      {
        "ParseId": "WebQTest-1987.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Longer chain. Original comment: F need more complicated chain to get to media"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.03fncl ns:visual_art.visual_artist.artworks ?y .\n\t?y ns:visual_art.artwork.media ?x . \n}",
        "PotentialTopicEntityMention": "eduardo paolozzi",
        "TopicEntityName": "Eduardo Paolozzi",
        "TopicEntityMid": "m.03fncl",
        "InferentialChain": [
          "visual_art.visual_artist.artworks"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01brf",
            "EntityName": "Bronze"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03fncl": "Eduardo Paolozzi"
    },
    "qid_topic_entity": {
      "Q165397": "Eduardo Paolozzi"
    },
    "NoisyQuestion": "what materials did euardo paolozzi use in his work?"
  },
  {
    "QuestionId": "WebQTest-1031",
    "RawQuestion": "what has angelina jolie accomplished?",
    "ProcessedQuestion": "what has angelina jolie accomplished",
    "Parses": [
      {
        "ParseId": "WebQTest-1031.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? "
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f4vbz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f4vbz ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "angelina jolie",
        "TopicEntityName": "Angelina Jolie",
        "TopicEntityMid": "m.0f4vbz",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d_h8",
            "EntityName": "Film Producer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hrh1q",
            "EntityName": "Actor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jknp",
            "EntityName": "Film director"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d1pc",
            "EntityName": "Model"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dxtg",
            "EntityName": "Screenwriter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kyk",
            "EntityName": "Author"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0np9r",
            "EntityName": "Voice Actor"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0f4vbz": "Angelina Jolie"
    },
    "qid_topic_entity": {
      "Q13909": "Angelina Jolie"
    },
    "NoisyQuestion": "what has angelina jolie accomplished?"
  },
  {
    "QuestionId": "WebQTest-868",
    "RawQuestion": "who is the governor of pennsylvania state now?",
    "ProcessedQuestion": "who is the governor of pennsylvania state now",
    "Parses": [
      {
        "ParseId": "WebQTest-868.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tbn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tbn ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "pennsylvania",
        "TopicEntityName": "Pennsylvania",
        "TopicEntityMid": "m.05tbn",
        "InferentialChain": [
          "government.governmental_jurisdiction.governing_officials",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0fkvn",
            "EntityName": "Governor",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.basic_title",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": "now"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx9n2",
            "EntityName": "Tom Corbett"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05tbn": "Pennsylvania"
    },
    "qid_topic_entity": {
      "Q1400": "Pennsylvania"
    },
    "NoisyQuestion": "who is the governor of pennsylvania state now?"
  },
  {
    "QuestionId": "WebQTest-1046",
    "RawQuestion": "what is jacksonville fl timezone?",
    "ProcessedQuestion": "what is jacksonville fl timezone",
    "Parses": [
      {
        "ParseId": "WebQTest-1046.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ggh3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ggh3 ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "jacksonville fl",
        "TopicEntityName": "Jacksonville",
        "TopicEntityMid": "m.0ggh3",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hcv8",
            "EntityName": "Eastern Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ggh3": "Jacksonville"
    },
    "qid_topic_entity": {
      "Q16568": "Jacksonville"
    },
    "NoisyQuestion": "what is jacksonvillle fl timezone?"
  },
  {
    "QuestionId": "WebQTest-1596",
    "RawQuestion": "what language do they use in pakistan?",
    "ProcessedQuestion": "what language do they use in pakistan",
    "Parses": [
      {
        "ParseId": "WebQTest-1596.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05sb1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05sb1 ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "pakistan",
        "TopicEntityName": "Pakistan",
        "TopicEntityMid": "m.05sb1",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hxcvy",
            "EntityName": "Urdu Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05sb1": "Pakistan"
    },
    "qid_topic_entity": {
      "Q843": "Pakistan"
    },
    "NoisyQuestion": "what language do they use in paksitan?"
  },
  {
    "QuestionId": "WebQTest-547",
    "RawQuestion": "what money do i use in costa rica?",
    "ProcessedQuestion": "what money do i use in costa rica",
    "Parses": [
      {
        "ParseId": "WebQTest-547.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p8s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p8s ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "costa rica",
        "TopicEntityName": "Costa Rica",
        "TopicEntityMid": "m.01p8s",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wccn",
            "EntityName": "Costa Rican colón"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01p8s": "Costa Rica"
    },
    "qid_topic_entity": {
      "Q800": "Costa Rica"
    },
    "NoisyQuestion": "what money do i use in costarica?"
  },
  {
    "QuestionId": "WebQTest-1090",
    "RawQuestion": "where are boeing headquarters?",
    "ProcessedQuestion": "where are boeing headquarters",
    "Parses": [
      {
        "ParseId": "WebQTest-1090.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0178g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0178g ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PotentialTopicEntityMention": "boeing",
        "TopicEntityName": "Boeing",
        "TopicEntityMid": "m.0178g",
        "InferentialChain": [
          "organization.organization.headquarters",
          "location.mailing_address.citytown"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_d4",
            "EntityName": "Chicago"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0178g": "Boeing"
    },
    "qid_topic_entity": {
      "Q66": "Boeing"
    },
    "NoisyQuestion": "where are boeing headquartes?"
  },
  {
    "QuestionId": "WebQTest-1723",
    "RawQuestion": "where is english spoken in the world map?",
    "ProcessedQuestion": "where is english spoken in the world map",
    "Parses": [
      {
        "ParseId": "WebQTest-1723.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PotentialTopicEntityMention": "english",
        "TopicEntityName": "English Language",
        "TopicEntityMid": "m.02h40lc",
        "InferentialChain": [
          "language.human_language.countries_spoken_in"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0160w",
            "EntityName": "Bahamas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0162b",
            "EntityName": "Bangladesh"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0162v",
            "EntityName": "Barbados"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0164b",
            "EntityName": "Belize"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0165b",
            "EntityName": "Bermuda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0166v",
            "EntityName": "Botswana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0167v",
            "EntityName": "Brunei"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016p5p",
            "EntityName": "Transkei"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019pcs",
            "EntityName": "Ethiopia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019rg5",
            "EntityName": "Kenya"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01k0p4",
            "EntityName": "State of Palestine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nln",
            "EntityName": "Cameroon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nty",
            "EntityName": "Cayman Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01ppq",
            "EntityName": "Cyprus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020p1",
            "EntityName": "Cook Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026wtlf",
            "EntityName": "Territory of Papua and New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027nb",
            "EntityName": "Dominica"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jx1",
            "EntityName": "England"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lx0",
            "EntityName": "Timor-Leste"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wt0",
            "EntityName": "Fiji"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03__y",
            "EntityName": "Jordan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_3d",
            "EntityName": "Japan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_xj",
            "EntityName": "Jersey"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.034m8",
            "EntityName": "Guyana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.034tl",
            "EntityName": "Guam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035dk",
            "EntityName": "Ghana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035hm",
            "EntityName": "Gibraltar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035hr8",
            "EntityName": "South Yemen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035yg",
            "EntityName": "Grenada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h2c",
            "EntityName": "Honduras"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h64",
            "EntityName": "Hong Kong"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rk0",
            "EntityName": "India"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rt9",
            "EntityName": "Republic of Ireland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ryn",
            "EntityName": "Indonesia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03spz",
            "EntityName": "Israel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03t1s",
            "EntityName": "Isle of Man"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047t_",
            "EntityName": "Kiribati"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hhv",
            "EntityName": "Laos"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hvw",
            "EntityName": "Lesotho"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hzj",
            "EntityName": "Liberia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3q",
            "EntityName": "Malta"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v6v",
            "EntityName": "Marshall Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wcf",
            "EntityName": "Montserrat"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05bmq",
            "EntityName": "Namibia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05br2",
            "EntityName": "Nauru"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05cgv",
            "EntityName": "Nigeria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qkp",
            "EntityName": "Papua New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05r7t",
            "EntityName": "Puerto Rico"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05sb1",
            "EntityName": "Pakistan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05v8c",
            "EntityName": "Philippines"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065skb",
            "EntityName": "Gazankulu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0697s",
            "EntityName": "Qatar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06dfg",
            "EntityName": "Rwanda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06m_5",
            "EntityName": "Sri Lanka"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06ryl",
            "EntityName": "Saint Kitts and Nevis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s_2",
            "EntityName": "Sierra Leone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s0l",
            "EntityName": "Saint Lucia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s6l",
            "EntityName": "Saint Vincent and the Grenadines"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s9y",
            "EntityName": "Samoa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06t2t",
            "EntityName": "Singapore"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tw8",
            "EntityName": "Sudan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06v36",
            "EntityName": "Swaziland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07dzf",
            "EntityName": "Tanzania"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07f9q",
            "EntityName": "Tokelau"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07fr_",
            "EntityName": "Turks and Caicos Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07fsv",
            "EntityName": "Tuvalu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ssc",
            "EntityName": "United Kingdom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07tp2",
            "EntityName": "Uganda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ytt",
            "EntityName": "Vatican City"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07z5n",
            "EntityName": "Vanuatu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.088q4",
            "EntityName": "Zimbabwe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.088vb",
            "EntityName": "Zambia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09pmkv",
            "EntityName": "Malaysia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09wfqp",
            "EntityName": "Territory of New Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chghy",
            "EntityName": "Australia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ctw_b",
            "EntityName": "New Zealand"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d05w3",
            "EntityName": "China"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h44w",
            "EntityName": "Mandatory Palestine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hbgh",
            "EntityName": "Curaçao"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hdx8",
            "EntityName": "Gambia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hzlz",
            "EntityName": "South Africa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j5g9",
            "EntityName": "Wales"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0l3h",
            "EntityName": "Antigua and Barbuda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0rdr4",
            "EntityName": "Bonaire"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1723.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.main_country ?x .\n}\n",
        "PotentialTopicEntityMention": "english",
        "TopicEntityName": "English Language",
        "TopicEntityMid": "m.02h40lc",
        "InferentialChain": [
          "language.human_language.main_country"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.014tss",
            "EntityName": "Kingdom of Great Britain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rt9",
            "EntityName": "Republic of Ireland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ssc",
            "EntityName": "United Kingdom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chghy",
            "EntityName": "Australia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ctw_b",
            "EntityName": "New Zealand"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02h40lc": "English Language"
    },
    "qid_topic_entity": {
      "Q1860": "English Language"
    },
    "NoisyQuestion": "where is englisn spoken in the world map?"
  },
  {
    "QuestionId": "WebQTest-646",
    "RawQuestion": "where did mary bell live?",
    "ProcessedQuestion": "where did mary bell live",
    "Parses": [
      {
        "ParseId": "WebQTest-646.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01j324)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01j324 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "mary bell",
        "TopicEntityName": "Mary Bell",
        "TopicEntityMid": "m.01j324",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j7ng",
            "EntityName": "Newcastle upon Tyne"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01j324": "Mary Bell"
    },
    "qid_topic_entity": {
      "Q241076": "Mary Bell"
    },
    "NoisyQuestion": "where did mary bell liv?"
  },
  {
    "QuestionId": "WebQTest-55",
    "RawQuestion": "who is michael buble?",
    "ProcessedQuestion": "who is michael buble",
    "Parses": [
      {
        "ParseId": "WebQTest-55.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xkkq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xkkq ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "michael buble",
        "TopicEntityName": "Michael Bublé",
        "TopicEntityMid": "m.02xkkq",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hrh1q",
            "EntityName": "Actor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09l65",
            "EntityName": "Singer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0nbcg",
            "EntityName": "Songwriter"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02xkkq": "Michael Bublé"
    },
    "qid_topic_entity": {
      "Q153694": "Michael Bublé"
    },
    "NoisyQuestion": "who is michael buble?"
  },
  {
    "QuestionId": "WebQTest-1339",
    "RawQuestion": "what team does jeremy lin play for 2013?",
    "ProcessedQuestion": "what team does jeremy lin play for 2013",
    "Parses": [
      {
        "ParseId": "WebQTest-1339.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09k72lh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09k72lh ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2013-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2013-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "jeremy lin",
        "TopicEntityName": "Jeremy Lin",
        "TopicEntityMid": "m.09k72lh",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2013-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2013-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2013-01-01",
          "End": "2013-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "2013"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jmfb",
            "EntityName": "Houston Rockets"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09k72lh": "Jeremy Lin"
    },
    "qid_topic_entity": {
      "Q309590": "Jeremy Lin"
    },
    "NoisyQuestion": "what team does jeremy lin play for 2013?"
  },
  {
    "QuestionId": "WebQTest-287",
    "RawQuestion": "what movies has carmen electra been in?",
    "ProcessedQuestion": "what movies has carmen electra been in",
    "Parses": [
      {
        "ParseId": "WebQTest-287.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lbp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lbp ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "carmen electra",
        "TopicEntityName": "Carmen Electra",
        "TopicEntityMid": "m.01lbp",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0110g35j",
            "EntityName": "Dragula"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01265cw2",
            "EntityName": "Chocolate City"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01hjwf",
            "EntityName": "Good Burger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01pj_5",
            "EntityName": "Scary Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026hxwx",
            "EntityName": "Epic Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02ntb8",
            "EntityName": "Starsky & Hutch"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02pjfgv",
            "EntityName": "Full of It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02q5hqz",
            "EntityName": "I Want Candy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02q674n",
            "EntityName": "Lil' Pimp"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qdrjx",
            "EntityName": "Bedtime Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ck20l",
            "EntityName": "Meet the Spartans"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cn85q",
            "EntityName": "Christmas in Wonderland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03qhxn_",
            "EntityName": "Perfume"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ywfs",
            "EntityName": "Mr. 3000"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.040_ypz",
            "EntityName": "Sol Goode"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0479qny",
            "EntityName": "Disaster Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gbj8",
            "EntityName": "Baywatch: Hawaiian Wedding"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j08hn",
            "EntityName": "Naked Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j0wxq",
            "EntityName": "Hot Tamale"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j1hm9",
            "EntityName": "30 Days Until I'm Famous"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j2m_x",
            "EntityName": "Whacked!"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04rk7s",
            "EntityName": "Uptown Girls"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.056p3k",
            "EntityName": "Get Over It"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05nd09x",
            "EntityName": "Searching for Bobby D"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.066b_n",
            "EntityName": "Cheaper by the Dozen 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.072txz",
            "EntityName": "National Lampoon's Pledge This!"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07h9gp",
            "EntityName": "Scary Movie 4"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07zm5t",
            "EntityName": "The Chosen One: Legend of the Raven"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.080kmxp",
            "EntityName": "Oy Vey! My Son Is Gay!!"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08pqpg",
            "EntityName": "Date Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09t10b",
            "EntityName": "American Dreamz"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b5mw7",
            "EntityName": "Dirty Love"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b64qt1",
            "EntityName": "Starstruck"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bh8xz2",
            "EntityName": "Barry Munday"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c02882",
            "EntityName": "American Vampire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cr_bqp",
            "EntityName": "Carmen Electra's Fit to Strip"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crrvj7",
            "EntityName": "Rent Control"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crv9zg",
            "EntityName": "BThere Dvd Magazine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crvchf",
            "EntityName": "We Are Family"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crw06",
            "EntityName": "Monster Island"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d042l",
            "EntityName": "Max Havoc: Curse of the Dragon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d2l2_",
            "EntityName": "My Boss's Daughter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d9z_7",
            "EntityName": "Getting Played"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f0sjn",
            "EntityName": "The Mating Habits of the Earthbound Human"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gxsyb5",
            "EntityName": "The Back Nine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h3w444",
            "EntityName": "2-Headed Shark Attack"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h944f1",
            "EntityName": "Mardi Gras: Spring Break"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0tl8nwg",
            "EntityName": "Lap Dance"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0tl8ql6",
            "EntityName": "Book of Fire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0tl8srv",
            "EntityName": "The Axe Boat"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0tl8vtw",
            "EntityName": "Lolo's Cafe"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01lbp": "Carmen Electra"
    },
    "qid_topic_entity": {
      "Q185122": "Carmen Electra"
    },
    "NoisyQuestion": "what movies has carmen electra been in?"
  },
  {
    "QuestionId": "WebQTest-102",
    "RawQuestion": "who played barbara gordon batgirl?",
    "ProcessedQuestion": "who played barbara gordon batgirl",
    "Parses": [
      {
        "ParseId": "WebQTest-102.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03hvfx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03hvfx ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "barbara gordon",
        "TopicEntityName": "Barbara Gordon",
        "TopicEntityMid": "m.03hvfx",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.041w0w1",
            "EntityName": "Ilyssa Fradin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0443_w",
            "EntityName": "Melinda McGraw"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0y54_x6",
            "EntityName": "Hannah Gunn"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03hvfx": "Barbara Gordon"
    },
    "qid_topic_entity": {
      "Q194705": "Barbara Gordon"
    },
    "NoisyQuestion": "who played barbara gordon batgirl?"
  },
  {
    "QuestionId": "WebQTest-1888",
    "RawQuestion": "what year did the milwaukee brewers go to the world series?",
    "ProcessedQuestion": "what year did the milwaukee brewers go to the world series",
    "Parses": [
      {
        "ParseId": "WebQTest-1888.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Union. Original comment: F union"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ?x ns:sports.sports_championship_event.championship ns:m.0fjp3 . # World Series\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.051vz . # Milwaukee Brewers\n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.051vz . # Milwaukee Brewers\n  }\n}",
        "PotentialTopicEntityMention": "world series",
        "TopicEntityName": "World Series",
        "TopicEntityMid": "m.0fjp3",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j78h",
            "EntityName": "1982 World Series"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0fjp3": "World Series"
    },
    "qid_topic_entity": {
      "Q265538": "World Series"
    },
    "NoisyQuestion": "what year did the milwaukee brewers go to the world seris?"
  },
  {
    "QuestionId": "WebQTest-549",
    "RawQuestion": "what are the official languages of the eu?",
    "ProcessedQuestion": "what are the official languages of the eu",
    "Parses": [
      {
        "ParseId": "WebQTest-549.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_6t_z8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_6t_z8 ns:user.ktrueman.default_domain.international_organization.official_language_s ?x .\n}\n",
        "PotentialTopicEntityMention": "eu",
        "TopicEntityName": "European Union",
        "TopicEntityMid": "m.0_6t_z8",
        "InferentialChain": [
          "user.ktrueman.default_domain.international_organization.official_language_s"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bjrlw",
            "EntityName": "Italian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bv9",
            "EntityName": "Dutch Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0349s",
            "EntityName": "Greek Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04306rv",
            "EntityName": "German Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qqm",
            "EntityName": "Polish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zjd",
            "EntityName": "Portuguese Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064_8sq",
            "EntityName": "French"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06mp7",
            "EntityName": "Swedish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nm1",
            "EntityName": "Spanish Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0_6t_z8": "European Union"
    },
    "qid_topic_entity": {
      "Q458": "European Union"
    },
    "NoisyQuestion": "what are the official languages of the e.u.?"
  },
  {
    "QuestionId": "WebQTest-100",
    "RawQuestion": "what language is spoken in haiti today?",
    "ProcessedQuestion": "what language is spoken in haiti today",
    "Parses": [
      {
        "ParseId": "WebQTest-100.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gyl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gyl ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "haiti",
        "TopicEntityName": "Haiti",
        "TopicEntityMid": "m.03gyl",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02dhwl",
            "EntityName": "Haitian Creole"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064_8sq",
            "EntityName": "French"
          }
        ]
      },
      {
        "ParseId": "WebQTest-100.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gyl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gyl ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "haiti",
        "TopicEntityName": "Haiti",
        "TopicEntityMid": "m.03gyl",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02dhwl",
            "EntityName": "Haitian Creole"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064_8sq",
            "EntityName": "French"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03gyl": "Haiti"
    },
    "qid_topic_entity": {
      "Q790": "Haiti"
    },
    "NoisyQuestion": "what language is spoken in haiti todai?"
  },
  {
    "QuestionId": "WebQTest-294",
    "RawQuestion": "who was carolus linnaeus?",
    "ProcessedQuestion": "who was carolus linnaeus",
    "Parses": [
      {
        "ParseId": "WebQTest-294.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lwd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lwd ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "carolus linnaeus",
        "TopicEntityName": "Carl Linnaeus",
        "TopicEntityMid": "m.01lwd",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h6p1f",
            "EntityName": "Botanist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05t4q",
            "EntityName": "Physician"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06q2q",
            "EntityName": "Scientist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07lqg0",
            "EntityName": "Biologist"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01lwd": "Carl Linnaeus"
    },
    "qid_topic_entity": {
      "Q1043": "Carl Linnaeus"
    },
    "NoisyQuestion": "who was carolus linnaeus?"
  },
  {
    "QuestionId": "WebQTest-1835",
    "RawQuestion": "what country did gregor mendel live in?",
    "ProcessedQuestion": "what country did gregor mendel live in",
    "Parses": [
      {
        "ParseId": "WebQTest-1835.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.039c5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.039c5 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PotentialTopicEntityMention": "gregor mendel",
        "TopicEntityName": "Gregor Mendel",
        "TopicEntityMid": "m.039c5",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02p5_2s",
            "EntityName": "Austrian Silesia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fs_s",
            "EntityName": "Brno"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.039c5": "Gregor Mendel"
    },
    "qid_topic_entity": {
      "Q37970": "Gregor Mendel"
    },
    "NoisyQuestion": "what country did gregor mendel livin in?"
  },
  {
    "QuestionId": "WebQTest-723",
    "RawQuestion": "what is there to see in sydney australia?",
    "ProcessedQuestion": "what is there to see in sydney australia",
    "Parses": [
      {
        "ParseId": "WebQTest-723.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06y57)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06y57 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PotentialTopicEntityMention": "sydney australia",
        "TopicEntityName": "Sydney",
        "TopicEntityMid": "m.06y57",
        "InferentialChain": [
          "travel.travel_destination.tourist_attractions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ymvs4",
            "EntityName": "Oatley Park, New South Wales"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01rfyc",
            "EntityName": "Port Jackson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01xlnqr",
            "EntityName": "Rose Seidler House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020772",
            "EntityName": "Bondi Beach"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0261k3j",
            "EntityName": "Wild Life Sydney"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02kwln",
            "EntityName": "Sydney Film Festival"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02q0lr",
            "EntityName": "The Rocks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x0jgm",
            "EntityName": "Sydney Markets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x7mq",
            "EntityName": "Powerhouse Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.040sd3",
            "EntityName": "Luna Park Sydney"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04dxfg",
            "EntityName": "City2Surf"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05115h",
            "EntityName": "St Mary's Cathedral, Sydney"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06_nm",
            "EntityName": "Sydney Opera House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0701q",
            "EntityName": "Sydney Harbour Bridge"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b8fsx",
            "EntityName": "North Head Quarantine Station"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cj82q",
            "EntityName": "Hillsong Church"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hddw",
            "EntityName": "Darling Harbour"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j2r2w2",
            "EntityName": "Australian National Maritime Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j65cht",
            "EntityName": "Featherdale Wildlife Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0pnrn",
            "EntityName": "Kamay Botany Bay National Park"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06y57": "Sydney"
    },
    "qid_topic_entity": {
      "Q3130": "Sydney"
    },
    "NoisyQuestion": "what is there to see in sydnei australia?"
  },
  {
    "QuestionId": "WebQTest-830",
    "RawQuestion": "where is taylor swift from?",
    "ProcessedQuestion": "where is taylor swift from",
    "Parses": [
      {
        "ParseId": "WebQTest-830.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dl567)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dl567 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "taylor swift",
        "TopicEntityName": "Taylor Swift",
        "TopicEntityMid": "m.0dl567",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zlgm",
            "EntityName": "Reading"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0dl567": "Taylor Swift"
    },
    "qid_topic_entity": {
      "Q112865783": "Taylor Swift"
    },
    "NoisyQuestion": "where is tayl0r swift from?"
  },
  {
    "QuestionId": "WebQTest-1424",
    "RawQuestion": "what form of government do we have in the philippines?",
    "ProcessedQuestion": "what form of government do we have in the philippines",
    "Parses": [
      {
        "ParseId": "WebQTest-1424.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05v8c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05v8c ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "philippines",
        "TopicEntityName": "Philippines",
        "TopicEntityMid": "m.05v8c",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d9r3",
            "EntityName": "Presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fpfn",
            "EntityName": "Unitary state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06cx9",
            "EntityName": "Republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05v8c": "Philippines"
    },
    "qid_topic_entity": {
      "Q928": "Philippines"
    },
    "NoisyQuestion": "what form of government do we have in the philippines?"
  },
  {
    "QuestionId": "WebQTest-404",
    "RawQuestion": "what was lebron james first team?",
    "ProcessedQuestion": "what was lebron james first team",
    "Parses": [
      {
        "ParseId": "WebQTest-404.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jz6d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jz6d ns:basketball.basketball_player.player_statistics ?y .\n?y ns:basketball.basketball_player_stats.team ?x .\n}\n",
        "PotentialTopicEntityMention": "lebron james",
        "TopicEntityName": "LeBron James",
        "TopicEntityMid": "m.01jz6d",
        "InferentialChain": [
          "basketball.basketball_player.player_statistics",
          "basketball.basketball_player_stats.team"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jm7n",
            "EntityName": "Cleveland Cavaliers"
          }
        ]
      },
      {
        "ParseId": "WebQTest-404.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jz6d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jz6d ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.team ?x .\n}\n",
        "PotentialTopicEntityMention": "lebron james",
        "TopicEntityName": "LeBron James",
        "TopicEntityMid": "m.01jz6d",
        "InferentialChain": [
          "sports.drafted_athlete.drafted",
          "sports.sports_league_draft_pick.team"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jm7n",
            "EntityName": "Cleveland Cavaliers"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01jz6d": "LeBron James"
    },
    "qid_topic_entity": {
      "Q36159": "LeBron James"
    },
    "NoisyQuestion": "what was lebron james first team?"
  },
  {
    "QuestionId": "WebQTest-703",
    "RawQuestion": "what currency should i take to mexico?",
    "ProcessedQuestion": "what currency should i take to mexico",
    "Parses": [
      {
        "ParseId": "WebQTest-703.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "mexico",
        "TopicEntityName": "Mexico",
        "TopicEntityMid": "m.0b90_r",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012ts8",
            "EntityName": "Mexican peso"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0b90_r": "Mexico"
    },
    "qid_topic_entity": {
      "Q96": "Mexico"
    },
    "NoisyQuestion": "what currency should i take to mexico?"
  },
  {
    "QuestionId": "WebQTest-77",
    "RawQuestion": "what capital of austria?",
    "ProcessedQuestion": "what capital of austria",
    "Parses": [
      {
        "ParseId": "WebQTest-77.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7x ns:location.country.capital ?x .\n}\n",
        "PotentialTopicEntityMention": "austria",
        "TopicEntityName": "Austria",
        "TopicEntityMid": "m.0h7x",
        "InferentialChain": [
          "location.country.capital"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fhp9",
            "EntityName": "Vienna"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0h7x": "Austria"
    },
    "qid_topic_entity": {
      "Q40": "Austria"
    },
    "NoisyQuestion": "what capitol of austria?"
  },
  {
    "QuestionId": "WebQTest-434",
    "RawQuestion": "where does the zambezi river start?",
    "ProcessedQuestion": "where does the zambezi river start",
    "Parses": [
      {
        "ParseId": "WebQTest-434.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0p_70)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0p_70 ns:geography.river.origin ?x .\n}\n",
        "PotentialTopicEntityMention": "zambezi river",
        "TopicEntityName": "Zambezi",
        "TopicEntityMid": "m.0p_70",
        "InferentialChain": [
          "geography.river.origin"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07cdmr",
            "EntityName": "Mwinilunga"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0p_70": "Zambezi"
    },
    "qid_topic_entity": {
      "Q43106": "Zambezi"
    },
    "NoisyQuestion": "where does the zambezi river start?"
  },
  {
    "QuestionId": "WebQTest-635",
    "RawQuestion": "what characters does matt stone do?",
    "ProcessedQuestion": "what characters does matt stone do",
    "Parses": [
      {
        "ParseId": "WebQTest-635.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_x6d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_x6d ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n}\n",
        "PotentialTopicEntityMention": "matt stone",
        "TopicEntityName": "Matt Stone",
        "TopicEntityMid": "m.01_x6d",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.013z1n",
            "EntityName": "Kenny McCormick"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01lgj0",
            "EntityName": "Kyle Broflovski"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.021r0s",
            "EntityName": "Wizard of Oz"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bthgtk",
            "EntityName": "Terrance Henry Stoot"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bthgtn",
            "EntityName": "Gerald Broflovski"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bthgtr",
            "EntityName": "Bill Gates"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bzk1qh",
            "EntityName": "Ethan Hawke"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bzk1r1",
            "EntityName": "Chris"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bzk1rh",
            "EntityName": "George Clooney"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bzk1s0",
            "EntityName": "Danny Glover"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dnc0h",
            "EntityName": "Jimbo Kearn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g1jfp",
            "EntityName": "Saddam Hussein"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0z47h",
            "EntityName": "James Humphries"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0z47s",
            "EntityName": "Former Columbine Student"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0z48_",
            "EntityName": "Doug Remer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0z481",
            "EntityName": "Hermaphrodite"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0z488",
            "EntityName": "Taper Guy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0z48k",
            "EntityName": "Kyle / Kenny / Jesus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0z48s",
            "EntityName": "Dave the Lighting Guy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0z4dl",
            "EntityName": "Man toasting drinks at MCA outdoor bar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0vnkcxn",
            "EntityName": "Ticket Taker"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01_x6d": "Matt Stone"
    },
    "qid_topic_entity": {
      "Q44410": "Matt Stone"
    },
    "NoisyQuestion": "what characters does mtt stone do?"
  },
  {
    "QuestionId": "WebQTest-115",
    "RawQuestion": "what super bowl did peyton manning win?",
    "ProcessedQuestion": "what super bowl did peyton manning win",
    "Parses": [
      {
        "ParseId": "WebQTest-115.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: Done. Original comment: !Manual AnswerAndPartialSparql. Comment: F Date join. Partial comment: wrote down peyton's years on different teams and used table above to figure out answers.. Original comment: F longer chains, more complex query"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?z\nWHERE {\n  ns:m.027jv8 ns:sports.pro_athlete.teams ?y .\n  ?y ns:sports.sports_team_roster.team ?x . #team\n  ?x ns:sports.sports_team.championships ?z . # super bowls\n  ?z ns:common.topic.notable_types ns:m.01xljv1 . #super bowl\n  ?z ns:sports.sports_championship_event.champion ?c .\n  ?z ns:time.event.start_date ?a .\n  \n  # Check the time overlap\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \n             EXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \n             FILTER(xsd:datetime(?sk1) - xsd:datetime(?a) <= 0) })\n\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \n             EXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \n             FILTER(xsd:datetime(?sk3) - xsd:datetime(?a) >= 0 ) }) \n}",
        "PotentialTopicEntityMention": "peyton manning",
        "TopicEntityName": "Peyton Manning",
        "TopicEntityMid": "m.027jv8",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04k5qm",
            "EntityName": "Super Bowl XLI"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.027jv8": "Peyton Manning"
    },
    "qid_topic_entity": {
      "Q7539": "Peyton Manning"
    },
    "NoisyQuestion": "what super bowl did peyton manning win?"
  },
  {
    "QuestionId": "WebQTest-1254",
    "RawQuestion": "where is augusta masters 2012?",
    "ProcessedQuestion": "where is augusta masters 2012",
    "Parses": [
      {
        "ParseId": "WebQTest-1254.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hrf6ww)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hrf6ww ns:time.event.locations ?x .\n}\n",
        "PotentialTopicEntityMention": "masters 2012",
        "TopicEntityName": "2012 Masters Tournament",
        "TopicEntityMid": "m.0hrf6ww",
        "InferentialChain": [
          "time.event.locations"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tk4bp",
            "EntityName": "Augusta National Golf Course"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0hrf6ww": "2012 Masters Tournament"
    },
    "qid_topic_entity": {
      "Q2204136": "2012 Masters Tournament"
    },
    "NoisyQuestion": "where is augusta mators 2012?"
  },
  {
    "QuestionId": "WebQTest-534",
    "RawQuestion": "what is the milwaukee brewers mascot?",
    "ProcessedQuestion": "what is the milwaukee brewers mascot",
    "Parses": [
      {
        "ParseId": "WebQTest-534.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051vz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051vz ns:sports.sports_team.team_mascot ?x .\n}\n",
        "PotentialTopicEntityMention": "milwaukee brewers",
        "TopicEntityName": "Milwaukee Brewers",
        "TopicEntityMid": "m.051vz",
        "InferentialChain": [
          "sports.sports_team.team_mascot"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0100sszz",
            "EntityName": "Hank"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.049kl_",
            "EntityName": "Bernie Brewer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0blvgb",
            "EntityName": "Bonnie Brewer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.051vz": "Milwaukee Brewers"
    },
    "qid_topic_entity": {
      "Q848103": "Milwaukee Brewers"
    },
    "NoisyQuestion": "what is the milwauke brewers mascot?"
  },
  {
    "QuestionId": "WebQTest-702",
    "RawQuestion": "what highschool did emily osment go to?",
    "ProcessedQuestion": "what highschool did emily osment go to",
    "Parses": [
      {
        "ParseId": "WebQTest-702.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03xnq9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03xnq9_ ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:base.schemastaging.non_profit_extra.classification ns:m.0ppgzhv .\n}\n",
        "PotentialTopicEntityMention": "emily osment",
        "TopicEntityName": "Emily Osment",
        "TopicEntityMid": "m.03xnq9_",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0ppgzhv",
            "EntityName": "Secondary/High School",
            "SourceNodeIndex": 1,
            "NodePredicate": "base.schemastaging.non_profit_extra.classification",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07q2jh",
            "EntityName": "Flintridge Preparatory School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03xnq9_": "Emily Osment"
    },
    "qid_topic_entity": {
      "Q188401": "Emily Osment"
    },
    "NoisyQuestion": "what highschool did emily osment go to?"
  },
  {
    "QuestionId": "WebQTest-1597",
    "RawQuestion": "what kind of products does nike sell?",
    "ProcessedQuestion": "what kind of products does nike sell",
    "Parses": [
      {
        "ParseId": "WebQTest-1597.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lwkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lwkh ns:business.business_operation.industry ?x .\n}\n",
        "PotentialTopicEntityMention": "nike",
        "TopicEntityName": "Nike, Inc.",
        "TopicEntityMid": "m.0lwkh",
        "InferentialChain": [
          "business.business_operation.industry"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02kztmt",
            "EntityName": "Athletic Shoes & Apparel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03q9xp9",
            "EntityName": "Footwear Manufacturing"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0463sg",
            "EntityName": "Fashion accessory"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05y5lj",
            "EntityName": "Sports equipment"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09j2d",
            "EntityName": "Clothing"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09j5n",
            "EntityName": "Footwear"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0lwkh": "Nike, Inc."
    },
    "qid_topic_entity": {
      "Q483915": "Nike, Inc."
    },
    "NoisyQuestion": "what kind of products does nuke sell?"
  },
  {
    "QuestionId": "WebQTest-1037",
    "RawQuestion": "who is the coach for the new york knicks?",
    "ProcessedQuestion": "who is the coach for the new york knicks",
    "Parses": [
      {
        "ParseId": "WebQTest-1037.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jm3v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jm3v ns:basketball.basketball_team.head_coach ?x .\n}\n",
        "PotentialTopicEntityMention": "new york knicks",
        "TopicEntityName": "New York Knicks",
        "TopicEntityMid": "m.0jm3v",
        "InferentialChain": [
          "basketball.basketball_team.head_coach"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04lvwk",
            "EntityName": "Derek Fisher"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jm3v": "New York Knicks"
    },
    "qid_topic_entity": {
      "Q131364": "New York Knicks"
    },
    "NoisyQuestion": "who is the coach for the new york knicks?"
  },
  {
    "QuestionId": "WebQTest-464",
    "RawQuestion": "what is the political structure of china?",
    "ProcessedQuestion": "what is the political structure of china",
    "Parses": [
      {
        "ParseId": "WebQTest-464.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05w3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05w3 ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "china",
        "TopicEntityName": "China",
        "TopicEntityMid": "m.0d05w3",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fkst",
            "EntityName": "Communist state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025tbxf",
            "EntityName": "Socialist state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0py4y",
            "EntityName": "Single-party state"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d05w3": "China"
    },
    "qid_topic_entity": {
      "Q148": "China"
    },
    "NoisyQuestion": "what is the political structure of chna?"
  },
  {
    "QuestionId": "WebQTest-1590",
    "RawQuestion": "what are the most popular religions in israel?",
    "ProcessedQuestion": "what are the most popular religions in israel",
    "Parses": [
      {
        "ParseId": "WebQTest-1590.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03spz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03spz ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n?y ns:location.religion_percentage.percentage ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n",
        "PotentialTopicEntityMention": "israel",
        "TopicEntityName": "Israel",
        "TopicEntityMid": "m.03spz",
        "InferentialChain": [
          "location.statistical_region.religions",
          "location.religion_percentage.religion"
        ],
        "Constraints": [],
        "Time": null,
        "Order": {
          "SortOrder": "Descending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "location.religion_percentage.percentage",
          "ValueType": "Number"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_gx",
            "EntityName": "Judaism"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03spz": "Israel"
    },
    "qid_topic_entity": {
      "Q801": "Israel"
    },
    "NoisyQuestion": "what are the most popular religions in israe?"
  },
  {
    "QuestionId": "WebQTest-1142",
    "RawQuestion": "who does ronaldinho play for now 2011?",
    "ProcessedQuestion": "who does ronaldinho play for now 2011",
    "Parses": [
      {
        "ParseId": "WebQTest-1142.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lfw5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lfw5 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "ronaldinho",
        "TopicEntityName": "Ronaldinho",
        "TopicEntityMid": "m.02lfw5",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2011-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2011-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2011-01-01",
          "End": "2011-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "2011"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01352_",
            "EntityName": "Brazil national football team"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019lty",
            "EntityName": "Clube de Regatas do Flamengo"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02lfw5": "Ronaldinho"
    },
    "qid_topic_entity": {
      "Q39444": "Ronaldinho"
    },
    "NoisyQuestion": "who does ronaldinhho play for now 2011?"
  },
  {
    "QuestionId": "WebQTest-1089",
    "RawQuestion": "who played amy squirrel in bad teacher?",
    "ProcessedQuestion": "who played amy squirrel in bad teacher",
    "Parses": [
      {
        "ParseId": "WebQTest-1089.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cp0ph6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cp0ph6 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0glzmqc .\n}\n",
        "PotentialTopicEntityMention": "bad teacher",
        "TopicEntityName": "Bad Teacher",
        "TopicEntityMid": "m.0cp0ph6",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0glzmqc",
            "EntityName": "Amy Squirrel",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025__x2",
            "EntityName": "Lucy Punch"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0cp0ph6": "Bad Teacher"
    },
    "qid_topic_entity": {
      "Q798797": "Bad Teacher"
    },
    "NoisyQuestion": "who played amj squirrel in bad teacher?"
  },
  {
    "QuestionId": "WebQTest-1675",
    "RawQuestion": "where do the appalachian mountains run through?",
    "ProcessedQuestion": "where do the appalachian mountains run through",
    "Parses": [
      {
        "ParseId": "WebQTest-1675.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "Partially Containedby is fine too"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lm0n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lm0n ns:location.location.partially_containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "appalachian mountains",
        "TopicEntityName": "Appalachian Mountains",
        "TopicEntityMid": "m.0lm0n",
        "InferentialChain": [
          "location.location.partially_containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01x73",
            "EntityName": "Connecticut"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.029jpy",
            "EntityName": "New England"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0498y",
            "EntityName": "Kentucky"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.050ks",
            "EntityName": "Maine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059f4",
            "EntityName": "New Hampshire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059rby",
            "EntityName": "New York"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059s8",
            "EntityName": "New Brunswick"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059t8",
            "EntityName": "Nova Scotia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05fjf",
            "EntityName": "New Jersey"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05fkf",
            "EntityName": "North Carolina"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05j49",
            "EntityName": "Newfoundland and Labrador"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05k7sb",
            "EntityName": "Massachusetts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05kkh",
            "EntityName": "Ohio"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05rh2",
            "EntityName": "Prince Edward Island"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05tbn",
            "EntityName": "Pennsylvania"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0694j",
            "EntityName": "Québec"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s4c",
            "EntityName": "Saint Pierre and Miquelon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06yxd",
            "EntityName": "South Carolina"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07_f2",
            "EntityName": "Vermont"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07h34",
            "EntityName": "Tennessee"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07z1m",
            "EntityName": "Virginia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.081mh",
            "EntityName": "West Virginia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0x8",
            "EntityName": "Georgia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gyh",
            "EntityName": "Alabama"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0lm0n": "Appalachian Mountains"
    },
    "qid_topic_entity": {
      "Q93332": "Appalachian Mountains"
    },
    "NoisyQuestion": "where do the appalacian mountains run through?"
  },
  {
    "QuestionId": "WebQTest-1191",
    "RawQuestion": "what language do people speak in the bahamas?",
    "ProcessedQuestion": "what language do people speak in the bahamas",
    "Parses": [
      {
        "ParseId": "WebQTest-1191.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0160w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0160w ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "bahamas",
        "TopicEntityName": "Bahamas",
        "TopicEntityMid": "m.0160w",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026qjbs",
            "EntityName": "Bahamas Creole English Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1191.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0160w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0160w ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "bahamas",
        "TopicEntityName": "Bahamas",
        "TopicEntityMid": "m.0160w",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0160w": "Bahamas"
    },
    "qid_topic_entity": {
      "Q778": "Bahamas"
    },
    "NoisyQuestion": "what language do people speak in the bahsamas?"
  },
  {
    "QuestionId": "WebQTest-1988",
    "RawQuestion": "what did joe biden study in college?",
    "ProcessedQuestion": "what did joe biden study in college",
    "Parses": [
      {
        "ParseId": "WebQTest-1988.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012gx2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012gx2 ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n",
        "PotentialTopicEntityMention": "joe biden",
        "TopicEntityName": "Joe Biden",
        "TopicEntityMid": "m.012gx2",
        "InferentialChain": [
          "people.person.education",
          "education.education.major_field_of_study"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03g3w",
            "EntityName": "History"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.062z7",
            "EntityName": "Political Science"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.012gx2": "Joe Biden"
    },
    "qid_topic_entity": {
      "Q6279": "Joe Biden"
    },
    "NoisyQuestion": "what did jo biden study in college?"
  },
  {
    "QuestionId": "WebQTest-883",
    "RawQuestion": "who was king george vi married to?",
    "ProcessedQuestion": "who was king george vi married to",
    "Parses": [
      {
        "ParseId": "WebQTest-883.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cm83)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cm83 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.to ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PotentialTopicEntityMention": "king george vi",
        "TopicEntityName": "George VI",
        "TopicEntityMid": "m.0cm83",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [],
        "Time": null,
        "Order": {
          "SortOrder": "Descending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "people.marriage.to",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cm63",
            "EntityName": "Queen Elizabeth The Queen Mother"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0cm83": "George VI"
    },
    "qid_topic_entity": {
      "Q280856": "George VI"
    },
    "NoisyQuestion": "who was king george vi marred to?"
  },
  {
    "QuestionId": "WebQTest-1558",
    "RawQuestion": "who is john cena married to?",
    "ProcessedQuestion": "who is john cena married to",
    "Parses": [
      {
        "ParseId": "WebQTest-1558.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ypx5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ypx5 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PotentialTopicEntityMention": "john cena",
        "TopicEntityName": "John Cena",
        "TopicEntityMid": "m.01ypx5",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07n79hq",
            "EntityName": "Elizabeth Huberdeau"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01ypx5": "John Cena"
    },
    "qid_topic_entity": {
      "Q44437": "John Cena"
    },
    "NoisyQuestion": "who is jhon cena married to?"
  },
  {
    "QuestionId": "WebQTest-1858",
    "RawQuestion": "where does dave ramsey live?",
    "ProcessedQuestion": "where does dave ramsey live",
    "Parses": [
      {
        "ParseId": "WebQTest-1858.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zf9h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zf9h ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PotentialTopicEntityMention": "dave ramsey",
        "TopicEntityName": "Dave Ramsey",
        "TopicEntityMid": "m.03zf9h",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05jbn",
            "EntityName": "Nashville"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03zf9h": "Dave Ramsey"
    },
    "qid_topic_entity": {
      "Q5229632": "Dave Ramsey"
    },
    "NoisyQuestion": "where does dave ramseu live?"
  },
  {
    "QuestionId": "WebQTest-221",
    "RawQuestion": "who does jeremy lin play for?",
    "ProcessedQuestion": "who does jeremy lin play for",
    "Parses": [
      {
        "ParseId": "WebQTest-221.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09k72lh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09k72lh ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "jeremy lin",
        "TopicEntityName": "Jeremy Lin",
        "TopicEntityMid": "m.09k72lh",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jmk7",
            "EntityName": "Los Angeles Lakers"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09k72lh": "Jeremy Lin"
    },
    "qid_topic_entity": {
      "Q309590": "Jeremy Lin"
    },
    "NoisyQuestion": "who does jermey lin play for?"
  },
  {
    "QuestionId": "WebQTest-1635",
    "RawQuestion": "when did tony romo got drafted?",
    "ProcessedQuestion": "when did tony romo got drafted",
    "Parses": [
      {
        "ParseId": "WebQTest-1635.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.097yk7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.097yk7 ns:sports.pro_athlete.career_start ?x .\n}\n",
        "PotentialTopicEntityMention": "tony romo",
        "TopicEntityName": "Tony Romo",
        "TopicEntityMid": "m.097yk7",
        "InferentialChain": [
          "sports.pro_athlete.career_start"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "2002",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.097yk7": "Tony Romo"
    },
    "qid_topic_entity": {
      "Q14027": "Tony Romo"
    },
    "NoisyQuestion": "when did tony rmo got drafted?"
  },
  {
    "QuestionId": "WebQTest-983",
    "RawQuestion": "where did tennessee williams go to college?",
    "ProcessedQuestion": "where did tennessee williams go to college",
    "Parses": [
      {
        "ParseId": "WebQTest-983.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c4y8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c4y8 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "tennessee williams",
        "TopicEntityName": "Tennessee Williams",
        "TopicEntityMid": "m.0c4y8",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0187nd",
            "EntityName": "University of Missouri"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01j_9c",
            "EntityName": "University of Iowa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06thjt",
            "EntityName": "The New School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g2jl",
            "EntityName": "Washington University in St. Louis"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0c4y8": "Tennessee Williams"
    },
    "qid_topic_entity": {
      "Q134262": "Tennessee Williams"
    },
    "NoisyQuestion": "where did tennessee williams go to colleg?"
  },
  {
    "QuestionId": "WebQTest-247",
    "RawQuestion": "where did flemish people come from?",
    "ProcessedQuestion": "where did flemish people come from",
    "Parses": [
      {
        "ParseId": "WebQTest-247.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018hlv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018hlv ns:people.ethnicity.geographic_distribution ?x .\n}\n",
        "PotentialTopicEntityMention": "flemish people",
        "TopicEntityName": "Flemish people",
        "TopicEntityMid": "m.018hlv",
        "InferentialChain": [
          "people.ethnicity.geographic_distribution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0154j",
            "EntityName": "Belgium"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015fr",
            "EntityName": "Brazil"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chghy",
            "EntityName": "Australia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f8l9c",
            "EntityName": "France"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hzlz",
            "EntityName": "South Africa"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.018hlv": "Flemish people"
    },
    "qid_topic_entity": {
      "Q242485": "Flemish people"
    },
    "NoisyQuestion": "where did flemish people come from?"
  },
  {
    "QuestionId": "WebQTest-1215",
    "RawQuestion": "who was stephen r covey?",
    "ProcessedQuestion": "who was stephen r covey",
    "Parses": [
      {
        "ParseId": "WebQTest-1215.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jtkg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jtkg ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "stephen r covey",
        "TopicEntityName": "Stephen Covey",
        "TopicEntityMid": "m.01jtkg",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016fly",
            "EntityName": "Professor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02n9jv",
            "EntityName": "Consultant"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047vnfs",
            "EntityName": "Manager"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05kb8h",
            "EntityName": "Motivational speaker"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kyk",
            "EntityName": "Author"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01jtkg": "Stephen Covey"
    },
    "qid_topic_entity": {
      "Q313482": "Stephen Covey"
    },
    "NoisyQuestion": "who was stephen r covey?"
  },
  {
    "QuestionId": "WebQTest-1815",
    "RawQuestion": "where does lil wayne go to school?",
    "ProcessedQuestion": "where does lil wayne go to school",
    "Parses": [
      {
        "ParseId": "WebQTest-1815.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016kjs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016kjs ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "lil wayne",
        "TopicEntityName": "Lil Wayne",
        "TopicEntityMid": "m.016kjs",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02gnrt",
            "EntityName": "University of Phoenix"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02gr81",
            "EntityName": "University of Houston"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.075_jk3",
            "EntityName": "Lafayette Elementary School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.076qq2_",
            "EntityName": "Mcmain Magnet Secondary School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h2_zh0",
            "EntityName": "Eleanor McMain Secondary School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.016kjs": "Lil Wayne"
    },
    "qid_topic_entity": {
      "Q15615": "Lil Wayne"
    },
    "NoisyQuestion": "where does lil wayne go to scol?"
  },
  {
    "QuestionId": "WebQTest-1177",
    "RawQuestion": "where did mario lopez go to school?",
    "ProcessedQuestion": "where did mario lopez go to school",
    "Parses": [
      {
        "ParseId": "WebQTest-1177.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02w5q6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02w5q6 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "mario lopez",
        "TopicEntityName": "Mario Lopez",
        "TopicEntityMid": "m.02w5q6",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0sx6",
            "EntityName": "Chula Vista High School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02w5q6": "Mario Lopez"
    },
    "qid_topic_entity": {
      "Q372559": "Mario Lopez"
    },
    "NoisyQuestion": "where did mario lopez go to schoo?"
  },
  {
    "QuestionId": "WebQTest-1291",
    "RawQuestion": "how many kids were there in the kennedy family?",
    "ProcessedQuestion": "how many kids were there in the kennedy family",
    "Parses": [
      {
        "ParseId": "WebQTest-1291.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01qlg1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01qlg1 ns:people.person.children ?x .\n}\n",
        "PotentialTopicEntityMention": "kennedy family",
        "TopicEntityName": "Joseph P. Kennedy, Sr.",
        "TopicEntityMid": "m.01qlg1",
        "InferentialChain": [
          "people.person.children"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0194xc",
            "EntityName": "Ted Kennedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01kyns",
            "EntityName": "Rosemary Kennedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020t1x",
            "EntityName": "Joseph P. Kennedy, Jr."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028qh_",
            "EntityName": "Jean Kennedy Smith"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04f1nm",
            "EntityName": "Kathleen Cavendish"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04f1qs",
            "EntityName": "Patricia Kennedy Lawford"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06hx2",
            "EntityName": "Robert F. Kennedy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bt9c",
            "EntityName": "Eunice Kennedy Shriver"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d3k14",
            "EntityName": "John F. Kennedy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01qlg1": "Joseph P. Kennedy, Sr."
    },
    "qid_topic_entity": {
      "Q313696": "Joseph P. Kennedy, Sr."
    },
    "NoisyQuestion": "how many kids were there in the kennedy famly?"
  },
  {
    "QuestionId": "WebQTest-346",
    "RawQuestion": "who does donnie wahlberg play in the sixth sense?",
    "ProcessedQuestion": "who does donnie wahlberg play in the sixth sense",
    "Parses": [
      {
        "ParseId": "WebQTest-346.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02stwg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02stwg ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.07j94 .\n}\n",
        "PotentialTopicEntityMention": "donnie wahlberg",
        "TopicEntityName": "Donnie Wahlberg",
        "TopicEntityMid": "m.02stwg",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.07j94",
            "EntityName": "The Sixth Sense",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gyxn2c",
            "EntityName": "Vincent Grey"
          }
        ]
      },
      {
        "ParseId": "WebQTest-346.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07j94)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07j94 ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:m.02stwg .\n}\n",
        "PotentialTopicEntityMention": "the sixth sense",
        "TopicEntityName": "The Sixth Sense",
        "TopicEntityMid": "m.07j94",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02stwg",
            "EntityName": "Donnie Wahlberg",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.actor",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gyxn2c",
            "EntityName": "Vincent Grey"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02stwg": "Donnie Wahlberg",
      "m.07j94": "The Sixth Sense"
    },
    "qid_topic_entity": {
      "Q313470": "Donnie Wahlberg",
      "Q183063": "The Sixth Sense"
    },
    "NoisyQuestion": "who does donnie wahlberg play in the sixth sence?"
  },
  {
    "QuestionId": "WebQTest-2030",
    "RawQuestion": "where is roswell area 51?",
    "ProcessedQuestion": "where is roswell area 51",
    "Parses": [
      {
        "ParseId": "WebQTest-2030.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yjq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yjq ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "area 51",
        "TopicEntityName": "Area 51",
        "TopicEntityMid": "m.0yjq",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059_c",
            "EntityName": "Nevada"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n6ps",
            "EntityName": "Lincoln County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0yjq": "Area 51"
    },
    "qid_topic_entity": {
      "Q177397": "Area 51"
    },
    "NoisyQuestion": "where is roswell area 51?"
  },
  {
    "QuestionId": "WebQTest-752",
    "RawQuestion": "what drink did john pemberton create?",
    "ProcessedQuestion": "what drink did john pemberton create",
    "Parses": [
      {
        "ParseId": "WebQTest-752.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h24w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h24w ns:law.inventor.inventions ?x .\n}\n",
        "PotentialTopicEntityMention": "john pemberton",
        "TopicEntityName": "John Pemberton",
        "TopicEntityMid": "m.0h24w",
        "InferentialChain": [
          "law.inventor.inventions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01yvs",
            "EntityName": "Coca-Cola"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0h24w": "John Pemberton"
    },
    "qid_topic_entity": {
      "Q215959": "John Pemberton"
    },
    "NoisyQuestion": "what drink did jhon pemberton create?"
  },
  {
    "QuestionId": "WebQTest-973",
    "RawQuestion": "what time zone is chicago in right now?",
    "ProcessedQuestion": "what time zone is chicago in right now",
    "Parses": [
      {
        "ParseId": "WebQTest-973.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_d4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_d4 ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "chicago",
        "TopicEntityName": "Chicago",
        "TopicEntityMid": "m.01_d4",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fqwt",
            "EntityName": "Central Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01_d4": "Chicago"
    },
    "qid_topic_entity": {
      "Q1297": "Chicago"
    },
    "NoisyQuestion": "what time zone is chigaco in right now?"
  },
  {
    "QuestionId": "WebQTest-1501",
    "RawQuestion": "where is the un based?",
    "ProcessedQuestion": "where is the un based",
    "Parses": [
      {
        "ParseId": "WebQTest-1501.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07t65)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07t65 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PotentialTopicEntityMention": "un",
        "TopicEntityName": "United Nations",
        "TopicEntityMid": "m.07t65",
        "InferentialChain": [
          "organization.organization.headquarters",
          "location.mailing_address.citytown"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02_286",
            "EntityName": "New York City"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07t65": "United Nations"
    },
    "qid_topic_entity": {
      "Q1065": "United Nations"
    },
    "NoisyQuestion": "where is the un basd?"
  },
  {
    "QuestionId": "WebQTest-1126",
    "RawQuestion": "what county is san diego in?",
    "ProcessedQuestion": "what county is san diego in",
    "Parses": [
      {
        "ParseId": "WebQTest-1126.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.071vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.071vr ns:location.hud_county_place.county ?x .\n}\n",
        "PotentialTopicEntityMention": "san diego",
        "TopicEntityName": "San Diego",
        "TopicEntityMid": "m.071vr",
        "InferentialChain": [
          "location.hud_county_place.county"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0l2rj",
            "EntityName": "San Diego County"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1126.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n2wc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n2wc ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.0kpym_ .\n}\n",
        "PotentialTopicEntityMention": "san diego",
        "TopicEntityName": "San Diego International Airport",
        "TopicEntityMid": "m.01n2wc",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0kpym_",
            "EntityName": "US County",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0l2rj",
            "EntityName": "San Diego County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.071vr": "San Diego",
      "m.01n2wc": "San Diego International Airport"
    },
    "qid_topic_entity": {
      "Q16552": "San Diego",
      "Q1333923": "San Diego International Airport"
    },
    "NoisyQuestion": "what county is san dieggo in?"
  },
  {
    "QuestionId": "WebQTest-1706",
    "RawQuestion": "what was benedict arnold most famous for?",
    "ProcessedQuestion": "what was benedict arnold most famous for",
    "Parses": [
      {
        "ParseId": "WebQTest-1706.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? "
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025_0c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025_0c ns:base.honouriam.dishonoured_person.dishonor_bestowed ?x .\n}\n",
        "PotentialTopicEntityMention": "benedict arnold",
        "TopicEntityName": "Benedict Arnold",
        "TopicEntityMid": "m.025_0c",
        "InferentialChain": [
          "base.honouriam.dishonoured_person.dishonor_bestowed"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07y2zxd",
            "EntityName": "Traitor"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.025_0c": "Benedict Arnold"
    },
    "qid_topic_entity": {
      "Q298237": "Benedict Arnold"
    },
    "NoisyQuestion": "what was benedict arnold most famous for?"
  },
  {
    "QuestionId": "WebQTest-1538",
    "RawQuestion": "what books did louis sachar wrote?",
    "ProcessedQuestion": "what books did louis sachar wrote",
    "Parses": [
      {
        "ParseId": "WebQTest-1538.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq8d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq8d ns:book.author.book_editions_published ?x .\n}\n",
        "PotentialTopicEntityMention": "louis sachar",
        "TopicEntityName": "Louis Sachar",
        "TopicEntityMid": "m.01bq8d",
        "InferentialChain": [
          "book.author.book_editions_published"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028xsvy",
            "EntityName": "Small Steps"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028y3lc",
            "EntityName": "Someday Angeline"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028y9y6",
            "EntityName": "Sixth Grade Secrets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028yqjw",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5dp",
            "EntityName": "Johnny's in the basement"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5f_",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5fk",
            "EntityName": "Wayside School gets a little stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5gf",
            "EntityName": "Class President (A Stepping Stone Book(TM))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5gn",
            "EntityName": "A magic crystal?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5h2",
            "EntityName": "Der Fluch des David Ballinger. ( Ab 11 J.)."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5h9",
            "EntityName": "Sixth Grade Secrets (Apple Paperbacks)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5hj",
            "EntityName": "Wayside School is falling down"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5hz",
            "EntityName": "There's a boy in the girls bathroom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5jd",
            "EntityName": "Kidnapped at Birth? (A Stepping Stone Book(TM))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5jm",
            "EntityName": "The Boy Who Lost His Face"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5jw",
            "EntityName": "Il y a un garçon dans les toilettes des filles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5k2",
            "EntityName": "A Flying Birthday Cake? (A Stepping Stone Book(TM))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5k9",
            "EntityName": "Why Pick on Me? (A Stepping Stone Book(TM))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5kj",
            "EntityName": "Small steps"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5kt",
            "EntityName": "Sideways stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5l7",
            "EntityName": "Wayside School Boxed Set"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5lg",
            "EntityName": "Stanley Yelnats' Survival Guide to Camp Green Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5lp",
            "EntityName": "Someday Angeline"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5m3",
            "EntityName": "Super Fast, Out of Control! (A Stepping Stone Book(TM))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5mb",
            "EntityName": "Holes Activity Pack"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5mk",
            "EntityName": "Löcher"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5mt",
            "EntityName": "Dogs Don't Tell Jokes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tx5n0",
            "EntityName": "Sideways Arithmetic From Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_cdl",
            "EntityName": "Small Steps (Readers Circle)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_cdw",
            "EntityName": "Small steps"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_kj_",
            "EntityName": "Someday Angeline (Avon/Camelot Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_kj0",
            "EntityName": "Someday Angeline"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_kjh",
            "EntityName": "Someday Angeline (Avon/Camelot Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_kjr",
            "EntityName": "Someday Angeline (Avon/Camelot Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09_5",
            "EntityName": "Sideways stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09_n",
            "EntityName": "Sideways stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09wp",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09x5",
            "EntityName": "Sideways stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09xf",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09xp",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09xy",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09yr",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09zg",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5xwx",
            "EntityName": "More Sideways Arithmetic from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5xx4",
            "EntityName": "More Sideways Arithmetic From Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5xxw",
            "EntityName": "More Sideways Arithmetic from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfmz4",
            "EntityName": "Stanley Yelnats Survival Guide to Camp Green Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfsfw",
            "EntityName": "The boy who lost his face"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfsh_",
            "EntityName": "Boy Who Lost His Face"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfsh5",
            "EntityName": "The boy who lost his face"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfsj7",
            "EntityName": "The Boy Who Lost His Face"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfy26",
            "EntityName": "Wayside School Gets a Little Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfy2h",
            "EntityName": "Wayside School Gets a Little Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfy3m",
            "EntityName": "Wayside School Gets a Little Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfy3x",
            "EntityName": "Wayside School Gets a Little Stranger (rack) (Wayside School)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfy9y",
            "EntityName": "Sideways Arithmetic from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfybn",
            "EntityName": "Sideways Arithmetic from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfyby",
            "EntityName": "Sideways Arithmetic from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_0q",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_1f",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_1z",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_26",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_2z",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_3p",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_47",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_4h",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_4s",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_50",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_58",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_5j",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_5s",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_60",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_68",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_6j",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_6t",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_71",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_80",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk_8s",
            "EntityName": "Marvin Redpost."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk0f_",
            "EntityName": "Wayside School is Falling Down"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk0g_",
            "EntityName": "Wayside School is falling down (Celebrate reading, Scott Foresman)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk0gr",
            "EntityName": "Wayside School Is Falling Down"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk0h_",
            "EntityName": "Wayside School Is Falling Down"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk0hh",
            "EntityName": "Wayside School Is Falling Down"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk0hr",
            "EntityName": "Wayside School Is Falling Down"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk0jj",
            "EntityName": "Wayside School is falling down"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj56",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj5g",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj5q",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj5z",
            "EntityName": "Sideways stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj6z",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj76",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj7g",
            "EntityName": "Sideways stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vkj8s",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vl07k",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vl080",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vl08h",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vl08z",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vl09f",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztq0",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztq9",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztqt",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztrl",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztrv",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzts9",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztst",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztt1",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztt9",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzttl",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztv0",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztv9",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztvk",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztvv",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztw2",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztwb",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztwl",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztww",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vztx4",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzwd7",
            "EntityName": "Holes (Yearling Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzwdh",
            "EntityName": "Holes (with \\\"Connections\\\") HRW Library (HRW library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzwf8",
            "EntityName": "Holes. (Lernmaterialien)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzwfv",
            "EntityName": "Holes (Cascades)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzwg2",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzwgy",
            "EntityName": "Holes. (Lernmaterialien)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzwh6",
            "EntityName": "Holes (Readers Circle)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzwhg",
            "EntityName": "Holes (World Book Day 2001)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vzwj8",
            "EntityName": "Holes (Listening Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w058k",
            "EntityName": "Sixth Grade Secrets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w059b",
            "EntityName": "Sixth grade secrets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w059v",
            "EntityName": "Sixth Grade Secrets"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w05b2",
            "EntityName": "Sixth Grade Secrets (An Apple Paperback)"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1538.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq8d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq8d ns:book.author.works_written ?x .\n}\n",
        "PotentialTopicEntityMention": "louis sachar",
        "TopicEntityName": "Louis Sachar",
        "TopicEntityMid": "m.01bq8d",
        "InferentialChain": [
          "book.author.works_written"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.1218f5g0",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r2x8r",
            "EntityName": "Kidnapped at Birth?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r3l0q",
            "EntityName": "A Flying Birthday Cake?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011brh75",
            "EntityName": "More Sideways Arithmetic from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027bxn3",
            "EntityName": "Sideways Stories from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027bxq6",
            "EntityName": "Wayside School is Falling Down"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027bxzt",
            "EntityName": "Wayside School Gets A Little Stranger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027by4_",
            "EntityName": "Sideways Arithmetic from Wayside School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03tgtr",
            "EntityName": "Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t484_",
            "EntityName": "Der Fluch des David Ballinger. ( Ab 11 J.)."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t4842",
            "EntityName": "Johnny's in the Basement"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t484b",
            "EntityName": "Class President"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t484l",
            "EntityName": "A magic crystal?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t485_",
            "EntityName": "Why Pick on Me?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t485h",
            "EntityName": "Il y a un garçon dans les toilettes des filles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t4867",
            "EntityName": "Wayside School Collection"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t486h",
            "EntityName": "Super Fast, Out of Control!"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.067d3d8",
            "EntityName": "Alone in His Teacher's House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.069nlkb",
            "EntityName": "Pequenos Pasos/ Small Steps"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06blrtc",
            "EntityName": "Louis Sacher Collection"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06ck0yg",
            "EntityName": "Hoyos/Holes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06dymp",
            "EntityName": "The Boy Who Lost His Face"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06hhh6t",
            "EntityName": "Hay Un Chico En El Bano De Las Chicas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tm95g",
            "EntityName": "Monkey soup"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09yl25",
            "EntityName": "Dogs Don't Tell Jokes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cmt6c",
            "EntityName": "Small Steps"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dh2fh",
            "EntityName": "There's a Boy in the Girls' Bathroom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dl1lt",
            "EntityName": "Someday Angeline"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f8d9g",
            "EntityName": "Stanley Yelnats' Survival Guide to Camp Green Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f95rs",
            "EntityName": "Marvin Redpost"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fq08x0",
            "EntityName": "The Cardturner"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0jhl",
            "EntityName": "Sixth Grade Secrets"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01bq8d": "Louis Sachar"
    },
    "qid_topic_entity": {
      "Q553137": "Louis Sachar"
    },
    "NoisyQuestion": "what books did louis sachar wrote?"
  },
  {
    "QuestionId": "WebQTest-1275",
    "RawQuestion": "what does helen flanagan do?",
    "ProcessedQuestion": "what does helen flanagan do",
    "Parses": [
      {
        "ParseId": "WebQTest-1275.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.087k1_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.087k1_ ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "helen flanagan",
        "TopicEntityName": "Helen Flanagan",
        "TopicEntityMid": "m.087k1_",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hrh1q",
            "EntityName": "Actor"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.087k1_": "Helen Flanagan"
    },
    "qid_topic_entity": {
      "Q5702260": "Helen Flanagan"
    },
    "NoisyQuestion": "what does helan flanagan do?"
  },
  {
    "QuestionId": "WebQTest-1272",
    "RawQuestion": "when did the burma cyclone happen?",
    "ProcessedQuestion": "when did the burma cyclone happen",
    "Parses": [
      {
        "ParseId": "WebQTest-1272.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.041l08b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.041l08b ns:meteorology.tropical_cyclone.formed ?x .\n}\n",
        "PotentialTopicEntityMention": "burma cyclone",
        "TopicEntityName": "Cyclone Nargis",
        "TopicEntityMid": "m.041l08b",
        "InferentialChain": [
          "meteorology.tropical_cyclone.formed"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "2008-04-27",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.041l08b": "Cyclone Nargis"
    },
    "qid_topic_entity": {
      "Q152314": "Cyclone Nargis"
    },
    "NoisyQuestion": "when did the burma cyclone happen?"
  },
  {
    "QuestionId": "WebQTest-447",
    "RawQuestion": "what did laura ingalls wilder wrote?",
    "ProcessedQuestion": "what did laura ingalls wilder wrote",
    "Parses": [
      {
        "ParseId": "WebQTest-447.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bt87)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bt87 ns:book.author.book_editions_published ?x .\n}\n",
        "PotentialTopicEntityMention": "laura ingalls wilder",
        "TopicEntityName": "Laura Ingalls Wilder",
        "TopicEntityMid": "m.01bt87",
        "InferentialChain": [
          "book.author.book_editions_published"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028xv15",
            "EntityName": "Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3_d",
            "EntityName": "On the banks of Plum Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3_v",
            "EntityName": "Dance at Grandpa's (My First Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3sz",
            "EntityName": "A Little house reader"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3td",
            "EntityName": "A little house sampler"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3v8",
            "EntityName": "A little house treasury"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3vt",
            "EntityName": "Winter on the Farm (My First Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3w0",
            "EntityName": "Little House Farm Days"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3w7",
            "EntityName": "My Little House Chapter Book Collection"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3wg",
            "EntityName": "By the shores of Silver Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3wx",
            "EntityName": "Little town on the prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3x_",
            "EntityName": "Laura & Mr. Edwards (Little House Chapter Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3xb",
            "EntityName": "Little House the Laura Years Boxed Set"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3xk",
            "EntityName": "Prairie Day (My First Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3xs",
            "EntityName": "The Little House Collection"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3y6",
            "EntityName": "West from home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3ym",
            "EntityName": "Laura's Christmas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3yw",
            "EntityName": "A Little Prairie House (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3z2",
            "EntityName": "These happy golden years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3zj",
            "EntityName": "Going to Town (My First Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3zr",
            "EntityName": "Dear Laura"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv3zz",
            "EntityName": "On the way home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv401",
            "EntityName": "The adventures of Laura and Jack"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv40h",
            "EntityName": "My Book of Little House Paper Dolls"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv40r",
            "EntityName": "Laura & Nellie (Little House Chapter Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv40z",
            "EntityName": "Christmas Stories (Little House Chapter Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv415",
            "EntityName": "Pioneer Sisters (Little House Chapter Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv41d",
            "EntityName": "The long winter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv41v",
            "EntityName": "Little House (9 Books, Boxed Set)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv421",
            "EntityName": "Hard Times on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv428",
            "EntityName": "Going West (My First Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv42h",
            "EntityName": "Little House Friends (Little House Chapter Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv42q",
            "EntityName": "School Days (Little House Chapter Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv42y",
            "EntityName": "Christmas in the Big Woods (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv434",
            "EntityName": "The First Four Years CD (Little House the Laura Years)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv43c",
            "EntityName": "A Little house traveler"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv43n",
            "EntityName": "Sugar Snow (My First Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv43w",
            "EntityName": "Saving graces"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv449",
            "EntityName": "Animal Adventures (Little House Chapter Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv44j",
            "EntityName": "The Deer in the Wood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv44r",
            "EntityName": "Santa comes to little house"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv455",
            "EntityName": "County Fair (My First Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv45d",
            "EntityName": "Little house on the prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv45v",
            "EntityName": "Words from a fearless heart"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv468",
            "EntityName": "A Farmer Boy Birthday (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv46h",
            "EntityName": "Little House Parties (Little House Chapter Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv46q",
            "EntityName": "Laura's Early Years Collection"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv46y",
            "EntityName": "Farmer Boy Days (Little House Chapter Book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tv474",
            "EntityName": "My Little House Songbook (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v60_0",
            "EntityName": "Little house in the big woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v60_g",
            "EntityName": "Little House in the Big Woods."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v60_q",
            "EntityName": "Little house in the big woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v60xs",
            "EntityName": "Little house in the big woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v60yj",
            "EntityName": "Little House in the Big Woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v60yt",
            "EntityName": "Little House in the Big Woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v60z2",
            "EntityName": "Little House in the Big Woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v60zb",
            "EntityName": "Little house in the big woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v60zr",
            "EntityName": "Little House in the Big Woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v6103",
            "EntityName": "Little house in the big woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v610t",
            "EntityName": "Little house in the big woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v6136",
            "EntityName": "Little house in the big woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v619n",
            "EntityName": "Farmer Boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v619x",
            "EntityName": "Farmer boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61bb",
            "EntityName": "Farmer boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61bt",
            "EntityName": "Farmer Boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61c1",
            "EntityName": "Farmer Boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61c9",
            "EntityName": "Farmer Boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61cl",
            "EntityName": "Farmer Boy (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61cv",
            "EntityName": "Farmer Boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61d2",
            "EntityName": "Farmer Boy (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61db",
            "EntityName": "Farmer boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61dt",
            "EntityName": "Farmer Boy (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61fj",
            "EntityName": "Farmer Boy (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61g0",
            "EntityName": "Farmer Boy (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v61gk",
            "EntityName": "Farmer Boy (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62r4",
            "EntityName": "Little House in the Big Woods (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62rn",
            "EntityName": "Little House in the Big Woods (Classic Mammoth)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62ry",
            "EntityName": "Little House in the Big Woods (Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62sf",
            "EntityName": "Little House in the Big Woods 75th Anniversary Edition (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62sp",
            "EntityName": "Little House in the Big Woods (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62sy",
            "EntityName": "Little House In The Big Woods CD (Little House the Laura Years)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62t5",
            "EntityName": "Little House in the Big Woods (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62tf",
            "EntityName": "Little House in the Big Woods (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62tp",
            "EntityName": "Little House in the Big Woods Book and Charm (Charming Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62ty",
            "EntityName": "A Farmer Boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62vf",
            "EntityName": "Farmer Boy (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62w4",
            "EntityName": "Farmer Boy (Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v62wz",
            "EntityName": "Farmer Boy (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v63s9",
            "EntityName": "Little House in the Big Woods (Isis Large Print for Children Windrush)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v63sl",
            "EntityName": "Little House In The Big Woods Unabr CD Low Price (Little House the Laura Years)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk6g",
            "EntityName": "The first four years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk6x",
            "EntityName": "The First Four Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk74",
            "EntityName": "The First Four Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk7d",
            "EntityName": "The first four years."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk7w",
            "EntityName": "The first four years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk8b",
            "EntityName": "The First Four Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk8l",
            "EntityName": "The First Four Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk8v",
            "EntityName": "The First Four Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk92",
            "EntityName": "The First Four Years (Little House the Laura Years)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk9n",
            "EntityName": "First Four Years (Little House (HarperTrophy))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfk9x",
            "EntityName": "The First Four Years (Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfkbm",
            "EntityName": "The First Four Years (Little House (Original Series Library))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vfkbw",
            "EntityName": "First Four Years (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhcqn",
            "EntityName": "The Long Winter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhcr5",
            "EntityName": "Long Winter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhcrf",
            "EntityName": "The Long Winter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhcrq",
            "EntityName": "The Long Winter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhcs_",
            "EntityName": "The Long Winter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhcs7",
            "EntityName": "Long Winter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhcsh",
            "EntityName": "The Long Winter (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhcsr",
            "EntityName": "The Long Winter (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhct7",
            "EntityName": "The Long Winter (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhcth",
            "EntityName": "The Long Winter (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhf3b",
            "EntityName": "Long Winter (Little House (HarperTrophy))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhf3w",
            "EntityName": "The Long Winter (Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhf43",
            "EntityName": "Long Winter (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vhf4w",
            "EntityName": "The Long Winter (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj_94",
            "EntityName": "By the Shores of Silver Lake (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj_bg",
            "EntityName": "By the Shores of Silver Lake (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2kx",
            "EntityName": "Little Town on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2mg",
            "EntityName": "Little Town on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2mq",
            "EntityName": "Little Town on the Prairie CD"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2mz",
            "EntityName": "Little Town on the Prairie (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2n_",
            "EntityName": "Little Town on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2n6",
            "EntityName": "Little Town on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2nh",
            "EntityName": "Little Town on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2nr",
            "EntityName": "Little Town on the Prairie (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2pr",
            "EntityName": "Little Town on the Prairie (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2q0",
            "EntityName": "Little Town on the Prairie (Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj2q8",
            "EntityName": "Little Town on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj347",
            "EntityName": "Little Town On The Prairie (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5v9",
            "EntityName": "These Happy Golden Years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5x3",
            "EntityName": "These Happy Golden Years CD"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5xc",
            "EntityName": "These happy golden years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5xt",
            "EntityName": "These Happy Golden Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5y1",
            "EntityName": "These Happy Golden Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5y9",
            "EntityName": "These Happy Golden Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5yk",
            "EntityName": "These Happy Golden Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5z2",
            "EntityName": "These Happy Golden Years (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5zb",
            "EntityName": "These Happy Golden Years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj5zl",
            "EntityName": "These Happy Golden Years (Laura Years)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj6sy",
            "EntityName": "These Happy Golden Years (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj6ty",
            "EntityName": "These Happy Golden Years (Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj6vq",
            "EntityName": "These Happy Golden Years (Little House on the Prairie)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vj6w8",
            "EntityName": "These Happy Golden Years (Little House (HarperTrophy))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy1q",
            "EntityName": "On the Banks of Plum Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy1z",
            "EntityName": "On the Banks of Plum Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy27",
            "EntityName": "On the Banks of Plum Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy2k",
            "EntityName": "On the Banks of Plum Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy2w",
            "EntityName": "On the Banks of Plum Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy3d",
            "EntityName": "On the Banks of Plum Creek (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy3p",
            "EntityName": "On the Banks of Plum Creek (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy3z",
            "EntityName": "On the Banks of Plum Creek (One Cassette)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy46",
            "EntityName": "On the Banks of Plum Creek (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy4g",
            "EntityName": "On the Banks of Plum Creek (Little House the Laura Years)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjy4q",
            "EntityName": "On the Banks of Plum Creek (Classic Mammoth)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjysz",
            "EntityName": "On the Banks of Plum Creek CD (Little House the Laura Years)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjyt6",
            "EntityName": "On the Banks of Plum Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjytq",
            "EntityName": "On the Banks of Plum Creek (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjyvg",
            "EntityName": "On the Banks of Plum Creek (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjz_f",
            "EntityName": "By the Shores of Silver Lake (Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjzw_",
            "EntityName": "By the Shores of Silver Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjzxk",
            "EntityName": "By the shores of Silver Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjzy0",
            "EntityName": "By the Shores of Silver Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjzy8",
            "EntityName": "By the Shores of Silver Lake (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjzyj",
            "EntityName": "By the shores of Silver Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjzyy",
            "EntityName": "By the Shores of Silver Lake CD (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjzz5",
            "EntityName": "By the Shores of Silver Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjzzg",
            "EntityName": "By the Shores of Silver Lake (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vjzzq",
            "EntityName": "By the Shores of Silver Lake (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk2qs",
            "EntityName": "West from Home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk2rb",
            "EntityName": "West from home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk2rt",
            "EntityName": "West from Home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk30q",
            "EntityName": "On the way home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk34c",
            "EntityName": "On the Way Home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk34p",
            "EntityName": "On the way home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk35b",
            "EntityName": "On the Way Home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk35m",
            "EntityName": "On the Way Home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vk35w",
            "EntityName": "On the Way Home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9mc",
            "EntityName": "A Little House Reader"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9ns",
            "EntityName": "A Little House Sampler"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9p3",
            "EntityName": "A Little House Sampler"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9qg",
            "EntityName": "A Little Prairie House (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9r1",
            "EntityName": "Little House Farm Days (Little House Chapter Books/the Laura Years, 7)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9rb",
            "EntityName": "Little House Farm Days (Little House Chapter Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9s3",
            "EntityName": "Dear Laura"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9vt",
            "EntityName": "Winter on the Farm (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9x4",
            "EntityName": "Winter on the Farm (My First Little House Books (Sagebrush))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9xg",
            "EntityName": "The Adventures of Laura and Jack (A Little House Chapter Book) (A Little house chapter book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9xr",
            "EntityName": "Christmas Stories (Little House Chapter Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vr9yb",
            "EntityName": "Christmas Stories (Little House Chapter Books/the Laura Years, 10)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb04",
            "EntityName": "Going to Town"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb0k",
            "EntityName": "My Book of Little House Paper Dolls"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb0t",
            "EntityName": "Going to Town (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb12",
            "EntityName": "Going to Town (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb1c",
            "EntityName": "Little House Friends (Little House Chapter Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb1n",
            "EntityName": "Going to Town (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb1x",
            "EntityName": "Little House Friends (Little House Chapter Books/the Laura Years, 9)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb24",
            "EntityName": "Hard Times on the Prairie (Little House Chapter Books/the Laura Years, 8)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb2d",
            "EntityName": "Going to town"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb2p",
            "EntityName": "Going West (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb2y",
            "EntityName": "Hard Times on the Prairie (Little House Chapter Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb3_",
            "EntityName": "Pioneer Sisters (Laura (Econo-Clad))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb36",
            "EntityName": "Pioneer Sisters (Little House Chapter Books/the Laura Years, 2)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb49",
            "EntityName": "Going West (My First Little Houe Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb4l",
            "EntityName": "Christmas in the Big Woods (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb4x",
            "EntityName": "Going West (My First Little House Books (Sagebrush))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb55",
            "EntityName": "Christmas in the Big Woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb5f",
            "EntityName": "Christmas in the Big Woods (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb5q",
            "EntityName": "Sugar Snow (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb5z",
            "EntityName": "Sugar Snow (My First Little House Books (Sagebrush))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb6d",
            "EntityName": "A Little House Collection"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb6n",
            "EntityName": "Animal Adventures (Little House Chapter Books/the Laura Years, 3)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb6x",
            "EntityName": "The Little House Collection Box Set (Full Color) (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb75",
            "EntityName": "Animal Adventures (Little House Chapter Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb7f",
            "EntityName": "School Days (Little House Chapter Books/the Laura Years, 4)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb7q",
            "EntityName": "School Days (Laura (Econo-Clad))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb80",
            "EntityName": "School days (Little house chapter book)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb88",
            "EntityName": "County Fair (My First Little House Books (Sagebrush))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb8l",
            "EntityName": "Little House Parties (Little House Chapter Books/the Laura Years, 14)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb8y",
            "EntityName": "Little House Parties (Little House Chapter Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb96",
            "EntityName": "Farmer Boy Days (Little House Chapter Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb9h",
            "EntityName": "Farmer Boy Days (Little House Chapter Books/the Laura Years, 6)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrb9r",
            "EntityName": "Santa Comes to Little House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbb1",
            "EntityName": "The Deer in the Wood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbb9",
            "EntityName": "My Little House Songbook (My First Little House Books Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbbl",
            "EntityName": "The Deer in the Wood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbbv",
            "EntityName": "My Little House Songbook (My First Little House Books, No 1)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbc2",
            "EntityName": "Santa Comes to Little House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbcb",
            "EntityName": "Santa Comes to Little House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbcm",
            "EntityName": "Deer in the Wood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbcy",
            "EntityName": "The deer in the wood (My first Little house books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbd5",
            "EntityName": "The Deer in the Wood (My First Little House Books (Sagebrush))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbdf",
            "EntityName": "The Deer in the Wood (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbdp",
            "EntityName": "The Deer in the Wood (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vrbdz",
            "EntityName": "The Deer in the Wood (My First Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01c1",
            "EntityName": "Little House on the Prairie (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01c9",
            "EntityName": "Little House on the Prairie (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01ck",
            "EntityName": "Little House on the Prairie (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01d2",
            "EntityName": "Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01db",
            "EntityName": "Little house on the prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01dn",
            "EntityName": "Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01f5",
            "EntityName": "Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01g5",
            "EntityName": "The Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01h5",
            "EntityName": "The Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01hg",
            "EntityName": "Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w01j7",
            "EntityName": "Little House On The Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w03z6",
            "EntityName": "Little house on the prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w040v",
            "EntityName": "Little house on the prairie."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w0412",
            "EntityName": "Little house on the prairie."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w041j",
            "EntityName": "Little House On The Prairie (Little House the Laura Years)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w041s",
            "EntityName": "Little house on the prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w0426",
            "EntityName": "Little house on the prairie."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w043p",
            "EntityName": "Little house on the prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06jj",
            "EntityName": "Little House on the Prairie (Classic Mammoth)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06jt",
            "EntityName": "Little House on the Prairie NW 247"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06ks",
            "EntityName": "Little House on the Prairie (Little Brown Notebook Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06l1",
            "EntityName": "Little House on the Prairie (Little House Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06l9",
            "EntityName": "Little House on the Prairie (Little House (HarperTrophy))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06lt",
            "EntityName": "Little House On The Prairie CD (Little House the Laura Years)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06mm",
            "EntityName": "Little House on the Prairie Tie-in Edition (Little House)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06mw",
            "EntityName": "Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06ng",
            "EntityName": "Little House On The Prairie (Little House (Original Series Paperback))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w06nq",
            "EntityName": "Little House on the Prairie Book and Charm (Charming Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w07f9",
            "EntityName": "Little House On The Prairie Low Price CD"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w07gk",
            "EntityName": "Little House on the Prairie Boxed Set ((9 Books) Little House On the Prairie; Farmer Boy; On the Banks of Plum Creek; the Long Winter; These Happy Golden Years; the First Four Years; By the Shores of Silver Lake; Little House In the Big Woods; Little Town On the Prairie)"
          }
        ]
      },
      {
        "ParseId": "WebQTest-447.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bt87)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bt87 ns:book.author.works_written ?x .\n}\n",
        "PotentialTopicEntityMention": "laura ingalls wilder",
        "TopicEntityName": "Laura Ingalls Wilder",
        "TopicEntityMid": "m.01bt87",
        "InferentialChain": [
          "book.author.works_written"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.11b60fcs_w",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.122chq7m",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ggzp5",
            "EntityName": "Little House in the Ozarks: The Rediscovered Writings"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_gh1b9",
            "EntityName": "A Little House Birthday"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_gh2zr",
            "EntityName": "Summertime in the Big Woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_gh312",
            "EntityName": "Winter Days in the Big Woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_gh3gq",
            "EntityName": "Bedtime for Laura"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_gh4d6",
            "EntityName": "Laura Helps Pa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_gh67y",
            "EntityName": "Laura's Garden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_gh69s",
            "EntityName": "Hello, Laura!"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_gh9fh",
            "EntityName": "My Book of Little House Christmas Paper Dolls: Christmas on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ghb47",
            "EntityName": "My Little House 123"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ghcz6",
            "EntityName": "My Little House Birthday Book"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ghdw7",
            "EntityName": "My Little House Book of Animals"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ghdyx",
            "EntityName": "My Little House Book of Family"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ghfbg",
            "EntityName": "My Little House Book of Memories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ghfvc",
            "EntityName": "My Little House Diary"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ghfx8",
            "EntityName": "Dear Laura: Letters from Children to Laura Ingalls Wilder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ghgcw",
            "EntityName": "Little House Sisters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ghgmr",
            "EntityName": "The Little House Baby Book"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r34qs",
            "EntityName": "Santa comes to little house"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r3lf1",
            "EntityName": "Laura & Mr. Edwards"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r4070",
            "EntityName": "Saving graces"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r40l7",
            "EntityName": "Little House Friends"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r4f77",
            "EntityName": "A Farmer Boy Birthday"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r4sgv",
            "EntityName": "A Little House Reader"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r506y",
            "EntityName": "Little House Farm Days"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010r8h92",
            "EntityName": "Country Fair"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010rnr_1",
            "EntityName": "Christmas Stories"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027qfnk",
            "EntityName": "The Long Winter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02q8085",
            "EntityName": "The First Four Years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qqh0p",
            "EntityName": "Little House in the Big Woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02vl7t6",
            "EntityName": "On the Banks of Plum Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x87pj",
            "EntityName": "By the Shores of Silver Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x87s8",
            "EntityName": "Little Town on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x87t_",
            "EntityName": "These Happy Golden Years"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x880w",
            "EntityName": "Farmer Boy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0462nj3",
            "EntityName": "West from Home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0462r95",
            "EntityName": "On the Way Home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31_h",
            "EntityName": "School Days"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31_r",
            "EntityName": "Christmas in the Big Woods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31th",
            "EntityName": "A little house sampler"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31v_",
            "EntityName": "Little House the Laura Years Boxed Set"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31v7",
            "EntityName": "Winter on the Farm"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31vr",
            "EntityName": "My Little House Chapter Book Collection"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31w_",
            "EntityName": "Laura's Christmas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31w7",
            "EntityName": "Prairie Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31wh",
            "EntityName": "A little house treasury"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31x_",
            "EntityName": "Dance at Grandpa's"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31x7",
            "EntityName": "A Little Prairie House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31xh",
            "EntityName": "Going to Town"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31xr",
            "EntityName": "Dear Laura"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31y7",
            "EntityName": "The adventures of Laura and Jack"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31yh",
            "EntityName": "My Book of Little House Paper Dolls"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31yr",
            "EntityName": "Laura & Nellie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31z_",
            "EntityName": "Going West"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31z7",
            "EntityName": "Pioneer Sisters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31zh",
            "EntityName": "Little House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t31zr",
            "EntityName": "Hard Times on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t320_",
            "EntityName": "The Deer in the Wood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t3207",
            "EntityName": "Sugar Snow"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t320r",
            "EntityName": "Animal Adventures"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t321r",
            "EntityName": "Words from a fearless heart"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t322_",
            "EntityName": "My Little House Songbook"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t3227",
            "EntityName": "Little House Parties"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t322h",
            "EntityName": "Laura's Early Years Collection"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t322r",
            "EntityName": "Farmer Boy Days"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06_tw6s",
            "EntityName": "A Little House Traveler"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06614rb",
            "EntityName": "Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.068f65l",
            "EntityName": "A FAMILY COLLECTION"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.069832t",
            "EntityName": "Orillas del río Plum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bwxcn",
            "EntityName": "1998 Laura Ingalls Wilder Country Engagement Book"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06dgz9j",
            "EntityName": "Caroline and Her Sister"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06dwl46",
            "EntityName": "The Complete Little House on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06jjd8t",
            "EntityName": "Laura's Little House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06qllnk",
            "EntityName": "Laura Ingalls Wilder's prairie wisdom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06qzzw7",
            "EntityName": "Largo Invierno"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06s4dxs",
            "EntityName": "A Day on the Prairie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tlq0c",
            "EntityName": "Laura's Pa"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tprs4",
            "EntityName": "Writings to young women from Laura Ingalls Wilder"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j3zd0c",
            "EntityName": "Little House on the Prairie"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01bt87": "Laura Ingalls Wilder"
    },
    "qid_topic_entity": {
      "Q237514": "Laura Ingalls Wilder"
    },
    "NoisyQuestion": "what did laura ingalls wilder wrot?"
  },
  {
    "QuestionId": "WebQTest-1851",
    "RawQuestion": "what countries are located near egypt?",
    "ProcessedQuestion": "what countries are located near egypt",
    "Parses": [
      {
        "ParseId": "WebQTest-1851.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PotentialTopicEntityMention": "egypt",
        "TopicEntityName": "Egypt",
        "TopicEntityMid": "m.02k54",
        "InferentialChain": [
          "location.location.adjoin_s",
          "location.adjoining_relationship.adjoins"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01mp",
            "EntityName": "Country",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03spz",
            "EntityName": "Israel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gqr",
            "EntityName": "Libya"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tw8",
            "EntityName": "Sudan"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02k54": "Egypt"
    },
    "qid_topic_entity": {
      "Q79": "Egypt"
    },
    "NoisyQuestion": "what countries are located near egipt?"
  },
  {
    "QuestionId": "WebQTest-1314",
    "RawQuestion": "where should a family stay in paris?",
    "ProcessedQuestion": "where should a family stay in paris",
    "Parses": [
      {
        "ParseId": "WebQTest-1314.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qtj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qtj ns:travel.travel_destination.accommodation ?x .\n}\n",
        "PotentialTopicEntityMention": "paris",
        "TopicEntityName": "Paris",
        "TopicEntityMid": "m.05qtj",
        "InferentialChain": [
          "travel.travel_destination.accommodation"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04fcxl",
            "EntityName": "Hôtel de Crillon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.056n81",
            "EntityName": "Hôtel Ritz Paris"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05qtj": "Paris"
    },
    "qid_topic_entity": {
      "Q90": "Paris"
    },
    "NoisyQuestion": "where should a family stay in paris?"
  },
  {
    "QuestionId": "WebQTest-1121",
    "RawQuestion": "what is kentucky state slogan?",
    "ProcessedQuestion": "what is kentucky state slogan",
    "Parses": [
      {
        "ParseId": "WebQTest-1121.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0498y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0498y ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.0j749 .\n}\n",
        "PotentialTopicEntityMention": "kentucky",
        "TopicEntityName": "Kentucky",
        "TopicEntityMid": "m.0498y",
        "InferentialChain": [
          "government.governmental_jurisdiction.official_symbols",
          "location.location_symbol_relationship.symbol"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0j749",
            "EntityName": "Motto",
            "SourceNodeIndex": 0,
            "NodePredicate": "location.location_symbol_relationship.Kind_of_symbol",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b0jhz",
            "EntityName": "United we stand, divided we fall"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0498y": "Kentucky"
    },
    "qid_topic_entity": {
      "Q1603": "Kentucky"
    },
    "NoisyQuestion": "what is kentucky state slogan?"
  },
  {
    "QuestionId": "WebQTest-73",
    "RawQuestion": "what language do the maasai tribe speak?",
    "ProcessedQuestion": "what language do the maasai tribe speak",
    "Parses": [
      {
        "ParseId": "WebQTest-73.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.054vv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.054vv ns:people.ethnicity.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "maasai",
        "TopicEntityName": "Maasai people",
        "TopicEntityMid": "m.054vv",
        "InferentialChain": [
          "people.ethnicity.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064kl7",
            "EntityName": "Maasai Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.054vv": "Maasai people"
    },
    "qid_topic_entity": {
      "Q163022": "Maasai people"
    },
    "NoisyQuestion": "what language do the maasi tribe speak?"
  },
  {
    "QuestionId": "WebQTest-1996",
    "RawQuestion": "who played maggie in himym?",
    "ProcessedQuestion": "who played maggie in himym",
    "Parses": [
      {
        "ParseId": "WebQTest-1996.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h67q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h67q ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "maggie",
        "TopicEntityName": "Maggie Simpson",
        "TopicEntityMid": "m.0h67q",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0sw62",
            "EntityName": "Nancy Cartwright"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0h67q": "Maggie Simpson"
    },
    "qid_topic_entity": {
      "Q7834": "Maggie Simpson"
    },
    "NoisyQuestion": "who played maggi in himym?"
  },
  {
    "QuestionId": "WebQTest-134",
    "RawQuestion": "what type of books did agatha christie wrote?",
    "ProcessedQuestion": "what type of books did agatha christie wrote",
    "Parses": [
      {
        "ParseId": "WebQTest-134.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ldd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ldd ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "agatha christie",
        "TopicEntityName": "Agatha Christie",
        "TopicEntityMid": "m.0ldd",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hv44_",
            "EntityName": "Playwright"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02xhgwq",
            "EntityName": "Novelist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05z96",
            "EntityName": "Poet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dxtg",
            "EntityName": "Screenwriter"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ldd": "Agatha Christie"
    },
    "qid_topic_entity": {
      "Q35064": "Agatha Christie"
    },
    "NoisyQuestion": "what type of books did agatha chrsitie wrote?"
  },
  {
    "QuestionId": "WebQTest-1811",
    "RawQuestion": "who are the senators of new jersey now?",
    "ProcessedQuestion": "who are the senators of new jersey now",
    "Parses": [
      {
        "ParseId": "WebQTest-1811.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05fjf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05fjf ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.governmental_body ns:m.07t58 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "new jersey",
        "TopicEntityName": "New Jersey",
        "TopicEntityMid": "m.05fjf",
        "InferentialChain": [
          "government.political_district.representatives",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.07t58",
            "EntityName": "United States Senate",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.governmental_body",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": "now"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.033d3p",
            "EntityName": "Bob Menendez"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06p430",
            "EntityName": "Cory Booker"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05fjf": "New Jersey"
    },
    "qid_topic_entity": {
      "Q1408": "New Jersey"
    },
    "NoisyQuestion": "who are the senetors of new jersey now?"
  },
  {
    "QuestionId": "WebQTest-1160",
    "RawQuestion": "who is the mother of prince michael jackson?",
    "ProcessedQuestion": "who is the mother of prince michael jackson",
    "Parses": [
      {
        "ParseId": "WebQTest-1160.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.02zsn .\n}\n",
        "PotentialTopicEntityMention": "michael jackson",
        "TopicEntityName": "Michael Jackson",
        "TopicEntityMid": "m.09889g",
        "InferentialChain": [
          "people.person.parents"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02zsn",
            "EntityName": "Female",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.person.gender",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0524pr",
            "EntityName": "Katherine Jackson"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09889g": "Michael Jackson"
    },
    "qid_topic_entity": {
      "Q2831": "Michael Jackson"
    },
    "NoisyQuestion": "who is the mother of prince michel jackson?"
  },
  {
    "QuestionId": "WebQTest-537",
    "RawQuestion": "what has charlie hunnam been in?",
    "ProcessedQuestion": "what has charlie hunnam been in",
    "Parses": [
      {
        "ParseId": "WebQTest-537.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.057yk8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.057yk8 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "charlie hunnam",
        "TopicEntityName": "Charlie Hunnam",
        "TopicEntityMid": "m.057yk8",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.11b6gq6dl2",
            "EntityName": "Knights of the Roundtable: King Arthur"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02cbhg",
            "EntityName": "Cold Mountain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z0nhq",
            "EntityName": "Nicholas Nickleby"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04y5gz",
            "EntityName": "Whatever Happened to Harold Smith?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.079s_7",
            "EntityName": "Green Street"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bk88p",
            "EntityName": "Abandon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fh2v5",
            "EntityName": "Children of Men"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g55y4p",
            "EntityName": "The Ledge"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx0plf",
            "EntityName": "Deadfall"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gyffmd",
            "EntityName": "Frankie Go Boom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0yd81",
            "EntityName": "Pacific Rim"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zn1hg0",
            "EntityName": "Crimson Peak"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.057yk8": "Charlie Hunnam"
    },
    "qid_topic_entity": {
      "Q356294": "Charlie Hunnam"
    },
    "NoisyQuestion": "what has chaelle hunnam been in?"
  },
  {
    "QuestionId": "WebQTest-1317",
    "RawQuestion": "what the largest city in spain?",
    "ProcessedQuestion": "what the largest city in spain",
    "Parses": [
      {
        "ParseId": "WebQTest-1317.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "needed max filter but not present for population"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.location.contains ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"City\")\n?x ns:topic_server.population_number ?sk1 .\n}\nORDER BY DESC(xsd:float(?sk1))\nLIMIT 1\n",
        "PotentialTopicEntityMention": "spain",
        "TopicEntityName": "Spain",
        "TopicEntityMid": "m.06mkj",
        "InferentialChain": [
          "location.location.contains"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Value",
            "Argument": "City",
            "EntityName": null,
            "SourceNodeIndex": 0,
            "NodePredicate": "base.biblioness.bibs_location.loc_type",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": {
          "SortOrder": "Descending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "topic_server.population_number",
          "ValueType": "Number"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01zv_",
            "EntityName": "Catalonia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06mkj": "Spain"
    },
    "qid_topic_entity": {
      "Q29": "Spain"
    },
    "NoisyQuestion": "what the largest city in spain?"
  },
  {
    "QuestionId": "WebQTest-704",
    "RawQuestion": "who is thor heyerdahl?",
    "ProcessedQuestion": "who is thor heyerdahl",
    "Parses": [
      {
        "ParseId": "WebQTest-704.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09fcm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09fcm ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "thor heyerdahl",
        "TopicEntityName": "Thor Heyerdahl",
        "TopicEntityMid": "m.09fcm",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d_h8",
            "EntityName": "Film Producer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.029lh1",
            "EntityName": "Adventurer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jknp",
            "EntityName": "Film director"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02xlj97",
            "EntityName": "Ethnographer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06q2q",
            "EntityName": "Scientist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dgd_",
            "EntityName": "Cinematographer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09fcm": "Thor Heyerdahl"
    },
    "qid_topic_entity": {
      "Q133622": "Thor Heyerdahl"
    },
    "NoisyQuestion": "who is thor heyerdahl?"
  },
  {
    "QuestionId": "WebQTest-352",
    "RawQuestion": "what did albert speer design?",
    "ProcessedQuestion": "what did albert speer design",
    "Parses": [
      {
        "ParseId": "WebQTest-352.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0l4t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0l4t ns:architecture.architect.structures_designed ?x .\n}\n",
        "PotentialTopicEntityMention": "albert speer",
        "TopicEntityName": "Albert Speer",
        "TopicEntityMid": "m.0l4t",
        "InferentialChain": [
          "architecture.architect.structures_designed"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03js7d",
            "EntityName": "Olympiastadion"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j99j",
            "EntityName": "Reich Chancellery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06cwrf",
            "EntityName": "Deutsches Stadion"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06ft3z",
            "EntityName": "Volkshalle"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0l4t": "Albert Speer"
    },
    "qid_topic_entity": {
      "Q60045": "Albert Speer"
    },
    "NoisyQuestion": "what did albert speer design?"
  },
  {
    "QuestionId": "WebQTest-1534",
    "RawQuestion": "who are the coaches for the oakland raiders?",
    "ProcessedQuestion": "who are the coaches for the oakland raiders",
    "Parses": [
      {
        "ParseId": "WebQTest-1534.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05l71)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05l71 ns:american_football.football_team.current_head_coach ?x .\n}\n",
        "PotentialTopicEntityMention": "oakland raiders",
        "TopicEntityName": "Oakland Raiders",
        "TopicEntityMid": "m.05l71",
        "InferentialChain": [
          "american_football.football_team.current_head_coach"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h4k5d",
            "EntityName": "Tony Sparano"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05l71": "Oakland Raiders"
    },
    "qid_topic_entity": {
      "Q324523": "Oakland Raiders"
    },
    "NoisyQuestion": "who are the coaches for the oaklend raiders?"
  },
  {
    "QuestionId": "WebQTest-1582",
    "RawQuestion": "what time in china hong kong?",
    "ProcessedQuestion": "what time in china hong kong",
    "Parses": [
      {
        "ParseId": "WebQTest-1582.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03h64)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03h64 ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "hong kong",
        "TopicEntityName": "Hong Kong",
        "TopicEntityMid": "m.03h64",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04qqww",
            "EntityName": "Hong Kong Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03h64": "Hong Kong"
    },
    "qid_topic_entity": {
      "Q8646": "Hong Kong"
    },
    "NoisyQuestion": "what time in china hong kong?"
  },
  {
    "QuestionId": "WebQTest-1654",
    "RawQuestion": "what are bigos?",
    "ProcessedQuestion": "what are bigos",
    "Parses": [
      {
        "ParseId": "WebQTest-1654.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06815z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06815z ns:food.dish.type_of_dish1 ?x .\n}\n",
        "PotentialTopicEntityMention": "bigos",
        "TopicEntityName": "Bigos",
        "TopicEntityMid": "m.06815z",
        "InferentialChain": [
          "food.dish.type_of_dish1"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jnxw",
            "EntityName": "Stew"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06815z": "Bigos"
    },
    "qid_topic_entity": {
      "Q598222": "Bigos"
    },
    "NoisyQuestion": "what are bigos?"
  },
  {
    "QuestionId": "WebQTest-848",
    "RawQuestion": "where are the nordic countries?",
    "ProcessedQuestion": "where are the nordic countries",
    "Parses": [
      {
        "ParseId": "WebQTest-848.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0140mf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0140mf ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PotentialTopicEntityMention": "nordic countries",
        "TopicEntityName": "Nordic countries",
        "TopicEntityMid": "m.0140mf",
        "InferentialChain": [
          "location.location.contains"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01mp",
            "EntityName": "Country",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.014mxp",
            "EntityName": "Åland Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02vzc",
            "EntityName": "Finland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w9s",
            "EntityName": "Faroe Islands"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035v3",
            "EntityName": "Greenland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rj0",
            "EntityName": "Iceland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05b4w",
            "EntityName": "Norway"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0vqn",
            "EntityName": "Sweden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k6nt",
            "EntityName": "Denmark"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0140mf": "Nordic countries"
    },
    "qid_topic_entity": {
      "Q52062": "Nordic countries"
    },
    "NoisyQuestion": "where are the nordic countries?"
  },
  {
    "QuestionId": "WebQTest-2021",
    "RawQuestion": "what influenced john steinbeck to start writing?",
    "ProcessedQuestion": "what influenced john steinbeck to start writing",
    "Parses": [
      {
        "ParseId": "WebQTest-2021.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04107)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04107 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PotentialTopicEntityMention": "john steinbeck",
        "TopicEntityName": "John Steinbeck",
        "TopicEntityMid": "m.04107",
        "InferentialChain": [
          "influence.influence_node.influenced_by"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.023jy9",
            "EntityName": "Sherwood Anderson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07jrh",
            "EntityName": "Thomas Malory"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.084w8",
            "EntityName": "William Faulkner"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09482",
            "EntityName": "Robert Burns"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04107": "John Steinbeck"
    },
    "qid_topic_entity": {
      "Q39212": "John Steinbeck"
    },
    "NoisyQuestion": "what influenced jhon steinbeck to start writing?"
  },
  {
    "QuestionId": "WebQTest-624",
    "RawQuestion": "who plays elena gilbert on vampire diaries?",
    "ProcessedQuestion": "who plays elena gilbert on vampire diaries",
    "Parses": [
      {
        "ParseId": "WebQTest-624.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0790rw8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0790rw8 ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.05sy2k_ .\n}\n",
        "PotentialTopicEntityMention": "elena gilbert",
        "TopicEntityName": "Elena Gilbert",
        "TopicEntityMid": "m.0790rw8",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05sy2k_",
            "EntityName": "The Vampire Diaries",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.series",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027nwk2",
            "EntityName": "Nina Dobrev"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0790rw8": "Elena Gilbert"
    },
    "qid_topic_entity": {
      "Q908634": "Elena Gilbert"
    },
    "NoisyQuestion": "who plays elena gilbert on vampire diares?"
  },
  {
    "QuestionId": "WebQTest-1282",
    "RawQuestion": "under what political system does the united states government operate?",
    "ProcessedQuestion": "under what political system does the united states government operate",
    "Parses": [
      {
        "ParseId": "WebQTest-1282.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "united states government",
        "TopicEntityName": "United States of America",
        "TopicEntityMid": "m.09c7w0",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d9r3",
            "EntityName": "Presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j729",
            "EntityName": "Federal republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09c7w0": "United States of America"
    },
    "qid_topic_entity": {
      "Q30": "United States of America"
    },
    "NoisyQuestion": "under what political system does the united stetes government operate?"
  },
  {
    "QuestionId": "WebQTest-1161",
    "RawQuestion": "what is the clemson mascot name?",
    "ProcessedQuestion": "what is the clemson mascot name",
    "Parses": [
      {
        "ParseId": "WebQTest-1161.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012vwb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012vwb ns:education.educational_institution.mascot ?x .\n}\n",
        "PotentialTopicEntityMention": "clemson",
        "TopicEntityName": "Clemson University",
        "TopicEntityMid": "m.012vwb",
        "InferentialChain": [
          "education.educational_institution.mascot"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02nv3yz",
            "EntityName": "Clemson University The Tiger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05h9xpr",
            "EntityName": "The Tiger and the Cub"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.012vwb": "Clemson University"
    },
    "qid_topic_entity": {
      "Q631066": "Clemson University"
    },
    "NoisyQuestion": "what is the clemson mascal name?"
  },
  {
    "QuestionId": "WebQTest-159",
    "RawQuestion": "what time in hilo hawaii?",
    "ProcessedQuestion": "what time in hilo hawaii",
    "Parses": [
      {
        "ParseId": "WebQTest-159.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0r_ch)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0r_ch ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "hilo hawaii",
        "TopicEntityName": "Hilo",
        "TopicEntityMid": "m.0r_ch",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lctm",
            "EntityName": "Hawaii-Aleutian Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0r_ch": "Hilo"
    },
    "qid_topic_entity": {
      "Q216258": "Hilo"
    },
    "NoisyQuestion": "what time in hilo hawai?"
  },
  {
    "QuestionId": "WebQTest-944",
    "RawQuestion": "what was van halen first album?",
    "ProcessedQuestion": "what was van halen first album",
    "Parses": [
      {
        "ParseId": "WebQTest-944.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ycfj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ycfj ns:music.artist.album ?x .\n?x ns:music.album.release_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PotentialTopicEntityMention": "van halen",
        "TopicEntityName": "Van Halen",
        "TopicEntityMid": "m.0ycfj",
        "InferentialChain": [
          "music.artist.album"
        ],
        "Constraints": [],
        "Time": null,
        "Order": {
          "SortOrder": "Ascending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "music.album.release_date",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0vs85p3",
            "EntityName": "Ain't Talkin' 'Bout Love"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ycfj": "Van Halen"
    },
    "qid_topic_entity": {
      "Q190155": "Van Halen"
    },
    "NoisyQuestion": "what was vahn elen first album?"
  },
  {
    "QuestionId": "WebQTest-415",
    "RawQuestion": "what movies did tupac star in?",
    "ProcessedQuestion": "what movies did tupac star in",
    "Parses": [
      {
        "ParseId": "WebQTest-415.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07pzc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07pzc ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "tupac",
        "TopicEntityName": "Tupac Shakur",
        "TopicEntityMid": "m.07pzc",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02pkz7",
            "EntityName": "Murder Was the Case"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06974q",
            "EntityName": "Poetic Justice"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08dk0b",
            "EntityName": "Gridlock'd"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08dk10",
            "EntityName": "Above the Rim"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08w51z",
            "EntityName": "Juice"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c6vx0",
            "EntityName": "Nothing but Trouble"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cc2r_",
            "EntityName": "Gang Related"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f4nt1",
            "EntityName": "Bullet"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07pzc": "Tupac Shakur"
    },
    "qid_topic_entity": {
      "Q6107": "Tupac Shakur"
    },
    "NoisyQuestion": "what movies did tupac starr in?"
  },
  {
    "QuestionId": "WebQTest-1827",
    "RawQuestion": "what can do in new york?",
    "ProcessedQuestion": "what can do in new york",
    "Parses": [
      {
        "ParseId": "WebQTest-1827.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_286)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_286 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PotentialTopicEntityMention": "new york",
        "TopicEntityName": "New York City",
        "TopicEntityMid": "m.02_286",
        "InferentialChain": [
          "travel.travel_destination.tourist_attractions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ymbw6",
            "EntityName": "Crocheron Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012vvtp_",
            "EntityName": "Travefy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0163ff",
            "EntityName": "Rockefeller Center"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019vsd",
            "EntityName": "United Nations Headquarters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01kht3",
            "EntityName": "St. Patrick's Cathedral"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01lnd3",
            "EntityName": "Flatiron Building"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nbpn",
            "EntityName": "Little Italy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01rs7b",
            "EntityName": "The Cloisters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01rxnm",
            "EntityName": "Brooklyn Botanic Garden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01rxr7",
            "EntityName": "Staten Island Ferry"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01rz3c",
            "EntityName": "Grand Central Terminal"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01zmd",
            "EntityName": "Chrysler Building"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.021848",
            "EntityName": "Frick Collection"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.023r9j",
            "EntityName": "American Museum of Natural History"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026cv0z",
            "EntityName": "A.I.R. Gallery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hjvb",
            "EntityName": "Darien Lake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02nd_",
            "EntityName": "Empire State Building"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qz9w",
            "EntityName": "Freedomland U.S.A."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02vz0kx",
            "EntityName": "Andrew Carnegie Mansion"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z7b9_",
            "EntityName": "Louis Armstrong House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cfv35",
            "EntityName": "Headless Horseman Hayrides"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03vstx",
            "EntityName": "George Gustav Heye Center"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0403zkg",
            "EntityName": "Chelsea Art Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04053sn",
            "EntityName": "FusionArts Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.048ltn",
            "EntityName": "National Academy Museum and School"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04h9fs",
            "EntityName": "Central Park Zoo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jpg0f",
            "EntityName": "Statue of Liberty National Monument"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04q3k0p",
            "EntityName": "New York Public Library for the Performing Arts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04q4sg",
            "EntityName": "Franklin D. Roosevelt Presidential Library and Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04sr12",
            "EntityName": "Battery Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051vfm",
            "EntityName": "American Folk Art Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051xk9",
            "EntityName": "International Center of Photography"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0537mx",
            "EntityName": "Morgan Library & Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05f80pd",
            "EntityName": "New York City Half Marathon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05t0ps",
            "EntityName": "Wave Hill"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06fybq",
            "EntityName": "Peking"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nhn3",
            "EntityName": "Japan Society of New York"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.072p8",
            "EntityName": "Statue of Liberty"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07jwwf",
            "EntityName": "High Line"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07qdr",
            "EntityName": "Times Square"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07trd0",
            "EntityName": "Theodore Roosevelt Birthplace National Historic Site"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0989yy",
            "EntityName": "Museum of Modern Art Department of Film"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7b",
            "EntityName": "Metropolitan Museum of Art"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7v",
            "EntityName": "Central Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09sg3h",
            "EntityName": "New York Aquarium"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09sjx5",
            "EntityName": "Museum of Sex"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bh8czr",
            "EntityName": "Gavin Brown's Enterprise"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0brl0p",
            "EntityName": "New York International Fringe Festival"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0by0zd5",
            "EntityName": "Felix M. Warburg House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bz7bg",
            "EntityName": "Broadway Theatre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c02dld",
            "EntityName": "Henry Clay Frick House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cc65g0",
            "EntityName": "New York Mini 10K"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cv4c",
            "EntityName": "Brooklyn Bridge"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gy74y",
            "EntityName": "Museum of Arts and Design"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hhjk",
            "EntityName": "Museum of Modern Art"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j_66",
            "EntityName": "Madison Square Garden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j32d_5",
            "EntityName": "Solomon R. Guggenheim Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jwvjyz",
            "EntityName": "Museum of Mathematics"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jwy_gm",
            "EntityName": "UAE Healthy Kidney 10K"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ll4_ht",
            "EntityName": "Tesla Science Center at Wardenclyffe"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n5wy3b",
            "EntityName": "Imagination Playground at Burling Slip"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0pnb8",
            "EntityName": "Chinatown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0q9h2",
            "EntityName": "Solomon R. Guggenheim Museum"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02_286": "New York City"
    },
    "qid_topic_entity": {
      "Q60": "New York City"
    },
    "NoisyQuestion": "what can do in new yorke?"
  },
  {
    "QuestionId": "WebQTest-1728",
    "RawQuestion": "who was ptolemy and what did he do?",
    "ProcessedQuestion": "who was ptolemy and what did he do",
    "Parses": [
      {
        "ParseId": "WebQTest-1728.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05_0t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05_0t ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "ptolemy",
        "TopicEntityName": "Ptolemy",
        "TopicEntityMid": "m.05_0t",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025rxky",
            "EntityName": "Astrologer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h6fbs",
            "EntityName": "Philosopher"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04s2z",
            "EntityName": "Mathematician"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h9c",
            "EntityName": "Astronomer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jygg",
            "EntityName": "Geographer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05_0t": "Ptolemy"
    },
    "qid_topic_entity": {
      "Q34943": "Ptolemy"
    },
    "NoisyQuestion": "who was ptolemy and what did he do?"
  },
  {
    "QuestionId": "WebQTest-392",
    "RawQuestion": "what team is hank baskett on 2010?",
    "ProcessedQuestion": "what team is hank baskett on 2010",
    "Parses": [
      {
        "ParseId": "WebQTest-392.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d81yf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d81yf ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "hank baskett",
        "TopicEntityName": "Hank Baskett",
        "TopicEntityMid": "m.0d81yf",
        "InferentialChain": [
          "sports.pro_athlete.teams",
          "sports.sports_team_roster.team"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2010-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2010-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2010-01-01",
          "End": "2010-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "2010"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03wnh",
            "EntityName": "Indianapolis Colts"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051q5",
            "EntityName": "Minnesota Vikings"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05tg3",
            "EntityName": "Philadelphia Eagles"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d81yf": "Hank Baskett"
    },
    "qid_topic_entity": {
      "Q1433425": "Hank Baskett"
    },
    "NoisyQuestion": "what team is hank baskett on 2010?"
  },
  {
    "QuestionId": "WebQTest-1935",
    "RawQuestion": "what college did maya moore go to?",
    "ProcessedQuestion": "what college did maya moore go to",
    "Parses": [
      {
        "ParseId": "WebQTest-1935.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027w0l1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027w0l1 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "maya moore",
        "TopicEntityName": "Maya Moore",
        "TopicEntityMid": "m.027w0l1",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01jsn5",
            "EntityName": "University of Connecticut"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.027w0l1": "Maya Moore"
    },
    "qid_topic_entity": {
      "Q609527": "Maya Moore"
    },
    "NoisyQuestion": "what college did maya moore go to?"
  },
  {
    "QuestionId": "WebQTest-603",
    "RawQuestion": "what money to take to turkey?",
    "ProcessedQuestion": "what money to take to turkey",
    "Parses": [
      {
        "ParseId": "WebQTest-603.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "turkey",
        "TopicEntityName": "Turkey",
        "TopicEntityMid": "m.01znc_",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04dq0w",
            "EntityName": "Turkish lira"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01znc_": "Turkey"
    },
    "qid_topic_entity": {
      "Q43": "Turkey"
    },
    "NoisyQuestion": "what money to take to Turky?"
  },
  {
    "QuestionId": "WebQTest-1919",
    "RawQuestion": "who plays king julian madagascar?",
    "ProcessedQuestion": "who plays king julian madagascar",
    "Parses": [
      {
        "ParseId": "WebQTest-1919.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01sbv9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01sbv9 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0cj5p22 .\n}\n",
        "PotentialTopicEntityMention": "madagascar",
        "TopicEntityName": "Madagascar",
        "TopicEntityMid": "m.01sbv9",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0cj5p22",
            "EntityName": "Julien",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9c0",
            "EntityName": "Sacha Baron Cohen"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01sbv9": "Madagascar"
    },
    "qid_topic_entity": {
      "Q174555": "Madagascar"
    },
    "NoisyQuestion": "who plays king julian madagascar?"
  },
  {
    "QuestionId": "WebQTest-829",
    "RawQuestion": "who was frida kahlo influenced by?",
    "ProcessedQuestion": "who was frida kahlo influenced by",
    "Parses": [
      {
        "ParseId": "WebQTest-829.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015k04)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015k04 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PotentialTopicEntityMention": "frida kahlo",
        "TopicEntityName": "Frida Kahlo",
        "TopicEntityMid": "m.015k04",
        "InferentialChain": [
          "influence.influence_node.influenced_by"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0q2c2",
            "EntityName": "Diego Rivera"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.015k04": "Frida Kahlo"
    },
    "qid_topic_entity": {
      "Q5588": "Frida Kahlo"
    },
    "NoisyQuestion": "who was frida kahlho influenced by?"
  },
  {
    "QuestionId": "WebQTest-237",
    "RawQuestion": "what did fred durst do?",
    "ProcessedQuestion": "what did fred durst do",
    "Parses": [
      {
        "ParseId": "WebQTest-237.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01q7cb_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01q7cb_ ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "fred durst",
        "TopicEntityName": "Fred Durst",
        "TopicEntityMid": "m.01q7cb_",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012t_z",
            "EntityName": "Businessperson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hrh1q",
            "EntityName": "Actor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jknp",
            "EntityName": "Film director"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.039v1",
            "EntityName": "Guitarist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09jwl",
            "EntityName": "Musician"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09l65",
            "EntityName": "Singer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hpcdn2",
            "EntityName": "Rapper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0nbcg",
            "EntityName": "Songwriter"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01q7cb_": "Fred Durst"
    },
    "qid_topic_entity": {
      "Q44707": "Fred Durst"
    },
    "NoisyQuestion": "what did fred durst do?"
  },
  {
    "QuestionId": "WebQTest-1619",
    "RawQuestion": "where do the appalachian mountains run?",
    "ProcessedQuestion": "where do the appalachian mountains run",
    "Parses": [
      {
        "ParseId": "WebQTest-1619.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "lots of other predicates are equally fine: contains, mountains, partially contained by, etc."
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lm0n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lm0n ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "appalachian mountains",
        "TopicEntityName": "Appalachian Mountains",
        "TopicEntityMid": "m.0lm0n",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059g4",
            "EntityName": "North America"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0lm0n": "Appalachian Mountains"
    },
    "qid_topic_entity": {
      "Q93332": "Appalachian Mountains"
    },
    "NoisyQuestion": "where do the appalachian mounatins run?"
  },
  {
    "QuestionId": "WebQTest-146",
    "RawQuestion": "what team does jordan own?",
    "ProcessedQuestion": "what team does jordan own",
    "Parses": [
      {
        "ParseId": "WebQTest-146.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03__y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03__y ns:sports.sports_team_location.teams ?x .\n}\n",
        "PotentialTopicEntityMention": "jordan",
        "TopicEntityName": "Jordan",
        "TopicEntityMid": "m.03__y",
        "InferentialChain": [
          "sports.sports_team_location.teams"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0452m3",
            "EntityName": "Jordan national football team"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08htl1",
            "EntityName": "Al-Wehdat SC"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03__y": "Jordan"
    },
    "qid_topic_entity": {
      "Q810": "Jordan"
    },
    "NoisyQuestion": "what team does jordam own?"
  },
  {
    "QuestionId": "WebQTest-593",
    "RawQuestion": "what kind of disease does montel williams have?",
    "ProcessedQuestion": "what kind of disease does montel williams have",
    "Parses": [
      {
        "ParseId": "WebQTest-593.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018ptv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018ptv ns:medicine.notable_person_with_medical_condition.condition ?x .\n}\n",
        "PotentialTopicEntityMention": "montel williams",
        "TopicEntityName": "Montel Williams",
        "TopicEntityMid": "m.018ptv",
        "InferentialChain": [
          "medicine.notable_person_with_medical_condition.condition"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dcqh",
            "EntityName": "Multiple sclerosis"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.018ptv": "Montel Williams"
    },
    "qid_topic_entity": {
      "Q1345645": "Montel Williams"
    },
    "NoisyQuestion": "what kind of disease does montel wiliams have?"
  },
  {
    "QuestionId": "WebQTest-334",
    "RawQuestion": "who did john kennedy have affairs with?",
    "ProcessedQuestion": "who did john kennedy have affairs with",
    "Parses": [
      {
        "ParseId": "WebQTest-334.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n}\n",
        "PotentialTopicEntityMention": "john kennedy",
        "TopicEntityName": "John F. Kennedy",
        "TopicEntityMid": "m.0d3k14",
        "InferentialChain": [
          "celebrities.celebrity.sexual_relationships",
          "celebrities.romantic_relationship.celebrity"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04n4r6",
            "EntityName": "Judith Exner"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wqr",
            "EntityName": "Marilyn Monroe"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d3k14": "John F. Kennedy"
    },
    "qid_topic_entity": {
      "Q9696": "John F. Kennedy"
    },
    "NoisyQuestion": "who did jhon kennedy have affairs with?"
  },
  {
    "QuestionId": "WebQTest-828",
    "RawQuestion": "what is the head judge of the supreme court called?",
    "ProcessedQuestion": "what is the head judge of the supreme court called",
    "Parses": [
      {
        "ParseId": "WebQTest-828.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07sz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07sz1 ns:government.governmental_body.offices_positions ?x .\n}\n",
        "PotentialTopicEntityMention": "supreme court",
        "TopicEntityName": "Supreme Court of the United States",
        "TopicEntityMid": "m.07sz1",
        "InferentialChain": [
          "government.governmental_body.offices_positions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07szk",
            "EntityName": "Chief Justice of the United States"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07sz1": "Supreme Court of the United States"
    },
    "qid_topic_entity": {
      "Q11201": "Supreme Court of the United States"
    },
    "NoisyQuestion": "what is the head judge of the supreme court called?"
  },
  {
    "QuestionId": "WebQTest-963",
    "RawQuestion": "who is the miami dolphins quarterback?",
    "ProcessedQuestion": "who is the miami dolphins quarterback",
    "Parses": [
      {
        "ParseId": "WebQTest-963.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04vn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04vn5 ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n?y ns:sports.sports_team_roster.position ns:m.06b1q .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "miami dolphins",
        "TopicEntityName": "Miami Dolphins",
        "TopicEntityMid": "m.04vn5",
        "InferentialChain": [
          "sports.sports_team.roster",
          "sports.sports_team_roster.player"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.06b1q",
            "EntityName": "Quarterback",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.position",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_team_roster.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027n35s",
            "EntityName": "Matt Moore"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04q9syl",
            "EntityName": "Ryan Tannehill"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04vn5": "Miami Dolphins"
    },
    "qid_topic_entity": {
      "Q223243": "Miami Dolphins"
    },
    "NoisyQuestion": "who is the miami dolphins quarterback?"
  },
  {
    "QuestionId": "WebQTest-166",
    "RawQuestion": "what was dr seuss education?",
    "ProcessedQuestion": "what was dr seuss education",
    "Parses": [
      {
        "ParseId": "WebQTest-166.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02g3w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02g3w ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "dr seuss",
        "TopicEntityName": "Theodore Lesieg",
        "TopicEntityMid": "m.02g3w",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bqy",
            "EntityName": "Dartmouth College"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07tgn",
            "EntityName": "University of Oxford"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ym1n",
            "EntityName": "Lincoln College, Oxford"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02g3w": "Theodore Lesieg"
    },
    "qid_topic_entity": {
      "Q298685": "Theodore Lesieg"
    },
    "NoisyQuestion": "what was dr seuss educashon?"
  },
  {
    "QuestionId": "WebQTest-1712",
    "RawQuestion": "where did spencer pratt go to school?",
    "ProcessedQuestion": "where did spencer pratt go to school",
    "Parses": [
      {
        "ParseId": "WebQTest-1712.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02z3d24)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02z3d24 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "spencer pratt",
        "TopicEntityName": "Spencer Pratt",
        "TopicEntityMid": "m.02z3d24",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065y4w7",
            "EntityName": "University of Southern California"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02z3d24": "Spencer Pratt"
    },
    "qid_topic_entity": {
      "Q2279463": "Spencer Pratt"
    },
    "NoisyQuestion": "where did spencer pratt go to scol?"
  },
  {
    "QuestionId": "WebQTest-1239",
    "RawQuestion": "what is the zip code for concord?",
    "ProcessedQuestion": "what is the zip code for concord",
    "Parses": [
      {
        "ParseId": "WebQTest-1239.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qymv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qymv ns:location.citytown.postal_codes ?x .\n}\n",
        "PotentialTopicEntityMention": "concord",
        "TopicEntityName": "Concord",
        "TopicEntityMid": "m.0qymv",
        "InferentialChain": [
          "location.citytown.postal_codes"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01zcvrz",
            "EntityName": "94520"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01zcvv5",
            "EntityName": "94521"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01zcw0h",
            "EntityName": "94519"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01zcwkm",
            "EntityName": "94518"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07np_n_",
            "EntityName": "94529"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07np_pf",
            "EntityName": "94527"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07np_pn",
            "EntityName": "94524"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07np_pw",
            "EntityName": "94522"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0qymv": "Concord"
    },
    "qid_topic_entity": {
      "Q490441": "Concord"
    },
    "NoisyQuestion": "what is the zip code for concurd?"
  },
  {
    "QuestionId": "WebQTest-936",
    "RawQuestion": "where were greek temples built?",
    "ProcessedQuestion": "where were greek temples built",
    "Parses": [
      {
        "ParseId": "WebQTest-936.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Longer chain. Original comment: F need longer chains or more expressive representations"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.03f34_ ns:architecture.building_function.buildings ?y .\n\t?y ns:travel.tourist_attraction.near_travel_destination ?x .\n}",
        "PotentialTopicEntityMention": "greek temples",
        "TopicEntityName": "Ancient Greek temple",
        "TopicEntityMid": "m.03f34_",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01swlf",
            "EntityName": "Olympia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02p8r",
            "EntityName": "Ephesus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04f_hwc",
            "EntityName": "Shahhat"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04ygm3",
            "EntityName": "Kuşadası"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09lgkz",
            "EntityName": "Corfu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n2z",
            "EntityName": "Athens"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03f34_": "Ancient Greek temple"
    },
    "qid_topic_entity": {
      "Q267596": "Ancient Greek temple"
    },
    "NoisyQuestion": "where were greek temples built?"
  },
  {
    "QuestionId": "WebQTest-1355",
    "RawQuestion": "what school did robert f kennedy go to?",
    "ProcessedQuestion": "what school did robert f kennedy go to",
    "Parses": [
      {
        "ParseId": "WebQTest-1355.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06hx2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06hx2 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "robert f kennedy",
        "TopicEntityName": "Robert F. Kennedy",
        "TopicEntityMid": "m.06hx2",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01mpwj",
            "EntityName": "Harvard College"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01vc5m",
            "EntityName": "Bates College"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h45k",
            "EntityName": "Milton Academy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03ksy",
            "EntityName": "Harvard University"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05qgd9",
            "EntityName": "University of Virginia School of Law"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g8rj",
            "EntityName": "University of Virginia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06hx2": "Robert F. Kennedy"
    },
    "qid_topic_entity": {
      "Q25310": "Robert F. Kennedy"
    },
    "NoisyQuestion": "what school did robert f kennedy go to?"
  },
  {
    "QuestionId": "WebQTest-1127",
    "RawQuestion": "which country in north america is divided into provinces?",
    "ProcessedQuestion": "which country in north america is divided into provinces",
    "Parses": [
      {
        "ParseId": "WebQTest-1127.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: Done. Original comment: F"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x \nWHERE {\n    ns:m.059g4 ns:location.location.contains ?x .  # North America\n    ?x ns:common.topic.notable_types ns:m.01mp . # Country\n    ?x ns:location.location.contains ?y .\n    ?y ns:common.topic.notable_types ?t . \n# All the possible \"province\" type\nFILTER ((?t = ns:m.01nm) ||\n(?t = ns:m.02_1y_9) ||\n(?t = ns:m.02_3ny_) ||\n(?t = ns:m.02_3phk) ||\n(?t = ns:m.02_3r2r) ||\n(?t = ns:m.02_3rt3) ||\n(?t = ns:m.02_3zf4) ||\n(?t = ns:m.02_40h1) ||\n(?t = ns:m.02_96lm) ||\n(?t = ns:m.02yxk5c) ||\n(?t = ns:m.02zd6yn) ||\n(?t = ns:m.03z96kq) ||\n(?t = ns:m.04g7rg9) ||\n(?t = ns:m.04js0h5) ||\n(?t = ns:m.065rjpr) ||\n(?t = ns:m.078_8dm) ||\n(?t = ns:m.0hzcb3l) ||\n(?t = ns:m.0hzcb5p) ||\n(?t = ns:m.0hzcb69) ||\n(?t = ns:m.0hzcb7p) ||\n(?t = ns:m.0hzcd76) ||\n(?t = ns:m.0hzcd7v) ||\n(?t = ns:m.0hzcdb0) ||\n(?t = ns:m.0hzcdd6) ||\n(?t = ns:m.0hzcdlq) ||\n(?t = ns:m.0hzcdmg) ||\n(?t = ns:m.0hzcdrj) ||\n(?t = ns:m.0hzcdzg) ||\n(?t = ns:m.0hzcdzv) ||\n(?t = ns:m.0hzcf4d) ||\n(?t = ns:m.0hzcf50) ||\n(?t = ns:m.0hzcfdx) ||\n(?t = ns:m.0hzcffv) ||\n(?t = ns:m.0hzcfgg) ||\n(?t = ns:m.0hzcfj0) ||\n(?t = ns:m.0hzcfm2) ||\n(?t = ns:m.0hzcfpz) ||\n(?t = ns:m.0hzcfsv) ||\n(?t = ns:m.0hzcfyb) ||\n(?t = ns:m.0hzcg20) ||\n(?t = ns:m.0hzcg90) ||\n(?t = ns:m.0hzcgdz) ||\n(?t = ns:m.0hzcgfl) ||\n(?t = ns:m.0hzcggv) ||\n(?t = ns:m.0hzcgj2) ||\n(?t = ns:m.0hzcgk4) ||\n(?t = ns:m.0hzcgny) ||\n(?t = ns:m.0hzcgqt) ||\n(?t = ns:m.0hzcgsp) ||\n(?t = ns:m.0hzcgvh) ||\n(?t = ns:m.0hzcgvw) ||\n(?t = ns:m.0hzcgxf) ||\n(?t = ns:m.0hzcjv6) ||\n(?t = ns:m.0hzcjvv) ||\n(?t = ns:m.0hzcjxq) ||\n(?t = ns:m.0hzck_1) ||\n(?t = ns:m.0hzck1r) ||\n(?t = ns:m.0hzck47) ||\n(?t = ns:m.0hzck7p) ||\n(?t = ns:m.0hzckbh) ||\n(?t = ns:m.0hzckgc) ||\n(?t = ns:m.0hzcklh) ||\n(?t = ns:m.0hzckv_) ||\n(?t = ns:m.0hzckvp) ||\n(?t = ns:m.0hzckwy) ||\n(?t = ns:m.0hzcl1k) ||\n(?t = ns:m.0hzcl2t) ||\n(?t = ns:m.0hzfxh6) ||\n(?t = ns:m.0hzfxjh) ||\n(?t = ns:m.0hzfxny) ||\n(?t = ns:m.0hzfxv1) ||\n(?t = ns:m.0hzfxx7) ||\n(?t = ns:m.0hzfxzs) ||\n(?t = ns:m.0hzfy0d) ||\n(?t = ns:m.0hz_gjz) ||\n(?t = ns:m.0hzjldq) ||\n(?t = ns:m.0hzjm9b) ||\n(?t = ns:m.0hzjmf9) ||\n(?t = ns:m.0hzjmjf) ||\n(?t = ns:m.0hzjmlj) ||\n(?t = ns:m.0hzjmm6) ||\n(?t = ns:m.0hzjmmx) ||\n(?t = ns:m.0j1zd59) ||\n(?t = ns:m.0j1zd5w) )\n}",
        "PotentialTopicEntityMention": "north america",
        "TopicEntityName": "North America",
        "TopicEntityMid": "m.059g4",
        "InferentialChain": [
          "location.location.contains"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.059g4": "North America"
    },
    "qid_topic_entity": {
      "Q49": "North America"
    },
    "NoisyQuestion": "which country in north america is divided into provices?"
  },
  {
    "QuestionId": "WebQTest-1422",
    "RawQuestion": "what language do they speak in sweden yahoo?",
    "ProcessedQuestion": "what language do they speak in sweden yahoo",
    "Parses": [
      {
        "ParseId": "WebQTest-1422.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d0vqn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d0vqn ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "sweden",
        "TopicEntityName": "Sweden",
        "TopicEntityMid": "m.0d0vqn",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012psb",
            "EntityName": "Romani language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01gp_d",
            "EntityName": "Finnish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z5h0",
            "EntityName": "Meänkieli"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02zb99n",
            "EntityName": "Swedish Sign Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04lmb2",
            "EntityName": "Turoyo Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06mp7",
            "EntityName": "Swedish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0880p",
            "EntityName": "Yiddish Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1422.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d0vqn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d0vqn ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "sweden",
        "TopicEntityName": "Sweden",
        "TopicEntityMid": "m.0d0vqn",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06mp7",
            "EntityName": "Swedish Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d0vqn": "Sweden"
    },
    "qid_topic_entity": {
      "Q34": "Sweden"
    },
    "NoisyQuestion": "what language do they speak in sweden yahho?"
  },
  {
    "QuestionId": "WebQTest-340",
    "RawQuestion": "who is richard pryor son?",
    "ProcessedQuestion": "who is richard pryor son",
    "Parses": [
      {
        "ParseId": "WebQTest-340.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hmk9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hmk9 ns:people.person.children ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PotentialTopicEntityMention": "richard pryor",
        "TopicEntityName": "Richard Pryor",
        "TopicEntityMid": "m.01hmk9",
        "InferentialChain": [
          "people.person.children"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05zppz",
            "EntityName": "Male",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.person.gender",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05z2sc1",
            "EntityName": "Franklin Pryor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05z2scn",
            "EntityName": "Richard Pryor Jr."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05z2scv",
            "EntityName": "Steven Pryor"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01hmk9": "Richard Pryor"
    },
    "qid_topic_entity": {
      "Q294912": "Richard Pryor"
    },
    "NoisyQuestion": "who is richard pryor son?"
  },
  {
    "QuestionId": "WebQTest-1715",
    "RawQuestion": "where did cs lewis wrote?",
    "ProcessedQuestion": "where did cs lewis wrote",
    "Parses": [
      {
        "ParseId": "WebQTest-1715.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? where does someboy write = where does someboy live"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wd02c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wd02c ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PotentialTopicEntityMention": "cs lewis",
        "TopicEntityName": "C. S. Lewis",
        "TopicEntityMid": "m.01wd02c",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01l63",
            "EntityName": "Belfast"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01wd02c": "C. S. Lewis"
    },
    "qid_topic_entity": {
      "Q9204": "C. S. Lewis"
    },
    "NoisyQuestion": "where did cs lewis wrot?"
  },
  {
    "QuestionId": "WebQTest-479",
    "RawQuestion": "what team did adrian peterson play for in college?",
    "ProcessedQuestion": "what team did adrian peterson play for in college",
    "Parses": [
      {
        "ParseId": "WebQTest-479.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? cannot find a link that leads to the team name, could be missing data in KB"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.095xk6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.095xk6 ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.school ?x .\n}\n",
        "PotentialTopicEntityMention": "adrian peterson",
        "TopicEntityName": "Adrian Peterson",
        "TopicEntityMid": "m.095xk6",
        "InferentialChain": [
          "sports.drafted_athlete.drafted",
          "sports.sports_league_draft_pick.school"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01vs5c",
            "EntityName": "University of Oklahoma"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.095xk6": "Adrian Peterson"
    },
    "qid_topic_entity": {
      "Q373983": "Adrian Peterson"
    },
    "NoisyQuestion": "what team did adrian peterson play for in colleg?"
  },
  {
    "QuestionId": "WebQTest-1575",
    "RawQuestion": "what products and\\/or services does google offer customers?",
    "ProcessedQuestion": "what products and\\/or services does google offer customers",
    "Parses": [
      {
        "ParseId": "WebQTest-1575.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045c7b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045c7b ns:business.consumer_company.products ?y .\n?y ns:business.company_product_relationship.consumer_product ?x .\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.from_date ?sk0} || \nEXISTS {?y ns:business.company_product_relationship.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.to_date ?sk2} || \nEXISTS {?y ns:business.company_product_relationship.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "google",
        "TopicEntityName": "Google",
        "TopicEntityMid": "m.045c7b",
        "InferentialChain": [
          "business.consumer_company.products",
          "business.company_product_relationship.consumer_product"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "business.company_product_relationship.from_date",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "business.company_product_relationship.to_date",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010pkp62",
            "EntityName": "Google Classroom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03w9g0f",
            "EntityName": "Google Drive"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064qgt0",
            "EntityName": "Apache Wave"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06ny5h",
            "EntityName": "Google Earth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b6g2kz",
            "EntityName": "Google Buzz"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dm258",
            "EntityName": "Google Docs, Sheets, and Slides"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fpj3tb",
            "EntityName": "Nexus S"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j7m2zm",
            "EntityName": "Google Glass"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k0p036",
            "EntityName": "Nexus 7"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k2998k",
            "EntityName": "Nexus Q"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0nb7n8f",
            "EntityName": "Nexus 10"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0pb8gtr",
            "EntityName": "Google Maps"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0wf0rgl",
            "EntityName": "Chromecast"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.045c7b": "Google"
    },
    "qid_topic_entity": {
      "Q95": "Google"
    },
    "NoisyQuestion": "what products and\\/or services does goggle offer customers?"
  },
  {
    "QuestionId": "WebQTest-1361",
    "RawQuestion": "what currency should take to mexico?",
    "ProcessedQuestion": "what currency should take to mexico",
    "Parses": [
      {
        "ParseId": "WebQTest-1361.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "mexico",
        "TopicEntityName": "Mexico",
        "TopicEntityMid": "m.0b90_r",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012ts8",
            "EntityName": "Mexican peso"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0b90_r": "Mexico"
    },
    "qid_topic_entity": {
      "Q96": "Mexico"
    },
    "NoisyQuestion": "what currency should take to mexiCO?"
  },
  {
    "QuestionId": "WebQTest-1551",
    "RawQuestion": "what year did seattle seahawks go to the super bowl?",
    "ProcessedQuestion": "what year did seattle seahawks go to the super bowl",
    "Parses": [
      {
        "ParseId": "WebQTest-1551.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: Done. Original comment: F UNION win or lose"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT  ?x\nWHERE {\n  ns:m.06x5s ns:sports.sports_championship.events ?x . # Super Bowl\n  {\n    { ?x ns:sports.sports_championship_event.runner_up ns:m.070xg . } # Seattle Seahawks\n    UNION\n    { ?x ns:sports.sports_championship_event.champion ns:m.070xg . } # Seattle Seahawks\n  }\n  ?x ns:time.event.start_date ?d .\n}",
        "PotentialTopicEntityMention": "seattle seahawks",
        "TopicEntityName": "Seattle Seahawks",
        "TopicEntityMid": "m.070xg",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.06x5s",
            "EntityName": "Super Bowl",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_championship_event.championship",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.032tn6",
            "EntityName": "Super Bowl XL"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09k4qg3",
            "EntityName": "Super Bowl XLVIII"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.070xg": "Seattle Seahawks"
    },
    "qid_topic_entity": {
      "Q221878": "Seattle Seahawks"
    },
    "NoisyQuestion": "what year did seattle seahawks go to the super bowl?"
  },
  {
    "QuestionId": "WebQTest-896",
    "RawQuestion": "when did the philadelphia flyers win the cup?",
    "ProcessedQuestion": "when did the philadelphia flyers win the cup",
    "Parses": [
      {
        "ParseId": "WebQTest-896.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hn2q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hn2q ns:sports.sports_team.championships ?x .\n}\n",
        "PotentialTopicEntityMention": "philadelphia flyers",
        "TopicEntityName": "Philadelphia Flyers",
        "TopicEntityMid": "m.0hn2q",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03by14v",
            "EntityName": "1975 Stanley Cup Finals"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03by156",
            "EntityName": "1974 Stanley Cup Finals"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0hn2q": "Philadelphia Flyers"
    },
    "qid_topic_entity": {
      "Q192083": "Philadelphia Flyers"
    },
    "NoisyQuestion": "when did the philadelphia flyers win the cup?"
  },
  {
    "QuestionId": "WebQTest-1333",
    "RawQuestion": "where does the tennessee river go?",
    "ProcessedQuestion": "where does the tennessee river go",
    "Parses": [
      {
        "ParseId": "WebQTest-1333.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? could also mean where it flows"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01spb0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01spb0 ns:geography.river.mouth ?x .\n}\n",
        "PotentialTopicEntityMention": "tennessee river",
        "TopicEntityName": "Tennessee River",
        "TopicEntityMid": "m.01spb0",
        "InferentialChain": [
          "geography.river.mouth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05lx3",
            "EntityName": "Ohio River"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01spb0": "Tennessee River"
    },
    "qid_topic_entity": {
      "Q193737": "Tennessee River"
    },
    "NoisyQuestion": "where does the tennessee rivr go?"
  },
  {
    "QuestionId": "WebQTest-1008",
    "RawQuestion": "where is walton indiana?",
    "ProcessedQuestion": "where is walton indiana",
    "Parses": [
      {
        "ParseId": "WebQTest-1008.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? Not sure if they want GPS location"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0skd2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0skd2 ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "walton indiana",
        "TopicEntityName": "Walton",
        "TopicEntityMid": "m.0skd2",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03chrxx",
            "EntityName": "Tipton Township"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03v1s",
            "EntityName": "Indiana"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ntm1",
            "EntityName": "Cass County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0skd2": "Walton"
    },
    "qid_topic_entity": {
      "Q2551289": "Walton"
    },
    "NoisyQuestion": "where is walton indiana?"
  },
  {
    "QuestionId": "WebQTest-557",
    "RawQuestion": "what government did the roman empire have?",
    "ProcessedQuestion": "what government did the roman empire have",
    "Parses": [
      {
        "ParseId": "WebQTest-557.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06cmp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06cmp ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "roman empire",
        "TopicEntityName": "Roman Empire",
        "TopicEntityMid": "m.06cmp",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d8tn",
            "EntityName": "Autocracy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06cmp": "Roman Empire"
    },
    "qid_topic_entity": {
      "Q2277": "Roman Empire"
    },
    "NoisyQuestion": "what government did the romen empire have?"
  },
  {
    "QuestionId": "WebQTest-419",
    "RawQuestion": "what country did magellan represent?",
    "ProcessedQuestion": "what country did magellan represent",
    "Parses": [
      {
        "ParseId": "WebQTest-419.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033ky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033ky ns:people.person.nationality ?x .\n}\n",
        "PotentialTopicEntityMention": "magellan",
        "TopicEntityName": "Ferdinand Magellan",
        "TopicEntityMid": "m.033ky",
        "InferentialChain": [
          "people.person.nationality"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0285m87",
            "EntityName": "Kingdom of Portugal"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.033ky": "Ferdinand Magellan"
    },
    "qid_topic_entity": {
      "Q1496": "Ferdinand Magellan"
    },
    "NoisyQuestion": "what country did magellan represent?"
  },
  {
    "QuestionId": "WebQTest-333",
    "RawQuestion": "what movies did morgan freeman star in?",
    "ProcessedQuestion": "what movies did morgan freeman star in",
    "Parses": [
      {
        "ParseId": "WebQTest-333.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.055c8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.055c8 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "morgan freeman",
        "TopicEntityName": "Morgan Freeman",
        "TopicEntityMid": "m.055c8",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_92w",
            "EntityName": "Unforgiven"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_vm56w",
            "EntityName": "Island of Lemurs: Madagascar 3D"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010vzxsl",
            "EntityName": "London Has Fallen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0114hb3m",
            "EntityName": "Ted 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011djb5_",
            "EntityName": "Now You See Me: The Second Act"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012n8g9g",
            "EntityName": "Ben-Hur"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01dc0c",
            "EntityName": "Seven"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01jft4",
            "EntityName": "Bruce Almighty"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01msrb",
            "EntityName": "Robin Hood: Prince of Thieves"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01q2nx",
            "EntityName": "Deep Impact"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.021gzd",
            "EntityName": "The Civil War"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0260bz",
            "EntityName": "Amistad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026q7m6",
            "EntityName": "Cosmic Voyage"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026sq47",
            "EntityName": "The Long Way Home"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026v072",
            "EntityName": "10 Items or Less"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0287477",
            "EntityName": "Wanted"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fqrf",
            "EntityName": "Batman Begins"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jxbw",
            "EntityName": "Glory"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02mmwk",
            "EntityName": "War of the Worlds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02q0v8n",
            "EntityName": "Along Came a Spider"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02q1nks",
            "EntityName": "Marie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rdvz1",
            "EntityName": "Feast of Love"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w86s6",
            "EntityName": "Death of a Prophet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wz1ch",
            "EntityName": "Eyewitness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x9t1c",
            "EntityName": "A Raisin in the Sun"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02y_lrp",
            "EntityName": "The Love Guru"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.036qtd",
            "EntityName": "Nurse Betty"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.036r3f",
            "EntityName": "Outbreak"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.038b5k",
            "EntityName": "The Hunting of the President"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03g_b58",
            "EntityName": "Thick as Thieves"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gv656",
            "EntityName": "Where Were You When the Lights Went Out?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03h0pxb",
            "EntityName": "The Maiden Heist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04cpvs",
            "EntityName": "Kiss the Girls"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04fs42",
            "EntityName": "The Big Bounce"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gp4lp",
            "EntityName": "Harry & Son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j1bhb",
            "EntityName": "Resting Place"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j1w2g",
            "EntityName": "Soul Brothas and Sistas: Vol. 4: Quadruple Feature"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j2lcd",
            "EntityName": "Guilty by Association"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jvgb",
            "EntityName": "That Was Then... This Is Now"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04n3tmy",
            "EntityName": "Moll Flanders"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04q827",
            "EntityName": "Million Dollar Baby"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04xp1l",
            "EntityName": "High Crimes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04xp9q",
            "EntityName": "Levity"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0558xt",
            "EntityName": "Chain Reaction"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.055yv7",
            "EntityName": "Lean on Me"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.056s2zf",
            "EntityName": "The Pawnbroker"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05n9yq",
            "EntityName": "Unleashed"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05p7w6k",
            "EntityName": "The Power of One"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.061dc7",
            "EntityName": "Under Suspicion"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06gyxs",
            "EntityName": "Hard Rain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06l9d_",
            "EntityName": "Edison"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06lbvw",
            "EntityName": "Teachers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06yv1n",
            "EntityName": "Clean and Sober"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07_466",
            "EntityName": "Magnificent Desolation: Walking On The Moon 3D"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07jnt",
            "EntityName": "The Shawshank Redemption"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07jyv8",
            "EntityName": "An Unfinished Life"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07p62k",
            "EntityName": "Evan Almighty"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07yk1xz",
            "EntityName": "Invictus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.088j6t",
            "EntityName": "Dreamcatcher"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08wrlb",
            "EntityName": "Brubaker"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09v6jyh",
            "EntityName": "RED"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b6qmv",
            "EntityName": "The Contract"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bfmdnc",
            "EntityName": "The Execution of Raymond Graham"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bhc5kw",
            "EntityName": "Conan the Barbarian"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bpm4yw",
            "EntityName": "The Dark Knight Rises"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0brfjd",
            "EntityName": "Lucky Number Slevin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0btpm6",
            "EntityName": "The Dark Knight"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c771m",
            "EntityName": "Fight for Life"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cf8qb",
            "EntityName": "The Sum of All Fears"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ch0qx",
            "EntityName": "Street Smart"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cqvb1x",
            "EntityName": "All About Us"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crt1fp",
            "EntityName": "A Man Called Adam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crt891",
            "EntityName": "The Art of Romare Bearden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crv8mp",
            "EntityName": "Clinton and Nadine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crwrlm",
            "EntityName": "For Love of Liberty: The Story of America's Black Patriots"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d1yzs",
            "EntityName": "Johnny Handsome"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d7svf",
            "EntityName": "The Bonfire of the Vanities"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dgpsql",
            "EntityName": "Dolphin Tale"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dsvzh",
            "EntityName": "Gone Baby Gone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gjbskw",
            "EntityName": "Attica"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gwn3n6",
            "EntityName": "Oblivion"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx8pq3",
            "EntityName": "Wish Wizard"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gx8pwt",
            "EntityName": "We the People"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gxwbzk",
            "EntityName": "America Beyond the Color Line"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h_1cdg",
            "EntityName": "Roll Of Thunder, Hear My Cry"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0_cm_",
            "EntityName": "National Geographic: Inside the White House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0_gsx",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h0zs8c",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h2_kb9",
            "EntityName": "Heart Stopper"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h8860l",
            "EntityName": "Now You See Me"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jwy6sk",
            "EntityName": "The Magic of Belle Isle"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kv6pf",
            "EntityName": "The Bucket List"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n3t4y8",
            "EntityName": "Last Vegas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n43ym4",
            "EntityName": "Olympus Has Fallen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n4g1dj",
            "EntityName": "The Lego Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ndwy5n",
            "EntityName": "Last Knights"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0v8_gw0",
            "EntityName": "Transcendence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0w36vqd",
            "EntityName": "Lucy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0y511xj",
            "EntityName": "5 Flights Up"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0yntbty",
            "EntityName": "Dolphin Tale 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0yyts",
            "EntityName": "Driving Miss Daisy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.055c8": "Morgan Freeman"
    },
    "qid_topic_entity": {
      "Q48337": "Morgan Freeman"
    },
    "NoisyQuestion": "what movies did morgan freemnan star in?"
  },
  {
    "QuestionId": "WebQTest-1638",
    "RawQuestion": "what language is most commonly spoken in belgium?",
    "ProcessedQuestion": "what language is most commonly spoken in belgium",
    "Parses": [
      {
        "ParseId": "WebQTest-1638.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0154j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0154j ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "belgium",
        "TopicEntityName": "Belgium",
        "TopicEntityMid": "m.0154j",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bv9",
            "EntityName": "Dutch Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04306rv",
            "EntityName": "German Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064_8sq",
            "EntityName": "French"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0154j": "Belgium"
    },
    "qid_topic_entity": {
      "Q31": "Belgium"
    },
    "NoisyQuestion": "what language is most commonly spoken in beljium?"
  },
  {
    "QuestionId": "WebQTest-1804",
    "RawQuestion": "what do people speak in uk?",
    "ProcessedQuestion": "what do people speak in uk",
    "Parses": [
      {
        "ParseId": "WebQTest-1804.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "uk",
        "TopicEntityName": "United Kingdom",
        "TopicEntityMid": "m.07ssc",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01v0g",
            "EntityName": "Cornish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jcw",
            "EntityName": "Esperanto Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03x42",
            "EntityName": "Irish"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.070zw",
            "EntityName": "Scottish Gaelic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.083tk",
            "EntityName": "Welsh Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ct8m",
            "EntityName": "British Sign Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h407",
            "EntityName": "Scots Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1804.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "uk",
        "TopicEntityName": "United Kingdom",
        "TopicEntityMid": "m.07ssc",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07ssc": "United Kingdom"
    },
    "qid_topic_entity": {
      "Q145": "United Kingdom"
    },
    "NoisyQuestion": "what do people speak in u.k.?"
  },
  {
    "QuestionId": "WebQTest-61",
    "RawQuestion": "what are the religions practiced in indonesia?",
    "ProcessedQuestion": "what are the religions practiced in indonesia",
    "Parses": [
      {
        "ParseId": "WebQTest-61.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ryn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ryn ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PotentialTopicEntityMention": "indonesia",
        "TopicEntityName": "Indonesia",
        "TopicEntityMid": "m.03ryn",
        "InferentialChain": [
          "location.statistical_region.religions",
          "location.religion_percentage.religion"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03j6c",
            "EntityName": "Hinduism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05sfs",
            "EntityName": "Protestantism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c8wxp",
            "EntityName": "Catholicism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0flw86",
            "EntityName": "Islam"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03ryn": "Indonesia"
    },
    "qid_topic_entity": {
      "Q252": "Indonesia"
    },
    "NoisyQuestion": "what are the religions practiced in indonesie?"
  },
  {
    "QuestionId": "WebQTest-768",
    "RawQuestion": "who owns volkswagen car company?",
    "ProcessedQuestion": "who owns volkswagen car company",
    "Parses": [
      {
        "ParseId": "WebQTest-768.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ywl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ywl ns:organization.organization.parent ?y .\n?y ns:organization.organization_relationship.parent ?x .\n}\n",
        "PotentialTopicEntityMention": "volkswagen",
        "TopicEntityName": "Volkswagen Passenger Cars",
        "TopicEntityMid": "m.07ywl",
        "InferentialChain": [
          "organization.organization.parent",
          "organization.organization_relationship.parent"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07_zt",
            "EntityName": "Volkswagen Group"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07ywl": "Volkswagen Passenger Cars"
    },
    "qid_topic_entity": {
      "Q246": "Volkswagen Passenger Cars"
    },
    "NoisyQuestion": "who owns volkswagon car company?"
  },
  {
    "QuestionId": "WebQTest-590",
    "RawQuestion": "who is in charge of libya now?",
    "ProcessedQuestion": "who is in charge of libya now",
    "Parses": [
      {
        "ParseId": "WebQTest-590.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gqr ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.0j5wjnc .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "libya",
        "TopicEntityName": "Libya",
        "TopicEntityMid": "m.04gqr",
        "InferentialChain": [
          "government.governmental_jurisdiction.governing_officials",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0j5wjnc",
            "EntityName": "Prime Minister of Libya",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.office_position_or_title",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": "now"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_ymzsm",
            "EntityName": "Abdullah al-Thani"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04gqr": "Libya"
    },
    "qid_topic_entity": {
      "Q1016": "Libya"
    },
    "NoisyQuestion": "who is in charge of libya now?"
  },
  {
    "QuestionId": "WebQTest-1326",
    "RawQuestion": "what did thomas edison do for the world?",
    "ProcessedQuestion": "what did thomas edison do for the world",
    "Parses": [
      {
        "ParseId": "WebQTest-1326.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07bty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07bty ns:law.inventor.inventions ?x .\n}\n",
        "PotentialTopicEntityMention": "thomas edison",
        "TopicEntityName": "Thomas Edison",
        "TopicEntityMid": "m.07bty",
        "InferentialChain": [
          "law.inventor.inventions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01cbh9",
            "EntityName": "Movie camera"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02r0w8q",
            "EntityName": "Quadruplex telegraph"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03q9w5j",
            "EntityName": "Electric Power Distribution"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0505x",
            "EntityName": "Mimeograph"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.063md",
            "EntityName": "Phonograph"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cpk7",
            "EntityName": "Incandescent light bulb"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d9fkw",
            "EntityName": "Carbon microphone"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0xrxw",
            "EntityName": "Phonograph cylinder"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07bty": "Thomas Edison"
    },
    "qid_topic_entity": {
      "Q8743": "Thomas Edison"
    },
    "NoisyQuestion": "what did thomaz edison do for the world?"
  },
  {
    "QuestionId": "WebQTest-643",
    "RawQuestion": "where does princess leia live?",
    "ProcessedQuestion": "where does princess leia live",
    "Parses": [
      {
        "ParseId": "WebQTest-643.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ddqw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ddqw ns:fictional_universe.fictional_character.places_lived ?x .\n}\n",
        "PotentialTopicEntityMention": "leia",
        "TopicEntityName": "Leia Organa",
        "TopicEntityMid": "m.0ddqw",
        "InferentialChain": [
          "fictional_universe.fictional_character.places_lived"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065lhy",
            "EntityName": "Alderaan"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ddqw": "Leia Organa"
    },
    "qid_topic_entity": {
      "Q51797": "Leia Organa"
    },
    "NoisyQuestion": "where does princess leia liv?"
  },
  {
    "QuestionId": "WebQTest-315",
    "RawQuestion": "where was country singer george jones born?",
    "ProcessedQuestion": "where was country singer george jones born",
    "Parses": [
      {
        "ParseId": "WebQTest-315.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hb9p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hb9p ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "george jones",
        "TopicEntityName": "George Jones",
        "TopicEntityMid": "m.01hb9p",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f9hl3",
            "EntityName": "Saratoga"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01hb9p": "George Jones"
    },
    "qid_topic_entity": {
      "Q508202": "George Jones"
    },
    "NoisyQuestion": "where was country singer george jons born?"
  },
  {
    "QuestionId": "WebQTest-466",
    "RawQuestion": "what language brazil speak?",
    "ProcessedQuestion": "what language brazil speak",
    "Parses": [
      {
        "ParseId": "WebQTest-466.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "brazil",
        "TopicEntityName": "Brazil",
        "TopicEntityMid": "m.015fr",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bjrlw",
            "EntityName": "Italian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02zj58",
            "EntityName": "Brazilian Portuguese"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zjd",
            "EntityName": "Portuguese Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-466.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "brazil",
        "TopicEntityName": "Brazil",
        "TopicEntityMid": "m.015fr",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zjd",
            "EntityName": "Portuguese Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.015fr": "Brazil"
    },
    "qid_topic_entity": {
      "Q155": "Brazil"
    },
    "NoisyQuestion": "what language brazill speak?"
  },
  {
    "QuestionId": "WebQTest-1822",
    "RawQuestion": "who is in paul ryan's family?",
    "ProcessedQuestion": "who is in paul ryan 's family",
    "Parses": [
      {
        "ParseId": "WebQTest-1822.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Union. Original comment: F Union - children + spouse and potentially parents"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tFILTER (?x != ns:m.024v2j)\n\t{ \n\t  # Parents\n\t  ns:m.024v2j ns:people.person.parents ?x .\n\t}\n\tUNION\n\t{\n\t  # Children\n\t  ns:m.024v2j ns:people.person.children ?x .\n\t}\n\tUNION\n\t{\n\t  # Siblings\n\t  ns:m.024v2j ns:people.person.sibling_s ?y .\n\t  ?y ns:people.sibling_relationship.sibling ?x .\n\t}\n\tUNION\n\t{\n\t  # Spouse\n\t  ns:m.024v2j ns:people.person.spouse_s ?y .\n\t  ?y ns:people.marriage.spouse ?x .\n\t  ?y ns:people.marriage.type_of_union ns:m.04ztj .\n\t  FILTER (NOT EXISTS {?y ns:people.marriage.to []})\n\t}\n}",
        "PotentialTopicEntityMention": "paul ryan",
        "TopicEntityName": "Paul Ryan",
        "TopicEntityMid": "m.024v2j",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j6fhh8",
            "EntityName": "Janna Ryan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kr8sx8",
            "EntityName": "Elizabeth Ryan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kr8t50",
            "EntityName": "Charles Ryan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kr8tj2",
            "EntityName": "Samuel Ryan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0qf0gtr",
            "EntityName": "Paul Murray Ryan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0qf0hct",
            "EntityName": "Elizabeth A. Ryan"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.024v2j": "Paul Ryan"
    },
    "qid_topic_entity": {
      "Q203966": "Paul Ryan"
    },
    "NoisyQuestion": "who is in pual ryan's family?"
  },
  {
    "QuestionId": "WebQTest-1418",
    "RawQuestion": "who is meredith gray married to in real life?",
    "ProcessedQuestion": "who is meredith gray married to in real life",
    "Parses": [
      {
        "ParseId": "WebQTest-1418.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Longer chain. Original comment: F Need the husband of the actor who plays Meredith Grey if \"real\" life means the actor"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n                ns:m.0268x2f ns:tv.tv_character.appeared_in_tv_program ?y .\n                ?y ns:tv.regular_tv_appearance.actor ?z .\n                ?z ns:people.person.spouse_s ?s .\n                ?s ns:people.marriage.spouse ?x .\n                ?s ns:people.marriage.type_of_union ns:m.04ztj .\nFilter (?x != ?z)\nFILTER(NOT EXISTS {?s ns:people.marriage.from ?sk0} || \n           EXISTS {?s ns:people.marriage.from ?sk1 . \n                   FILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?s ns:people.marriage.to ?sk2} || \n           EXISTS {?s ns:people.marriage.to ?sk3 . \n                   FILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n?s ns:people.marriage.from ?sk4 .\n}\nORDER BY DESC(xsd:datetime(?sk4))\nLIMIT 1",
        "PotentialTopicEntityMention": "meredith gray",
        "TopicEntityName": "Meredith Grey",
        "TopicEntityMid": "m.0268x2f",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09k5l7w",
            "EntityName": "Chris Ivery"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0268x2f": "Meredith Grey"
    },
    "qid_topic_entity": {
      "Q429828": "Meredith Grey"
    },
    "NoisyQuestion": "who is Meredith gray married to in real life?"
  },
  {
    "QuestionId": "WebQTest-440",
    "RawQuestion": "where is jason mraz from?",
    "ProcessedQuestion": "where is jason mraz from",
    "Parses": [
      {
        "ParseId": "WebQTest-440.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0259r0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0259r0 ns:music.artist.origin ?x .\n}\n",
        "PotentialTopicEntityMention": "jason mraz",
        "TopicEntityName": "Jason Mraz",
        "TopicEntityMid": "m.0259r0",
        "InferentialChain": [
          "music.artist.origin"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01n7q",
            "EntityName": "California"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01wkmq",
            "EntityName": "Mechanicsville"
          }
        ]
      },
      {
        "ParseId": "WebQTest-440.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0259r0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0259r0 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "jason mraz",
        "TopicEntityName": "Jason Mraz",
        "TopicEntityMid": "m.0259r0",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01wkmq",
            "EntityName": "Mechanicsville"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0259r0": "Jason Mraz"
    },
    "qid_topic_entity": {
      "Q192515": "Jason Mraz"
    },
    "NoisyQuestion": "where is jason mraz from?"
  },
  {
    "QuestionId": "WebQTest-879",
    "RawQuestion": "where was mary todd lincoln from?",
    "ProcessedQuestion": "where was mary todd lincoln from",
    "Parses": [
      {
        "ParseId": "WebQTest-879.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ypl0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ypl0 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "mary todd lincoln",
        "TopicEntityName": "Mary Todd Lincoln",
        "TopicEntityMid": "m.01ypl0",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d9y6",
            "EntityName": "Lexington"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01ypl0": "Mary Todd Lincoln"
    },
    "qid_topic_entity": {
      "Q215062": "Mary Todd Lincoln"
    },
    "NoisyQuestion": "where was mary todd lincoln from?"
  },
  {
    "QuestionId": "WebQTest-467",
    "RawQuestion": "who played obi wan in episode 2?",
    "ProcessedQuestion": "who played obi wan in episode 2",
    "Parses": [
      {
        "ParseId": "WebQTest-467.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fkm7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fkm7 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.0dfw0 .\n}\n",
        "PotentialTopicEntityMention": "obi wan",
        "TopicEntityName": "Obi-Wan Kenobi",
        "TopicEntityMid": "m.0fkm7",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0dfw0",
            "EntityName": "Star Wars Episode II: Attack of the Clones",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0k269",
            "EntityName": "Ewan McGregor"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0fkm7": "Obi-Wan Kenobi"
    },
    "qid_topic_entity": {
      "Q51740": "Obi-Wan Kenobi"
    },
    "NoisyQuestion": "who played obi wan in episode 2?"
  },
  {
    "QuestionId": "WebQTest-1775",
    "RawQuestion": "how many languages do they speak in spain?",
    "ProcessedQuestion": "how many languages do they speak in spain",
    "Parses": [
      {
        "ParseId": "WebQTest-1775.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "spain",
        "TopicEntityName": "Spain",
        "TopicEntityMid": "m.06mkj",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.017k6",
            "EntityName": "Basque Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01m69",
            "EntityName": "Catalan language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01q5d9",
            "EntityName": "Galician Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05l0r",
            "EntityName": "Occitan language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06nm1",
            "EntityName": "Spanish Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06mkj": "Spain"
    },
    "qid_topic_entity": {
      "Q29": "Spain"
    },
    "NoisyQuestion": "how many languages do they speak in españa?"
  },
  {
    "QuestionId": "WebQTest-531",
    "RawQuestion": "what style of music does michael jackson perform?",
    "ProcessedQuestion": "what style of music does michael jackson perform",
    "Parses": [
      {
        "ParseId": "WebQTest-531.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:music.artist.genre ?x .\n}\n",
        "PotentialTopicEntityMention": "michael jackson",
        "TopicEntityName": "Michael Jackson",
        "TopicEntityMid": "m.09889g",
        "InferentialChain": [
          "music.artist.genre"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.021_z5",
            "EntityName": "New jack swing"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025sc50",
            "EntityName": "Contemporary R&B"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.026z9",
            "EntityName": "Disco"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bqnt",
            "EntityName": "Motown Sound"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lkt",
            "EntityName": "Electronic music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02lnbg",
            "EntityName": "Dance-pop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02vjzr",
            "EntityName": "Adult contemporary music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02x8m",
            "EntityName": "Funk"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03c34yl",
            "EntityName": "Post-disco"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05bt6j",
            "EntityName": "Pop rock"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064t9",
            "EntityName": "Pop music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06by7",
            "EntityName": "Rock music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06j6l",
            "EntityName": "Rhythm and blues"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ggx5q",
            "EntityName": "Dance music"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gywn",
            "EntityName": "Soul music"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09889g": "Michael Jackson"
    },
    "qid_topic_entity": {
      "Q2831": "Michael Jackson"
    },
    "NoisyQuestion": "what style of music does michael jackson perform?"
  },
  {
    "QuestionId": "WebQTest-832",
    "RawQuestion": "when is the last time the giants won the world series?",
    "ProcessedQuestion": "when is the last time the giants won the world series",
    "Parses": [
      {
        "ParseId": "WebQTest-832.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0713r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0713r ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PotentialTopicEntityMention": "giants",
        "TopicEntityName": "San Francisco Giants",
        "TopicEntityMid": "m.0713r",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [],
        "Time": null,
        "Order": {
          "SortOrder": "Descending",
          "Start": 0,
          "Count": 1,
          "SourceNodeIndex": 0,
          "NodePredicate": "time.event.start_date",
          "ValueType": "DateTime"
        },
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0117q3yz",
            "EntityName": "2014 World Series"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0713r": "San Francisco Giants"
    },
    "qid_topic_entity": {
      "Q308966": "San Francisco Giants"
    },
    "NoisyQuestion": "when is the last time the giants won the world series?"
  },
  {
    "QuestionId": "WebQTest-1244",
    "RawQuestion": "who was sir walter raleigh and what did he do?",
    "ProcessedQuestion": "who was sir walter raleigh and what did he do",
    "Parses": [
      {
        "ParseId": "WebQTest-1244.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.084t6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.084t6 ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "walter raleigh",
        "TopicEntityName": "Walter Raleigh",
        "TopicEntityMid": "m.084t6",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016wtf",
            "EntityName": "Sailor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01h3_3",
            "EntityName": "Courtier"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05z96",
            "EntityName": "Poet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.099md",
            "EntityName": "Soldier"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.084t6": "Walter Raleigh"
    },
    "qid_topic_entity": {
      "Q189144": "Walter Raleigh"
    },
    "NoisyQuestion": "who was sir walter raleigh and what did he do?"
  },
  {
    "QuestionId": "WebQTest-1125",
    "RawQuestion": "what area of science did sir isaac newton study?",
    "ProcessedQuestion": "what area of science did sir isaac newton study",
    "Parses": [
      {
        "ParseId": "WebQTest-1125.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s9v ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "sir isaac newton",
        "TopicEntityName": "Isaac Newton",
        "TopicEntityMid": "m.03s9v",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01pxg",
            "EntityName": "Chemist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h6fbs",
            "EntityName": "Philosopher"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04s2z",
            "EntityName": "Mathematician"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05snw",
            "EntityName": "Physicist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06q2q",
            "EntityName": "Scientist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h9c",
            "EntityName": "Astronomer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03s9v": "Isaac Newton"
    },
    "qid_topic_entity": {
      "Q935": "Isaac Newton"
    },
    "NoisyQuestion": "what area of science did sir isaac newton studie?"
  },
  {
    "QuestionId": "WebQTest-1740",
    "RawQuestion": "who is angelina jolies brother?",
    "ProcessedQuestion": "who is angelina jolies brother",
    "Parses": [
      {
        "ParseId": "WebQTest-1740.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f4vbz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f4vbz ns:people.person.sibling_s ?y .\n?y ns:people.sibling_relationship.sibling ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PotentialTopicEntityMention": "angelina jolies",
        "TopicEntityName": "Angelina Jolie",
        "TopicEntityMid": "m.0f4vbz",
        "InferentialChain": [
          "people.person.sibling_s",
          "people.sibling_relationship.sibling"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05zppz",
            "EntityName": "Male",
            "SourceNodeIndex": 1,
            "NodePredicate": "people.person.gender",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01mqg0",
            "EntityName": "James Haven"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0f4vbz": "Angelina Jolie"
    },
    "qid_topic_entity": {
      "Q13909": "Angelina Jolie"
    },
    "NoisyQuestion": "who is angelina jolie's brother?"
  },
  {
    "QuestionId": "WebQTest-1548",
    "RawQuestion": "where did antoine lavoisier die?",
    "ProcessedQuestion": "where did antoine lavoisier die",
    "Parses": [
      {
        "ParseId": "WebQTest-1548.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0tfw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0tfw ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "antoine lavoisier",
        "TopicEntityName": "Antoine Lavoisier",
        "TopicEntityMid": "m.0tfw",
        "InferentialChain": [
          "people.deceased_person.place_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kx9d",
            "EntityName": "Place de la Concorde"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0tfw": "Antoine Lavoisier"
    },
    "qid_topic_entity": {
      "Q39607": "Antoine Lavoisier"
    },
    "NoisyQuestion": "where did antoine lavoisier die?"
  },
  {
    "QuestionId": "WebQTest-1882",
    "RawQuestion": "what was franklin d roosevelt's job before president?",
    "ProcessedQuestion": "what was franklin d roosevelt 's job before president",
    "Parses": [
      {
        "ParseId": "WebQTest-1882.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: Done.  Assuming the question is about the government positions before President.. Original comment: F cannot handle before questions"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  {\n    SELECT ?pFrom \n    WHERE {\n      ns:m.02yy8 ns:government.politician.government_positions_held ?y . # Franklin D. Roosevelt\n      ?y ns:government.government_position_held.office_position_or_title ?x ; \n         ns:government.government_position_held.basic_title ns:m.060c4 ; # President\n         ns:government.government_position_held.from ?pFrom .\n    }\n  }\n  ns:m.02yy8 ns:government.politician.government_positions_held ?y . # Franklin D. Roosevelt\n  ?y ns:government.government_position_held.office_position_or_title ?x ; \n     ns:government.government_position_held.from ?from .\n  \n  FILTER(xsd:dateTime(?pFrom) - xsd:dateTime(?from) > 0)\n}",
        "PotentialTopicEntityMention": "franklin d roosevelt",
        "TopicEntityName": "Franklin D. Roosevelt",
        "TopicEntityMid": "m.02yy8",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02_w_r9",
            "EntityName": "Governor of New York"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03whjr",
            "EntityName": "Assistant Secretary of the Navy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04kz0b7",
            "EntityName": "New York State Senator"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02yy8": "Franklin D. Roosevelt"
    },
    "qid_topic_entity": {
      "Q8007": "Franklin D. Roosevelt"
    },
    "NoisyQuestion": "what was franklin d roosevelt's job before presidint?"
  },
  {
    "QuestionId": "WebQTest-908",
    "RawQuestion": "what awards gary paulsen won?",
    "ProcessedQuestion": "what awards gary paulsen won",
    "Parses": [
      {
        "ParseId": "WebQTest-908.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04fpcx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04fpcx ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n}\n",
        "PotentialTopicEntityMention": "gary paulsen",
        "TopicEntityName": "Gary Paulsen",
        "TopicEntityMid": "m.04fpcx",
        "InferentialChain": [
          "award.award_winner.awards_won",
          "award.award_honor.award"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01cd7p",
            "EntityName": "John Newbery Medal"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027x4ws",
            "EntityName": "Dorothy Canfield Fisher Children's Book Award"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0463dxd",
            "EntityName": "Margaret Edwards Award"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04p1pmd",
            "EntityName": "Spur Award for Best Juvenile Fiction"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04p1pmh",
            "EntityName": "Spur Award for Best Juvenile Nonfiction"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09kkqzd",
            "EntityName": "Anne V. Zarrow Award for Young Readers' Literature"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0djddy",
            "EntityName": "Regina Medal"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04fpcx": "Gary Paulsen"
    },
    "qid_topic_entity": {
      "Q718463": "Gary Paulsen"
    },
    "NoisyQuestion": "what awards gary paolesn won?"
  },
  {
    "QuestionId": "WebQTest-901",
    "RawQuestion": "who would play luke skywalker?",
    "ProcessedQuestion": "who would play luke skywalker",
    "Parses": [
      {
        "ParseId": "WebQTest-901.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f1bg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f1bg ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "luke skywalker",
        "TopicEntityName": "Luke Skywalker",
        "TopicEntityMid": "m.0f1bg",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0154d7",
            "EntityName": "Mark Hamill"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0f1bg": "Luke Skywalker"
    },
    "qid_topic_entity": {
      "Q51746": "Luke Skywalker"
    },
    "NoisyQuestion": "who would play luke skywalker?"
  },
  {
    "QuestionId": "WebQTest-870",
    "RawQuestion": "where does the celtics practice?",
    "ProcessedQuestion": "where does the celtics practice",
    "Parses": [
      {
        "ParseId": "WebQTest-870.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bwjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bwjj ns:sports.sports_team.arena_stadium ?x .\n}\n",
        "PotentialTopicEntityMention": "celtics",
        "TopicEntityName": "Boston Celtics",
        "TopicEntityMid": "m.0bwjj",
        "InferentialChain": [
          "sports.sports_team.arena_stadium"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hqj2",
            "EntityName": "TD Garden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05tbsj",
            "EntityName": "XL Center"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0bwjj": "Boston Celtics"
    },
    "qid_topic_entity": {
      "Q131371": "Boston Celtics"
    },
    "NoisyQuestion": "where does the celtics practic?"
  },
  {
    "QuestionId": "WebQTest-1104",
    "RawQuestion": "what do we call the currency of france?",
    "ProcessedQuestion": "what do we call the currency of france",
    "Parses": [
      {
        "ParseId": "WebQTest-1104.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "needs \"now\" constraint"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "france",
        "TopicEntityName": "France",
        "TopicEntityMid": "m.0f8l9c",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01qyjx",
            "EntityName": "CFP franc"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02l6h",
            "EntityName": "Euro"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0f8l9c": "France"
    },
    "qid_topic_entity": {
      "Q142": "France"
    },
    "NoisyQuestion": "what do we call the currency of france?"
  },
  {
    "QuestionId": "WebQTest-669",
    "RawQuestion": "what did dr josef mengele do?",
    "ProcessedQuestion": "what did dr josef mengele do",
    "Parses": [
      {
        "ParseId": "WebQTest-669.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lhsd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lhsd ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "dr josef mengele",
        "TopicEntityName": "Josef Mengele",
        "TopicEntityMid": "m.0lhsd",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05t4q",
            "EntityName": "Physician"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0lhsd": "Josef Mengele"
    },
    "qid_topic_entity": {
      "Q57109": "Josef Mengele"
    },
    "NoisyQuestion": "what did dr joesf mengele do?"
  },
  {
    "QuestionId": "WebQTest-1699",
    "RawQuestion": "who played kirk?",
    "ProcessedQuestion": "who played kirk",
    "Parses": [
      {
        "ParseId": "WebQTest-1699.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0crtw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0crtw ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "kirk",
        "TopicEntityName": "James T. Kirk",
        "TopicEntityMid": "m.0crtw",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06jkh9",
            "EntityName": "Jimmy Bennett"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.084m3",
            "EntityName": "William Shatner"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c6g1l",
            "EntityName": "Chris Pine"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0crtw": "James T. Kirk"
    },
    "qid_topic_entity": {
      "Q16311": "James T. Kirk"
    },
    "NoisyQuestion": "who played kirk?"
  },
  {
    "QuestionId": "WebQTest-202",
    "RawQuestion": "what is the currency used in italy?",
    "ProcessedQuestion": "what is the currency used in italy",
    "Parses": [
      {
        "ParseId": "WebQTest-202.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "italy",
        "TopicEntityName": "Italy",
        "TopicEntityMid": "m.03rjj",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02l6h",
            "EntityName": "Euro"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03rjj": "Italy"
    },
    "qid_topic_entity": {
      "Q38": "Italy"
    },
    "NoisyQuestion": "what is the currency used in italy?"
  },
  {
    "QuestionId": "WebQTest-502",
    "RawQuestion": "where did al qaeda attack?",
    "ProcessedQuestion": "where did al qaeda attack",
    "Parses": [
      {
        "ParseId": "WebQTest-502.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? attack event vs. where"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0v74)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0v74 ns:base.disaster2.attacker.attack_s ?y .\n?y ns:base.disaster2.attack_process.attack_event ?x .\n?y ns:base.disaster2.attack_process.attacker ns:m.0v74 .\n}\n",
        "PotentialTopicEntityMention": "al qaeda",
        "TopicEntityName": "Al-Qaeda",
        "TopicEntityMid": "m.0v74",
        "InferentialChain": [
          "base.disaster2.attacker.attack_s",
          "base.disaster2.attack_process.attack_event"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0v74",
            "EntityName": "Al-Qaeda",
            "SourceNodeIndex": 0,
            "NodePredicate": "base.disaster2.attack_process.attacker",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c6cwg",
            "EntityName": "Taliban insurgency"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0vp3",
            "EntityName": "September 11 attacks"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0v74": "Al-Qaeda"
    },
    "qid_topic_entity": {
      "Q34490": "Al-Qaeda"
    },
    "NoisyQuestion": "where did al qaeda attak?"
  },
  {
    "QuestionId": "WebQTest-44",
    "RawQuestion": "what is the state flower of arizona?",
    "ProcessedQuestion": "what is the state flower of arizona",
    "Parses": [
      {
        "ParseId": "WebQTest-44.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vmt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vmt ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.04627gn .\n}\n",
        "PotentialTopicEntityMention": "arizona",
        "TopicEntityName": "Arizona",
        "TopicEntityMid": "m.0vmt",
        "InferentialChain": [
          "government.governmental_jurisdiction.official_symbols",
          "location.location_symbol_relationship.symbol"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04627gn",
            "EntityName": "State flower",
            "SourceNodeIndex": 0,
            "NodePredicate": "location.location_symbol_relationship.Kind_of_symbol",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0m5w_",
            "EntityName": "Saguaro"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0vmt": "Arizona"
    },
    "qid_topic_entity": {
      "Q816": "Arizona"
    },
    "NoisyQuestion": "what is the state flower of arizon?"
  },
  {
    "QuestionId": "WebQTest-402",
    "RawQuestion": "what does joey jordison play in slipknot?",
    "ProcessedQuestion": "what does joey jordison play in slipknot",
    "Parses": [
      {
        "ParseId": "WebQTest-402.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wt4wc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wt4wc ns:music.group_member.membership ?y .\n?y ns:music.group_membership.role ?x .\n?y ns:music.group_membership.group ns:m.0ntq7 .\n}\n",
        "PotentialTopicEntityMention": "joey jordison",
        "TopicEntityName": "Joey Jordison",
        "TopicEntityMid": "m.01wt4wc",
        "InferentialChain": [
          "music.group_member.membership",
          "music.group_membership.role"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0ntq7",
            "EntityName": "Slipknot",
            "SourceNodeIndex": 0,
            "NodePredicate": "music.group_membership.group",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hnl",
            "EntityName": "Drums"
          }
        ]
      },
      {
        "ParseId": "WebQTest-402.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ntq7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ntq7 ns:music.musical_group.member ?y .\n?y ns:music.group_membership.role ?x .\n?y ns:music.group_membership.member ns:m.01wt4wc .\n}\n",
        "PotentialTopicEntityMention": "slipknot",
        "TopicEntityName": "Slipknot",
        "TopicEntityMid": "m.0ntq7",
        "InferentialChain": [
          "music.musical_group.member",
          "music.group_membership.role"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01wt4wc",
            "EntityName": "Joey Jordison",
            "SourceNodeIndex": 0,
            "NodePredicate": "music.group_membership.member",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hnl",
            "EntityName": "Drums"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01wt4wc": "Joey Jordison",
      "m.0ntq7": "Slipknot"
    },
    "qid_topic_entity": {
      "Q295817": "Joey Jordison",
      "Q254138": "Slipknot"
    },
    "NoisyQuestion": "what does joey jordison play in slipknot?"
  },
  {
    "QuestionId": "WebQTest-1616",
    "RawQuestion": "what did shannon hoon die from?",
    "ProcessedQuestion": "what did shannon hoon die from",
    "Parses": [
      {
        "ParseId": "WebQTest-1616.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01w2x6z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01w2x6z ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "shannon hoon",
        "TopicEntityName": "Shannon Hoon",
        "TopicEntityMid": "m.01w2x6z",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01tf_6",
            "EntityName": "Drug overdose"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01w2x6z": "Shannon Hoon"
    },
    "qid_topic_entity": {
      "Q531978": "Shannon Hoon"
    },
    "NoisyQuestion": "what did shannon hoon die from?"
  },
  {
    "QuestionId": "WebQTest-529",
    "RawQuestion": "where did paula deen go to school?",
    "ProcessedQuestion": "where did paula deen go to school",
    "Parses": [
      {
        "ParseId": "WebQTest-529.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05dpch)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05dpch ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "paula deen",
        "TopicEntityName": "Paula Deen",
        "TopicEntityMid": "m.05dpch",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0610np",
            "EntityName": "Albany High School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05dpch": "Paula Deen"
    },
    "qid_topic_entity": {
      "Q3071037": "Paula Deen"
    },
    "NoisyQuestion": "where did paula deen go to scbool?"
  },
  {
    "QuestionId": "WebQTest-1235",
    "RawQuestion": "what was sir isaac newton's inventions?",
    "ProcessedQuestion": "what was sir isaac newton 's inventions",
    "Parses": [
      {
        "ParseId": "WebQTest-1235.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s9v ns:law.inventor.inventions ?x .\n}\n",
        "PotentialTopicEntityMention": "sir isaac newton",
        "TopicEntityName": "Isaac Newton",
        "TopicEntityMid": "m.03s9v",
        "InferentialChain": [
          "law.inventor.inventions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nhc9",
            "EntityName": "Reflecting telescope"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.079vqm",
            "EntityName": "Pet door"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03s9v": "Isaac Newton"
    },
    "qid_topic_entity": {
      "Q935": "Isaac Newton"
    },
    "NoisyQuestion": "what was sir isaac newton's inventions?"
  },
  {
    "QuestionId": "WebQTest-1381",
    "RawQuestion": "what is the zip code for princeton nj?",
    "ProcessedQuestion": "what is the zip code for princeton nj",
    "Parses": [
      {
        "ParseId": "WebQTest-1381.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ljsz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ljsz ns:location.citytown.postal_codes ?x .\n}\n",
        "PotentialTopicEntityMention": "princeton nj",
        "TopicEntityName": "Princeton",
        "TopicEntityMid": "m.0ljsz",
        "InferentialChain": [
          "location.citytown.postal_codes"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02070mv",
            "EntityName": "08542"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02070pc",
            "EntityName": "08540"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03n_q9c",
            "EntityName": "08543"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtr1",
            "EntityName": "08544"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtr8",
            "EntityName": "08541"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09sgmmm",
            "EntityName": "08542-4511"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0zscz9w",
            "EntityName": "08540-6449"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ljsz": "Princeton"
    },
    "qid_topic_entity": {
      "Q138518": "Princeton"
    },
    "NoisyQuestion": "what is the zip code for princton nj?"
  },
  {
    "QuestionId": "WebQTest-366",
    "RawQuestion": "what language do british speak?",
    "ProcessedQuestion": "what language do british speak",
    "Parses": [
      {
        "ParseId": "WebQTest-366.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "british",
        "TopicEntityName": "United Kingdom",
        "TopicEntityMid": "m.07ssc",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01v0g",
            "EntityName": "Cornish Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jcw",
            "EntityName": "Esperanto Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03x42",
            "EntityName": "Irish"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.070zw",
            "EntityName": "Scottish Gaelic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.083tk",
            "EntityName": "Welsh Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ct8m",
            "EntityName": "British Sign Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h407",
            "EntityName": "Scots Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-366.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "british",
        "TopicEntityName": "United Kingdom",
        "TopicEntityMid": "m.07ssc",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07ssc": "United Kingdom"
    },
    "qid_topic_entity": {
      "Q145": "United Kingdom"
    },
    "NoisyQuestion": "what language do britsh speak?"
  },
  {
    "QuestionId": "WebQTest-1417",
    "RawQuestion": "when was the last time the boston bruins went to the stanley cup?",
    "ProcessedQuestion": "when was the last time the boston bruins went to the stanley cup",
    "Parses": [
      {
        "ParseId": "WebQTest-1417.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Union. Original comment: F union"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ns:m.0cc8tt9 ns:time.recurring_event.instances ?x . # Stanly Cup finals instances\n\n  {\n    ?x ns:sports.sports_championship_event.champion ns:m.0j2zj . #(Boston Bruins)\n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.0j2zj . #(Boston Bruins)\n  }\n\n  ?x ns:time.event.start_date ?st .\n}\nORDER BY DESC(xsd:datetime(?st))\nLIMIT 1",
        "PotentialTopicEntityMention": "boston bruins",
        "TopicEntityName": "Boston Bruins",
        "TopicEntityMid": "m.0j2zj",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hrcjzl",
            "EntityName": "2013 Stanley Cup Finals"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0j2zj": "Boston Bruins"
    },
    "qid_topic_entity": {
      "Q194121": "Boston Bruins"
    },
    "NoisyQuestion": "when was the last time the boston bruins went to the stanley cup?"
  },
  {
    "QuestionId": "WebQTest-656",
    "RawQuestion": "who is the president of costa rica in 2012?",
    "ProcessedQuestion": "who is the president of costa rica in 2012",
    "Parses": [
      {
        "ParseId": "WebQTest-656.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "Can't filter on year"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p8s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p8s ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.060c4 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2012-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2012-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "costa rica",
        "TopicEntityName": "Costa Rica",
        "TopicEntityMid": "m.01p8s",
        "InferentialChain": [
          "government.governmental_jurisdiction.governing_officials",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.060c4",
            "EntityName": "President",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.basic_title",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2012-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2012-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2012-01-01",
          "End": "2012-12-31",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": "2012"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bh9gpm",
            "EntityName": "Laura Chinchilla"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01p8s": "Costa Rica"
    },
    "qid_topic_entity": {
      "Q800": "Costa Rica"
    },
    "NoisyQuestion": "who is the president of costarica in 2012?"
  },
  {
    "QuestionId": "WebQTest-1911",
    "RawQuestion": "where did scott fitzgerald go to college?",
    "ProcessedQuestion": "where did scott fitzgerald go to college",
    "Parses": [
      {
        "ParseId": "WebQTest-1911.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02zjd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02zjd ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "scott fitzgerald",
        "TopicEntityName": "F. Scott Fitzgerald",
        "TopicEntityMid": "m.02zjd",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zl0",
            "EntityName": "Princeton University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02zjd": "F. Scott Fitzgerald"
    },
    "qid_topic_entity": {
      "Q93354": "F. Scott Fitzgerald"
    },
    "NoisyQuestion": "where did scott fitzgeralde go to college?"
  },
  {
    "QuestionId": "WebQTest-1765",
    "RawQuestion": "what region is turkey considered?",
    "ProcessedQuestion": "what region is turkey considered",
    "Parses": [
      {
        "ParseId": "WebQTest-1765.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:base.locations.countries.continent ?x .\n}\n",
        "PotentialTopicEntityMention": "turkey",
        "TopicEntityName": "Turkey",
        "TopicEntityMid": "m.01znc_",
        "InferentialChain": [
          "base.locations.countries.continent"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qkt",
            "EntityName": "Eurasia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01znc_": "Turkey"
    },
    "qid_topic_entity": {
      "Q43": "Turkey"
    },
    "NoisyQuestion": "what region is turky considered?"
  },
  {
    "QuestionId": "WebQTest-448",
    "RawQuestion": "what type of government system does italy have?",
    "ProcessedQuestion": "what type of government system does italy have",
    "Parses": [
      {
        "ParseId": "WebQTest-448.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "italy",
        "TopicEntityName": "Italy",
        "TopicEntityMid": "m.03rjj",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fpfn",
            "EntityName": "Unitary state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0glnsx",
            "EntityName": "Parliamentary republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03rjj": "Italy"
    },
    "qid_topic_entity": {
      "Q38": "Italy"
    },
    "NoisyQuestion": "what type of government system does italy have?"
  },
  {
    "QuestionId": "WebQTest-141",
    "RawQuestion": "who is gimli's father in the hobbit?",
    "ProcessedQuestion": "who is gimli 's father in the hobbit",
    "Parses": [
      {
        "ParseId": "WebQTest-141.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h34n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h34n ns:fictional_universe.fictional_character.parents ?x .\n?x ns:fictional_universe.fictional_character.gender ns:m.05zppz .\n}\n",
        "PotentialTopicEntityMention": "gimli",
        "TopicEntityName": "Gimli",
        "TopicEntityMid": "m.0h34n",
        "InferentialChain": [
          "fictional_universe.fictional_character.parents"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05zppz",
            "EntityName": "Male",
            "SourceNodeIndex": 0,
            "NodePredicate": "fictional_universe.fictional_character.gender",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gwn5p0",
            "EntityName": "Gloin"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0h34n": "Gimli"
    },
    "qid_topic_entity": {
      "Q206818": "Gimli"
    },
    "NoisyQuestion": "who is gimli's fathr in the hobbit?"
  },
  {
    "QuestionId": "WebQTest-1419",
    "RawQuestion": "what inspired michelangelo buonarroti?",
    "ProcessedQuestion": "what inspired michelangelo buonarroti",
    "Parses": [
      {
        "ParseId": "WebQTest-1419.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.058w5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.058w5 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PotentialTopicEntityMention": "michelangelo buonarroti",
        "TopicEntityName": "Michelangelo",
        "TopicEntityMid": "m.058w5",
        "InferentialChain": [
          "influence.influence_node.influenced_by"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.013w_3",
            "EntityName": "Giovanni Pico della Mirandola"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01cc3w",
            "EntityName": "Domenico Ghirlandaio"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04qj5",
            "EntityName": "Lorenzo de' Medici"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.072cpw",
            "EntityName": "Melozzo da Forlì"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d8wb",
            "EntityName": "Girolamo Savonarola"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j56d",
            "EntityName": "Donatello"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.058w5": "Michelangelo"
    },
    "qid_topic_entity": {
      "Q5592": "Michelangelo"
    },
    "NoisyQuestion": "what inspired michelangelo buonarroti?"
  },
  {
    "QuestionId": "WebQTest-1544",
    "RawQuestion": "who was president after william henry harrison?",
    "ProcessedQuestion": "who was president after william henry harrison",
    "Parses": [
      {
        "ParseId": "WebQTest-1544.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F After. Original comment: !Manual AnswerAndPartialSparql. Comment: F After. Partial comment: can we add one to the presidency_number?. Original comment: F After William Henry Harrison"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x \nWHERE {\nfilter (?x != ns:m.0835q)\n  ns:m.0835q ns:government.us_president.presidency_number ?p .\n  ns:m.060d2 ns:government.government_office_or_title.office_holders ?y .\n  ?y ns:government.government_position_held.office_holder ?x .\n  ?x ns:government.us_president.presidency_number ?pp .\nfilter (xsd:float(?p)+1 = xsd:float(?pp))\n}",
        "PotentialTopicEntityMention": "president",
        "TopicEntityName": "President of the United States",
        "TopicEntityMid": "m.060d2",
        "InferentialChain": [
          "government.government_office_or_title.office_holders",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.060c4",
            "EntityName": "President",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.basic_title",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.042dk",
            "EntityName": "John Tyler"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.060d2": "President of the United States"
    },
    "qid_topic_entity": {
      "Q11696": "President of the United States"
    },
    "NoisyQuestion": "who was president after william henry harrisons?"
  },
  {
    "QuestionId": "WebQTest-1151",
    "RawQuestion": "where did charles darwin and his wife live?",
    "ProcessedQuestion": "where did charles darwin and his wife live",
    "Parses": [
      {
        "ParseId": "WebQTest-1151.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? not sure about his wife"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lwx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lwx ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PotentialTopicEntityMention": "charles darwin",
        "TopicEntityName": "Charles Darwin",
        "TopicEntityMid": "m.01lwx",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0235n9",
            "EntityName": "Shrewsbury"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02jx1",
            "EntityName": "England"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.030r7l4",
            "EntityName": "Downe, Kent"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jpl",
            "EntityName": "London"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01lwx": "Charles Darwin"
    },
    "qid_topic_entity": {
      "Q1035": "Charles Darwin"
    },
    "NoisyQuestion": "where did charles darwinn and his wife live?"
  },
  {
    "QuestionId": "WebQTest-1325",
    "RawQuestion": "what language do maltese speak?",
    "ProcessedQuestion": "what language do maltese speak",
    "Parses": [
      {
        "ParseId": "WebQTest-1325.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v3q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v3q ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "maltese",
        "TopicEntityName": "Malta",
        "TopicEntityMid": "m.04v3q",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1325.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v3q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v3q ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "maltese",
        "TopicEntityName": "Malta",
        "TopicEntityMid": "m.04v3q",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t3_",
            "EntityName": "Maltese Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04v3q": "Malta"
    },
    "qid_topic_entity": {
      "Q233": "Malta"
    },
    "NoisyQuestion": "what language do maltese speek?"
  },
  {
    "QuestionId": "WebQTest-1639",
    "RawQuestion": "where did frank baum die?",
    "ProcessedQuestion": "where did frank baum die",
    "Parses": [
      {
        "ParseId": "WebQTest-1639.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04mby)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04mby ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "frank baum",
        "TopicEntityName": "L. Frank Baum",
        "TopicEntityMid": "m.04mby",
        "InferentialChain": [
          "people.deceased_person.place_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f2wj",
            "EntityName": "Hollywood"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04mby": "L. Frank Baum"
    },
    "qid_topic_entity": {
      "Q207544": "L. Frank Baum"
    },
    "NoisyQuestion": "where did Frank Baum die?"
  },
  {
    "QuestionId": "WebQTest-1331",
    "RawQuestion": "who is my state senator arizona?",
    "ProcessedQuestion": "who is my state senator arizona",
    "Parses": [
      {
        "ParseId": "WebQTest-1331.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vmt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vmt ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.02_7l8y .\n}\n",
        "PotentialTopicEntityMention": "arizona",
        "TopicEntityName": "Arizona",
        "TopicEntityMid": "m.0vmt",
        "InferentialChain": [
          "government.political_district.representatives",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02_7l8y",
            "EntityName": "United States Senator",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.office_position_or_title",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01j6t",
            "EntityName": "Barry Goldwater"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01y0mp",
            "EntityName": "Jon Kyl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.024p7j",
            "EntityName": "Jeff Flake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rzt9",
            "EntityName": "Carl Hayden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03l8kj",
            "EntityName": "Ernest McFarland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03mchy",
            "EntityName": "Dennis DeConcini"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04dt8k",
            "EntityName": "Paul Fannin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07s4f1",
            "EntityName": "Henry F. Ashurst"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07sckt",
            "EntityName": "Marcus A. Smith"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07sgkx",
            "EntityName": "Ralph H. Cameron"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bymv",
            "EntityName": "John McCain"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0vmt": "Arizona"
    },
    "qid_topic_entity": {
      "Q816": "Arizona"
    },
    "NoisyQuestion": "who is my state senator arizona?"
  },
  {
    "QuestionId": "WebQTest-200",
    "RawQuestion": "where was the vietnam war location?",
    "ProcessedQuestion": "where was the vietnam war location",
    "Parses": [
      {
        "ParseId": "WebQTest-200.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_nf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_nf ns:time.event.locations ?x .\n}\n",
        "PotentialTopicEntityMention": "vietnam war",
        "TopicEntityName": "Vietnam War",
        "TopicEntityMid": "m.07_nf",
        "InferentialChain": [
          "time.event.locations"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01crd5",
            "EntityName": "Vietnam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01xbgx",
            "EntityName": "Cambodia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hhv",
            "EntityName": "Laos"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.073q1",
            "EntityName": "Southeast Asia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g8bw",
            "EntityName": "South Vietnam"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g970",
            "EntityName": "North Vietnam"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07_nf": "Vietnam War"
    },
    "qid_topic_entity": {
      "Q8740": "Vietnam War"
    },
    "NoisyQuestion": "where was the vietnam war locatio?"
  },
  {
    "QuestionId": "WebQTest-892",
    "RawQuestion": "what did miles davis died of?",
    "ProcessedQuestion": "what did miles davis died of",
    "Parses": [
      {
        "ParseId": "WebQTest-892.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.053yx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.053yx ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "miles davis",
        "TopicEntityName": "Miles Davis",
        "TopicEntityMid": "m.053yx",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.019dmc",
            "EntityName": "Respiratory failure"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02y0js",
            "EntityName": "Stroke"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dq9p",
            "EntityName": "Pneumonia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.053yx": "Miles Davis"
    },
    "qid_topic_entity": {
      "Q93341": "Miles Davis"
    },
    "NoisyQuestion": "what did miles davis died of?"
  },
  {
    "QuestionId": "WebQTest-338",
    "RawQuestion": "what do they call money in japan?",
    "ProcessedQuestion": "what do they call money in japan",
    "Parses": [
      {
        "ParseId": "WebQTest-338.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "japan",
        "TopicEntityName": "Japan",
        "TopicEntityMid": "m.03_3d",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.088n7",
            "EntityName": "Japanese yen"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03_3d": "Japan"
    },
    "qid_topic_entity": {
      "Q17": "Japan"
    },
    "NoisyQuestion": "what do they call money in jpan?"
  },
  {
    "QuestionId": "WebQTest-1389",
    "RawQuestion": "what jobs did robert burns have?",
    "ProcessedQuestion": "what jobs did robert burns have",
    "Parses": [
      {
        "ParseId": "WebQTest-1389.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09482)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09482 ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "robert burns",
        "TopicEntityName": "Robert Burns",
        "TopicEntityMid": "m.09482",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05z96",
            "EntityName": "Poet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0knj1",
            "EntityName": "Bard"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kyk",
            "EntityName": "Author"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09482": "Robert Burns"
    },
    "qid_topic_entity": {
      "Q81960": "Robert Burns"
    },
    "NoisyQuestion": "what jobs did rober burns have?"
  },
  {
    "QuestionId": "WebQTest-360",
    "RawQuestion": "where did emperor hirohito live?",
    "ProcessedQuestion": "where did emperor hirohito live",
    "Parses": [
      {
        "ParseId": "WebQTest-360.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? birthplace doesn't seem appropriate for an emperor"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02sm8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02sm8 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "emperor hirohito",
        "TopicEntityName": "Hirohito",
        "TopicEntityMid": "m.02sm8",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03xm9l",
            "EntityName": "Aoyama, Minato, Tokyo"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02sm8": "Hirohito"
    },
    "qid_topic_entity": {
      "Q34479": "Hirohito"
    },
    "NoisyQuestion": "where did emperor hirohito liv?"
  },
  {
    "QuestionId": "WebQTest-1024",
    "RawQuestion": "what kind of money do i bring to mexico?",
    "ProcessedQuestion": "what kind of money do i bring to mexico",
    "Parses": [
      {
        "ParseId": "WebQTest-1024.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "mexico",
        "TopicEntityName": "Mexico",
        "TopicEntityMid": "m.0b90_r",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012ts8",
            "EntityName": "Mexican peso"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0b90_r": "Mexico"
    },
    "qid_topic_entity": {
      "Q96": "Mexico"
    },
    "NoisyQuestion": "what kind of money do i bring to meico?"
  },
  {
    "QuestionId": "WebQTest-2014",
    "RawQuestion": "what type of breast cancer did sheryl crow have?",
    "ProcessedQuestion": "what type of breast cancer did sheryl crow have",
    "Parses": [
      {
        "ParseId": "WebQTest-2014.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06rgq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06rgq ns:medicine.notable_person_with_medical_condition.condition ?x .\n?x ns:medicine.disease.parent_disease ns:m.0qcr0 .\n}\n",
        "PotentialTopicEntityMention": "sheryl crow",
        "TopicEntityName": "Sheryl Crow",
        "TopicEntityMid": "m.06rgq",
        "InferentialChain": [
          "medicine.notable_person_with_medical_condition.condition"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0qcr0",
            "EntityName": "Cancer",
            "SourceNodeIndex": 0,
            "NodePredicate": "medicine.disease.parent_disease",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03z_9l",
            "EntityName": "Meningioma"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06rgq": "Sheryl Crow"
    },
    "qid_topic_entity": {
      "Q200586": "Sheryl Crow"
    },
    "NoisyQuestion": "what type of breast cancer did sheryl crows have?"
  },
  {
    "QuestionId": "WebQTest-1428",
    "RawQuestion": "who does ron stoppable's voice?",
    "ProcessedQuestion": "who does ron stoppable 's voice",
    "Parses": [
      {
        "ParseId": "WebQTest-1428.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09w3mr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09w3mr ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PotentialTopicEntityMention": "ron stoppable",
        "TopicEntityName": "Ron Stoppable",
        "TopicEntityMid": "m.09w3mr",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02nsjvf",
            "EntityName": "Voice",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.special_performance_type",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.031y89",
            "EntityName": "Will Friedle"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09w3mr": "Ron Stoppable"
    },
    "qid_topic_entity": {
      "Q1188011": "Ron Stoppable"
    },
    "NoisyQuestion": "who does ron stoppable's voice?"
  },
  {
    "QuestionId": "WebQTest-1939",
    "RawQuestion": "what form of government does canada?",
    "ProcessedQuestion": "what form of government does canada",
    "Parses": [
      {
        "ParseId": "WebQTest-1939.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d060g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d060g ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "canada",
        "TopicEntityName": "Canada",
        "TopicEntityMid": "m.0d060g",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.018wl5",
            "EntityName": "Parliamentary system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01q20",
            "EntityName": "Constitutional monarchy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g3y9q",
            "EntityName": "Federal monarchy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d060g": "Canada"
    },
    "qid_topic_entity": {
      "Q16": "Canada"
    },
    "NoisyQuestion": "what form of government does canad?"
  },
  {
    "QuestionId": "WebQTest-1992",
    "RawQuestion": "which island is kailua on?",
    "ProcessedQuestion": "which island is kailua on",
    "Parses": [
      {
        "ParseId": "WebQTest-1992.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0r_x0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0r_x0 ns:location.location.containedby ?x .\n?x ns:geography.island.island_group ns:m.014wxc .\n}\n",
        "PotentialTopicEntityMention": "kailua",
        "TopicEntityName": "Kailua",
        "TopicEntityMid": "m.0r_x0",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.014wxc",
            "EntityName": "Hawaiian Islands",
            "SourceNodeIndex": 0,
            "NodePredicate": "geography.island.island_group",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dfcn",
            "EntityName": "Oahu"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0r_x0": "Kailua"
    },
    "qid_topic_entity": {
      "Q532459": "Kailua"
    },
    "NoisyQuestion": "which island is kailuaa on?"
  },
  {
    "QuestionId": "WebQTest-2029",
    "RawQuestion": "where was the palace of knossos located?",
    "ProcessedQuestion": "where was the palace of knossos located",
    "Parses": [
      {
        "ParseId": "WebQTest-2029.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ksnn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ksnn ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "palace of knossos",
        "TopicEntityName": "Knossos",
        "TopicEntityMid": "m.0ksnn",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01xyy",
            "EntityName": "Crete"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.035qy",
            "EntityName": "Greece"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ksnn": "Knossos"
    },
    "qid_topic_entity": {
      "Q173527": "Knossos"
    },
    "NoisyQuestion": "where was the palace of knossos located?"
  },
  {
    "QuestionId": "WebQTest-586",
    "RawQuestion": "what type of cancer did larry hagman have?",
    "ProcessedQuestion": "what type of cancer did larry hagman have",
    "Parses": [
      {
        "ParseId": "WebQTest-586.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vyv9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vyv9 ns:people.deceased_person.cause_of_death ?x .\n?x ns:people.cause_of_death.parent_cause_of_death ns:m.0qcr0 .\n}\n",
        "PotentialTopicEntityMention": "larry hagman",
        "TopicEntityName": "Larry Hagman",
        "TopicEntityMid": "m.01vyv9",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0qcr0",
            "EntityName": "Cancer",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.cause_of_death.parent_cause_of_death",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0369n2",
            "EntityName": "Head and neck cancer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04psf",
            "EntityName": "Leukemia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01vyv9": "Larry Hagman"
    },
    "qid_topic_entity": {
      "Q100440": "Larry Hagman"
    },
    "NoisyQuestion": "what type of cancer did larry hagmon have?"
  },
  {
    "QuestionId": "WebQTest-1584",
    "RawQuestion": "what disease did bernie mac die of?",
    "ProcessedQuestion": "what disease did bernie mac die of",
    "Parses": [
      {
        "ParseId": "WebQTest-1584.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lj6p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lj6p ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "bernie mac",
        "TopicEntityName": "Bernie Mac",
        "TopicEntityMid": "m.02lj6p",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01q5y6",
            "EntityName": "Sarcoidosis"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0p367zp",
            "EntityName": "Complications from pneumonia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02lj6p": "Bernie Mac"
    },
    "qid_topic_entity": {
      "Q176323": "Bernie Mac"
    },
    "NoisyQuestion": "what disease did bernie mac die of?"
  },
  {
    "QuestionId": "WebQTest-264",
    "RawQuestion": "what does australia use for currency?",
    "ProcessedQuestion": "what does australia use for currency",
    "Parses": [
      {
        "ParseId": "WebQTest-264.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "australia",
        "TopicEntityName": "Australia",
        "TopicEntityMid": "m.0chghy",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kz1h",
            "EntityName": "Australian dollar"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0chghy": "Australia"
    },
    "qid_topic_entity": {
      "Q408": "Australia"
    },
    "NoisyQuestion": "what does australia use for currenc?"
  },
  {
    "QuestionId": "WebQTest-618",
    "RawQuestion": "where is chesapeake bay bridge?",
    "ProcessedQuestion": "where is chesapeake bay bridge",
    "Parses": [
      {
        "ParseId": "WebQTest-618.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03xksb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03xksb ns:transportation.bridge.locale ?x .\n}\n",
        "PotentialTopicEntityMention": "chesapeake bay bridge",
        "TopicEntityName": "Chesapeake Bay Bridge",
        "TopicEntityMid": "m.03xksb",
        "InferentialChain": [
          "transportation.bridge.locale"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dn8b",
            "EntityName": "Anne Arundel County"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g834",
            "EntityName": "Queen Anne's County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03xksb": "Chesapeake Bay Bridge"
    },
    "qid_topic_entity": {
      "Q1319988": "Chesapeake Bay Bridge"
    },
    "NoisyQuestion": "where is chesapeake bay brdge?"
  },
  {
    "QuestionId": "WebQTest-900",
    "RawQuestion": "where did nat turner 1831 rebellion occur?",
    "ProcessedQuestion": "where did nat turner 1831 rebellion occur",
    "Parses": [
      {
        "ParseId": "WebQTest-900.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h5d0t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h5d0t ns:time.event.locations ?x .\n}\n",
        "PotentialTopicEntityMention": "nat turner 1831 rebellion",
        "TopicEntityName": "Nat Turner's slave rebellion",
        "TopicEntityMid": "m.0h5d0t",
        "InferentialChain": [
          "time.event.locations"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0mn21",
            "EntityName": "Southampton County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0h5d0t": "Nat Turner's slave rebellion"
    },
    "qid_topic_entity": {
      "Q6967898": "Nat Turner's slave rebellion"
    },
    "NoisyQuestion": "where did nat turner 1831 rebellion occur?"
  },
  {
    "QuestionId": "WebQTest-1429",
    "RawQuestion": "what currency is accepted in new zealand?",
    "ProcessedQuestion": "what currency is accepted in new zealand",
    "Parses": [
      {
        "ParseId": "WebQTest-1429.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ctw_b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ctw_b ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "new zealand",
        "TopicEntityName": "New Zealand",
        "TopicEntityMid": "m.0ctw_b",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015f1d",
            "EntityName": "New Zealand dollar"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ctw_b": "New Zealand"
    },
    "qid_topic_entity": {
      "Q664": "New Zealand"
    },
    "NoisyQuestion": "what currency is accepted in new zeland?"
  },
  {
    "QuestionId": "WebQTest-106",
    "RawQuestion": "who did armie hammer play in the social network?",
    "ProcessedQuestion": "who did armie hammer play in the social network",
    "Parses": [
      {
        "ParseId": "WebQTest-106.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07s846j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07s846j ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:m.03y9941 .\n}\n",
        "PotentialTopicEntityMention": "social network",
        "TopicEntityName": "The Social Network",
        "TopicEntityMid": "m.07s846j",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.03y9941",
            "EntityName": "Armie Hammer",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.actor",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09tb_f3",
            "EntityName": "Tyler Winklevoss"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09tbj8d",
            "EntityName": "Cameron Winklevoss"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07s846j": "The Social Network"
    },
    "qid_topic_entity": {
      "Q185888": "The Social Network"
    },
    "NoisyQuestion": "who did armie hamer play in the social network?"
  },
  {
    "QuestionId": "WebQTest-8",
    "RawQuestion": "what else did ben franklin invent?",
    "ProcessedQuestion": "what else did ben franklin invent",
    "Parses": [
      {
        "ParseId": "WebQTest-8.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:law.inventor.inventions ?x .\n}\n",
        "PotentialTopicEntityMention": "ben franklin",
        "TopicEntityName": "Benjamin Franklin",
        "TopicEntityMid": "m.019fz",
        "InferentialChain": [
          "law.inventor.inventions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0135nr",
            "EntityName": "Lightning rod"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.013cqs",
            "EntityName": "Bifocals"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01zh8g",
            "EntityName": "Glass harmonica"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.029mmz",
            "EntityName": "Franklin stove"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.019fz": "Benjamin Franklin"
    },
    "qid_topic_entity": {
      "Q34969": "Benjamin Franklin"
    },
    "NoisyQuestion": "what else did ben franklin invent?"
  },
  {
    "QuestionId": "WebQTest-1307",
    "RawQuestion": "where did harper lee attend high school?",
    "ProcessedQuestion": "where did harper lee attend high school",
    "Parses": [
      {
        "ParseId": "WebQTest-1307.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq7x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq7x ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hn6 .\n}\n",
        "PotentialTopicEntityMention": "harper lee",
        "TopicEntityName": "Harper Lee",
        "TopicEntityMid": "m.01bq7x",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hn6",
            "EntityName": "School",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crdc8g",
            "EntityName": "Monroe County High School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01bq7x": "Harper Lee"
    },
    "qid_topic_entity": {
      "Q182658": "Harper Lee"
    },
    "NoisyQuestion": "where did Harper Lee attend high school?"
  },
  {
    "QuestionId": "WebQTest-2005",
    "RawQuestion": "who plays bob kelso in scrubs?",
    "ProcessedQuestion": "who plays bob kelso in scrubs",
    "Parses": [
      {
        "ParseId": "WebQTest-2005.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ck2ty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ck2ty ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.01fs__ .\n}\n",
        "PotentialTopicEntityMention": "bob kelso",
        "TopicEntityName": "Bob Kelso",
        "TopicEntityMid": "m.0ck2ty",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01fs__",
            "EntityName": "Scrubs",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.series",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07w8hh",
            "EntityName": "Ken Jenkins"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ck2ty": "Bob Kelso"
    },
    "qid_topic_entity": {
      "Q2532197": "Bob Kelso"
    },
    "NoisyQuestion": "who plays bob kelsio in scrubs?"
  },
  {
    "QuestionId": "WebQTest-251",
    "RawQuestion": "what type of currency do they use in england?",
    "ProcessedQuestion": "what type of currency do they use in england",
    "Parses": [
      {
        "ParseId": "WebQTest-251.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02jx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02jx1 ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "england",
        "TopicEntityName": "England",
        "TopicEntityMid": "m.02jx1",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nv4h",
            "EntityName": "Pound sterling"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02jx1": "England"
    },
    "qid_topic_entity": {
      "Q21": "England"
    },
    "NoisyQuestion": "what type of currency do they use in englan?"
  },
  {
    "QuestionId": "WebQTest-1143",
    "RawQuestion": "what galileo galilei was famous for?",
    "ProcessedQuestion": "what galileo galilei was famous for",
    "Parses": [
      {
        "ParseId": "WebQTest-1143.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034ks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034ks ns:user.lindenb.default_domain.scientist.known_for ?x .\n}\n",
        "PotentialTopicEntityMention": "galileo galilei",
        "TopicEntityName": "Galileo Galilei",
        "TopicEntityMid": "m.034ks",
        "InferentialChain": [
          "user.lindenb.default_domain.scientist.known_for"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01kf8z",
            "EntityName": "Heliocentrism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06p5g",
            "EntityName": "Solar System"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hggs",
            "EntityName": "Kinematics"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.034ks": "Galileo Galilei"
    },
    "qid_topic_entity": {
      "Q307": "Galileo Galilei"
    },
    "NoisyQuestion": "what galileo galilei was famous for?"
  },
  {
    "QuestionId": "WebQTest-1537",
    "RawQuestion": "what did niels bohr discover about the atomic structure?",
    "ProcessedQuestion": "what did niels bohr discover about the atomic structure",
    "Parses": [
      {
        "ParseId": "WebQTest-1537.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? "
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059y0 ns:base.nobelprizes.nobel_prize_winner.nobel_honor ?y .\n?y ns:base.nobelprizes.nobel_honor.subject_area ?x .\n}\n",
        "PotentialTopicEntityMention": "niels bohr",
        "TopicEntityName": "Niels Henrik David Bohr",
        "TopicEntityMid": "m.059y0",
        "InferentialChain": [
          "base.nobelprizes.nobel_prize_winner.nobel_honor",
          "base.nobelprizes.nobel_honor.subject_area"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.069dx",
            "EntityName": "Quantum mechanics"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.059y0": "Niels Henrik David Bohr"
    },
    "qid_topic_entity": {
      "Q7085": "Niels Henrik David Bohr"
    },
    "NoisyQuestion": "what did niels bohr discover about the atomic structure?"
  },
  {
    "QuestionId": "WebQTest-1392",
    "RawQuestion": "what the language spoken in indonesia?",
    "ProcessedQuestion": "what the language spoken in indonesia",
    "Parses": [
      {
        "ParseId": "WebQTest-1392.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ryn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ryn ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "indonesia",
        "TopicEntityName": "Indonesia",
        "TopicEntityMid": "m.03ryn",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01qzl2",
            "EntityName": "Sunda Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0201jz",
            "EntityName": "Bali Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.020257",
            "EntityName": "Madura Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bv9",
            "EntityName": "Dutch Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hwx1l",
            "EntityName": "Javanese Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.075yc64",
            "EntityName": "Batak Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.097kp",
            "EntityName": "Indonesian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f9fsf",
            "EntityName": "Tobelo Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0y1mh",
            "EntityName": "Malay Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1392.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ryn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ryn ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "indonesia",
        "TopicEntityName": "Indonesia",
        "TopicEntityMid": "m.03ryn",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.097kp",
            "EntityName": "Indonesian Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03ryn": "Indonesia"
    },
    "qid_topic_entity": {
      "Q252": "Indonesia"
    },
    "NoisyQuestion": "what the language spoken in indonesie?"
  },
  {
    "QuestionId": "WebQTest-1972",
    "RawQuestion": "where did john franklin live?",
    "ProcessedQuestion": "where did john franklin live",
    "Parses": [
      {
        "ParseId": "WebQTest-1972.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06hw0m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06hw0m ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PotentialTopicEntityMention": "john franklin",
        "TopicEntityName": "John Franklin",
        "TopicEntityMid": "m.06hw0m",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0s4jk",
            "EntityName": "Blue Island"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06hw0m": "John Franklin"
    },
    "qid_topic_entity": {
      "Q1647693": "John Franklin"
    },
    "NoisyQuestion": "where did jhon franklin live?"
  },
  {
    "QuestionId": "WebQTest-1661",
    "RawQuestion": "who was the voice of darth vader in the original star wars movie?",
    "ProcessedQuestion": "who was the voice of darth vader in the original star wars movie",
    "Parses": [
      {
        "ParseId": "WebQTest-1661.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.0dtfn .\n?y ns:film.performance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PotentialTopicEntityMention": "darth vader",
        "TopicEntityName": "Darth Vader",
        "TopicEntityMid": "m.0f2y0",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0dtfn",
            "EntityName": "Star Wars",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          },
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02nsjvf",
            "EntityName": "Voice",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.special_performance_type",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f6_x",
            "EntityName": "James Earl Jones"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0f2y0": "Darth Vader"
    },
    "qid_topic_entity": {
      "Q51752": "Darth Vader"
    },
    "NoisyQuestion": "who was the voice of darth vader in the original star wars movi?"
  },
  {
    "QuestionId": "WebQTest-1265",
    "RawQuestion": "what was john tyler?",
    "ProcessedQuestion": "what was john tyler",
    "Parses": [
      {
        "ParseId": "WebQTest-1265.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.042dk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.042dk ns:common.topic.notable_types ?x .\n}\n",
        "PotentialTopicEntityMention": "john tyler",
        "TopicEntityName": "John Tyler",
        "TopicEntityMid": "m.042dk",
        "InferentialChain": [
          "common.topic.notable_types"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01xljv7",
            "EntityName": "US President"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.042dk": "John Tyler"
    },
    "qid_topic_entity": {
      "Q11881": "John Tyler"
    },
    "NoisyQuestion": "what was jhon tyler?"
  },
  {
    "QuestionId": "WebQTest-1281",
    "RawQuestion": "where did kate gosselin grew up?",
    "ProcessedQuestion": "where did kate gosselin grew up",
    "Parses": [
      {
        "ParseId": "WebQTest-1281.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? grew up = birthplace"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qbc_9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qbc_9 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "kate gosselin",
        "TopicEntityName": "Kate Gosselin",
        "TopicEntityMid": "m.05qbc_9",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dclg",
            "EntityName": "Philadelphia"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05qbc_9": "Kate Gosselin"
    },
    "qid_topic_entity": {
      "Q2618072": "Kate Gosselin"
    },
    "NoisyQuestion": "where did kate gosselin grew up?"
  },
  {
    "QuestionId": "WebQTest-410",
    "RawQuestion": "what are the major cities in ukraine?",
    "ProcessedQuestion": "what are the major cities in ukraine",
    "Parses": [
      {
        "ParseId": "WebQTest-410.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07t21)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07t21 ns:location.country.capital ?x .\n}\n",
        "PotentialTopicEntityMention": "ukraine",
        "TopicEntityName": "Ukraine",
        "TopicEntityMid": "m.07t21",
        "InferentialChain": [
          "location.country.capital"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02sn34",
            "EntityName": "Kiev"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07t21": "Ukraine"
    },
    "qid_topic_entity": {
      "Q212": "Ukraine"
    },
    "NoisyQuestion": "what are the major cities in ukrane?"
  },
  {
    "QuestionId": "WebQTest-386",
    "RawQuestion": "how deep is lake merritt oakland?",
    "ProcessedQuestion": "how deep is lake merritt oakland",
    "Parses": [
      {
        "ParseId": "WebQTest-386.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_sf_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_sf_ ns:geography.body_of_water.depth ?x .\n}\n",
        "PotentialTopicEntityMention": "lake merritt",
        "TopicEntityName": "Lake Merritt",
        "TopicEntityMid": "m.02_sf_",
        "InferentialChain": [
          "geography.body_of_water.depth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "3.048",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02_sf_": "Lake Merritt"
    },
    "qid_topic_entity": {
      "Q3623431": "Lake Merritt"
    },
    "NoisyQuestion": "how deep is lake merritt oakland?"
  },
  {
    "QuestionId": "WebQTest-2018",
    "RawQuestion": "what did jack london do for a living?",
    "ProcessedQuestion": "what did jack london do for a living",
    "Parses": [
      {
        "ParseId": "WebQTest-2018.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bt23)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bt23 ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "jack london",
        "TopicEntityName": "Jack London",
        "TopicEntityMid": "m.0bt23",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016wtf",
            "EntityName": "Sailor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02xhgwq",
            "EntityName": "Novelist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d8qb",
            "EntityName": "Journalist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dxtg",
            "EntityName": "Screenwriter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f1hr",
            "EntityName": "Essayist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kyk",
            "EntityName": "Author"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0bt23": "Jack London"
    },
    "qid_topic_entity": {
      "Q45765": "Jack London"
    },
    "NoisyQuestion": "what did jakk londan do for a living?"
  },
  {
    "QuestionId": "WebQTest-1271",
    "RawQuestion": "when did carolina panthers go to superbowl?",
    "ProcessedQuestion": "when did carolina panthers go to superbowl",
    "Parses": [
      {
        "ParseId": "WebQTest-1271.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F Union. Original comment: F nested"
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ns:m.06x5s ns:time.recurring_event.instances ?x . # Super Bowl instances\n\n  {\n    ?x ns:sports.sports_championship_event.champion ns:m.01y3c . # (Carolina Panthers) \n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.01y3c . # (Carolina Panthers) \n  }\n}",
        "PotentialTopicEntityMention": "carolina panthers",
        "TopicEntityName": "Carolina Panthers",
        "TopicEntityMid": "m.01y3c",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0277y8",
            "EntityName": "Super Bowl XXXVIII"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01y3c": "Carolina Panthers"
    },
    "qid_topic_entity": {
      "Q330120": "Carolina Panthers"
    },
    "NoisyQuestion": "when did carolina panthers go to superbowl?"
  },
  {
    "QuestionId": "WebQTest-628",
    "RawQuestion": "what animal represents california?",
    "ProcessedQuestion": "what animal represents california",
    "Parses": [
      {
        "ParseId": "WebQTest-628.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n7q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n7q ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.0462793 .\n}\n",
        "PotentialTopicEntityMention": "california",
        "TopicEntityName": "California",
        "TopicEntityMid": "m.01n7q",
        "InferentialChain": [
          "government.governmental_jurisdiction.official_symbols",
          "location.location_symbol_relationship.symbol"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0462793",
            "EntityName": "State animal",
            "SourceNodeIndex": 0,
            "NodePredicate": "location.location_symbol_relationship.Kind_of_symbol",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.046279b",
            "EntityName": "California grizzly bear"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01n7q": "California"
    },
    "qid_topic_entity": {
      "Q99": "California"
    },
    "NoisyQuestion": "what animal represents californa?"
  },
  {
    "QuestionId": "WebQTest-1175",
    "RawQuestion": "what does lauren conrad major in?",
    "ProcessedQuestion": "what does lauren conrad major in",
    "Parses": [
      {
        "ParseId": "WebQTest-1175.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dq9wx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dq9wx ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n",
        "PotentialTopicEntityMention": "lauren conrad",
        "TopicEntityName": "Lauren Conrad",
        "TopicEntityMid": "m.0dq9wx",
        "InferentialChain": [
          "people.person.education",
          "education.education.major_field_of_study"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qqd4n",
            "EntityName": "Fashion design"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0dq9wx": "Lauren Conrad"
    },
    "qid_topic_entity": {
      "Q230169": "Lauren Conrad"
    },
    "NoisyQuestion": "what does lauren conrad major in?"
  },
  {
    "QuestionId": "WebQTest-1502",
    "RawQuestion": "what city and state is yale located in?",
    "ProcessedQuestion": "what city and state is yale located in",
    "Parses": [
      {
        "ParseId": "WebQTest-1502.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08815)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08815 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PotentialTopicEntityMention": "yale",
        "TopicEntityName": "University Yale",
        "TopicEntityMid": "m.08815",
        "InferentialChain": [
          "organization.organization.headquarters",
          "location.mailing_address.citytown"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f2nf",
            "EntityName": "New Haven"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.08815": "University Yale"
    },
    "qid_topic_entity": {
      "Q49112": "University Yale"
    },
    "NoisyQuestion": "what city and state is Yale located in?"
  },
  {
    "QuestionId": "WebQTest-2023",
    "RawQuestion": "where are the nato headquarters located?",
    "ProcessedQuestion": "where are the nato headquarters located",
    "Parses": [
      {
        "ParseId": "WebQTest-2023.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059dn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059dn ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PotentialTopicEntityMention": "nato",
        "TopicEntityName": "North Atlantic Treaty Organization (NATO)",
        "TopicEntityMid": "m.059dn",
        "InferentialChain": [
          "organization.organization.headquarters",
          "location.mailing_address.citytown"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0177z",
            "EntityName": "Brussels"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.059dn": "North Atlantic Treaty Organization (NATO)"
    },
    "qid_topic_entity": {
      "Q7184": "North Atlantic Treaty Organization (NATO)"
    },
    "NoisyQuestion": "where are the nato headquartes located?"
  },
  {
    "QuestionId": "WebQTest-1205",
    "RawQuestion": "who plays harley quinn?",
    "ProcessedQuestion": "who plays harley quinn",
    "Parses": [
      {
        "ParseId": "WebQTest-1205.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01t93k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01t93k ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "harley quinn",
        "TopicEntityName": "Harley Quinn",
        "TopicEntityMid": "m.01t93k",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.032m91",
            "EntityName": "Mia Sara"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07vqwg",
            "EntityName": "Hynden Walch"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08nvh9",
            "EntityName": "Arleen Sorkin"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01t93k": "Harley Quinn"
    },
    "qid_topic_entity": {
      "Q849477": "Harley Quinn"
    },
    "NoisyQuestion": "who plays harrley quinn?"
  },
  {
    "QuestionId": "WebQTest-365",
    "RawQuestion": "what is there to do in peoria illinois?",
    "ProcessedQuestion": "what is there to do in peoria illinois",
    "Parses": [
      {
        "ParseId": "WebQTest-365.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0sf9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0sf9_ ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PotentialTopicEntityMention": "peoria illinois",
        "TopicEntityName": "Peoria",
        "TopicEntityMid": "m.0sf9_",
        "InferentialChain": [
          "travel.travel_destination.tourist_attractions"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025vxh4",
            "EntityName": "Peoria Civic Center"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qlj1w",
            "EntityName": "John C. Flanagan House Museum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04mzskn",
            "EntityName": "Heart of Illinois Fair"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vxv8f",
            "EntityName": "WeaverRidge Golf Club"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05mxh89",
            "EntityName": "Lakeview Museum of Arts and Sciences"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zlj1p",
            "EntityName": "Par-A-Dice Hotel and Casino"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.067f5q",
            "EntityName": "Dozer Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08bsxj",
            "EntityName": "Wildlife Prairie State Park"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.093pd6",
            "EntityName": "George L. Luthy Memorial Botanical Garden"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cmd5ys",
            "EntityName": "Peoria Zoo"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0sf9_": "Peoria"
    },
    "qid_topic_entity": {
      "Q233129": "Peoria"
    },
    "NoisyQuestion": "what is there to do in peoria illinois?"
  },
  {
    "QuestionId": "WebQTest-432",
    "RawQuestion": "who did annie oakley married?",
    "ProcessedQuestion": "who did annie oakley married",
    "Parses": [
      {
        "ParseId": "WebQTest-432.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0237np)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0237np ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PotentialTopicEntityMention": "annie oakley",
        "TopicEntityName": "Annie Oakley",
        "TopicEntityMid": "m.0237np",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06zqpqq",
            "EntityName": "Frank E. Butler"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0237np": "Annie Oakley"
    },
    "qid_topic_entity": {
      "Q230935": "Annie Oakley"
    },
    "NoisyQuestion": "who did annie oakly married?"
  },
  {
    "QuestionId": "WebQTest-492",
    "RawQuestion": "where was st. lucy born?",
    "ProcessedQuestion": "where was st. lucy born",
    "Parses": [
      {
        "ParseId": "WebQTest-492.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r0zd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r0zd ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "st . lucy",
        "TopicEntityName": "Saint Lucy",
        "TopicEntityMid": "m.01r0zd",
        "InferentialChain": [
          "people.deceased_person.place_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.071bn",
            "EntityName": "Syracuse"
          }
        ]
      },
      {
        "ParseId": "WebQTest-492.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r0zd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r0zd ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "st . lucy",
        "TopicEntityName": "Saint Lucy",
        "TopicEntityMid": "m.01r0zd",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.071bn",
            "EntityName": "Syracuse"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01r0zd": "Saint Lucy"
    },
    "qid_topic_entity": {
      "Q183240": "Saint Lucy"
    },
    "NoisyQuestion": "where was St. Lucy born?"
  },
  {
    "QuestionId": "WebQTest-477",
    "RawQuestion": "which airport to fly into in buenos aires?",
    "ProcessedQuestion": "which airport to fly into in buenos aires",
    "Parses": [
      {
        "ParseId": "WebQTest-477.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ly5m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ly5m ns:location.location.nearby_airports ?x .\n}\n",
        "PotentialTopicEntityMention": "buenos aires",
        "TopicEntityName": "Buenos Aires",
        "TopicEntityMid": "m.01ly5m",
        "InferentialChain": [
          "location.location.nearby_airports"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_t37",
            "EntityName": "Aeroparque Jorge Newbery"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01ky3d",
            "EntityName": "Ministro Pistarini International Airport"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04fmtt8",
            "EntityName": "Don Torcuato Airport"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01ly5m": "Buenos Aires"
    },
    "qid_topic_entity": {
      "Q1486": "Buenos Aires"
    },
    "NoisyQuestion": "which airport to fly into in buenas aires?"
  },
  {
    "QuestionId": "WebQTest-1039",
    "RawQuestion": "where does sherrod brown live?",
    "ProcessedQuestion": "where does sherrod brown live",
    "Parses": [
      {
        "ParseId": "WebQTest-1039.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034s80)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034s80 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "sherrod brown",
        "TopicEntityName": "Sherrod Brown",
        "TopicEntityMid": "m.034s80",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.place_lived.end_date",
            "ValueType": "DateTime"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.place_lived.start_date",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0yzw7",
            "EntityName": "Avon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0z18v",
            "EntityName": "Mansfield"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.034s80": "Sherrod Brown"
    },
    "qid_topic_entity": {
      "Q381880": "Sherrod Brown"
    },
    "NoisyQuestion": "where does sherrod brown liv?"
  },
  {
    "QuestionId": "WebQTest-1195",
    "RawQuestion": "what time zone is in the bahamas?",
    "ProcessedQuestion": "what time zone is in the bahamas",
    "Parses": [
      {
        "ParseId": "WebQTest-1195.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0160w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0160w ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "bahamas",
        "TopicEntityName": "Bahamas",
        "TopicEntityMid": "m.0160w",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02_37z",
            "EntityName": "UTC−05:00"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hcv8",
            "EntityName": "Eastern Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0160w": "Bahamas"
    },
    "qid_topic_entity": {
      "Q778": "Bahamas"
    },
    "NoisyQuestion": "what time zone is in the bahaamas?"
  },
  {
    "QuestionId": "WebQTest-846",
    "RawQuestion": "what was dr seuss's real name?",
    "ProcessedQuestion": "what was dr seuss 's real name",
    "Parses": [
      {
        "ParseId": "WebQTest-846.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02g3w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02g3w ns:base.schemastaging.context_name.official_name ?x .\n}\n",
        "PotentialTopicEntityMention": "dr seuss",
        "TopicEntityName": "Theodore Lesieg",
        "TopicEntityMid": "m.02g3w",
        "InferentialChain": [
          "base.schemastaging.context_name.official_name"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "Theodor Seuss Geisel",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02g3w": "Theodore Lesieg"
    },
    "qid_topic_entity": {
      "Q298685": "Theodore Lesieg"
    },
    "NoisyQuestion": "what was dr seuss's real name?"
  },
  {
    "QuestionId": "WebQTest-1447",
    "RawQuestion": "who plays anakin skywalker in star wars 1?",
    "ProcessedQuestion": "who plays anakin skywalker in star wars 1",
    "Parses": [
      {
        "ParseId": "WebQTest-1447.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ddt_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ddt_ ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0f2y0 .\n}\n",
        "PotentialTopicEntityMention": "star wars 1",
        "TopicEntityName": "Star Wars Episode I: The Phantom Menace",
        "TopicEntityMid": "m.0ddt_",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0f2y0",
            "EntityName": "Darth Vader",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02p8dm",
            "EntityName": "Jake Lloyd"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1447.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.0ddt_ .\n}\n",
        "PotentialTopicEntityMention": "anakin skywalker",
        "TopicEntityName": "Darth Vader",
        "TopicEntityMid": "m.0f2y0",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0ddt_",
            "EntityName": "Star Wars Episode I: The Phantom Menace",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02p8dm",
            "EntityName": "Jake Lloyd"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0ddt_": "Star Wars Episode I: The Phantom Menace",
      "m.0f2y0": "Darth Vader"
    },
    "qid_topic_entity": {
      "Q165713": "Star Wars Episode I: The Phantom Menace",
      "Q51752": "Darth Vader"
    },
    "NoisyQuestion": "who plays anakin skywalker in star wars 1?"
  },
  {
    "QuestionId": "WebQTest-1727",
    "RawQuestion": "what countries speak french as a first language?",
    "ProcessedQuestion": "what countries speak french as a first language",
    "Parses": [
      {
        "ParseId": "WebQTest-1727.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.064_8sq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.064_8sq ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:m.064_8sq .\n}\n",
        "PotentialTopicEntityMention": "french",
        "TopicEntityName": "French",
        "TopicEntityMid": "m.064_8sq",
        "InferentialChain": [
          "language.human_language.countries_spoken_in"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.064_8sq",
            "EntityName": "French",
            "SourceNodeIndex": 0,
            "NodePredicate": "location.country.official_language",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0154j",
            "EntityName": "Belgium"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0164v",
            "EntityName": "Benin"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01699",
            "EntityName": "Burkina Faso"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0169t",
            "EntityName": "Burundi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01n6c",
            "EntityName": "Comoros"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nln",
            "EntityName": "Cameroon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01nyl",
            "EntityName": "Central African Republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01p1b",
            "EntityName": "Chad"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01rxw",
            "EntityName": "Congo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027jk",
            "EntityName": "Djibouti"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02kcz",
            "EntityName": "Equatorial Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_xj",
            "EntityName": "Jersey"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03548",
            "EntityName": "Gabon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03676",
            "EntityName": "Guinea"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gyl",
            "EntityName": "Haiti"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04g61",
            "EntityName": "Luxembourg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04sj3",
            "EntityName": "Madagascar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v09",
            "EntityName": "Mali"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vg8",
            "EntityName": "Martinique"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04w58",
            "EntityName": "Monaco"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05cc1",
            "EntityName": "Niger"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06dfg",
            "EntityName": "Rwanda"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06mzp",
            "EntityName": "Switzerland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06srk",
            "EntityName": "Senegal"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06sw9",
            "EntityName": "Seychelles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07z5n",
            "EntityName": "Vanuatu"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f8l9c",
            "EntityName": "France"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fv4v",
            "EntityName": "Ivory Coast"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.064_8sq": "French"
    },
    "qid_topic_entity": {
      "Q150": "French"
    },
    "NoisyQuestion": "what countries speak french as a first langauge?"
  },
  {
    "QuestionId": "WebQTest-1826",
    "RawQuestion": "what schools did anders celsius attend?",
    "ProcessedQuestion": "what schools did anders celsius attend",
    "Parses": [
      {
        "ParseId": "WebQTest-1826.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010nm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010nm ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "anders celsius",
        "TopicEntityName": "Anders Celsius",
        "TopicEntityMid": "m.010nm",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07tjf",
            "EntityName": "Uppsala University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.010nm": "Anders Celsius"
    },
    "qid_topic_entity": {
      "Q81130": "Anders Celsius"
    },
    "NoisyQuestion": "what schools did andrs celsius attend?"
  },
  {
    "QuestionId": "WebQTest-2002",
    "RawQuestion": "what are the names of michael jackson's kids?",
    "ProcessedQuestion": "what are the names of michael jackson 's kids",
    "Parses": [
      {
        "ParseId": "WebQTest-2002.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:people.person.children ?x .\n}\n",
        "PotentialTopicEntityMention": "michael jackson",
        "TopicEntityName": "Michael Jackson",
        "TopicEntityMid": "m.09889g",
        "InferentialChain": [
          "people.person.children"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0598rm4",
            "EntityName": "Paris-Michael Katherine Jackson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0598rmb",
            "EntityName": "Michael Joseph Jackson, Jr."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065qbyj",
            "EntityName": "Prince Michael Jackson II"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09889g": "Michael Jackson"
    },
    "qid_topic_entity": {
      "Q2831": "Michael Jackson"
    },
    "NoisyQuestion": "what are the names of Michael Jackson's kids?"
  },
  {
    "QuestionId": "WebQTest-986",
    "RawQuestion": "where did benjamin franklin work?",
    "ProcessedQuestion": "where did benjamin franklin work",
    "Parses": [
      {
        "ParseId": "WebQTest-986.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.company ?x .\n}\n",
        "PotentialTopicEntityMention": "benjamin franklin",
        "TopicEntityName": "Benjamin Franklin",
        "TopicEntityMid": "m.019fz",
        "InferentialChain": [
          "people.person.employment_history",
          "business.employment_tenure.company"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.040vjzl",
            "EntityName": "James Franklin Printing Shop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dcms",
            "EntityName": "United States Postal Service"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dw1k2",
            "EntityName": "Josiah Franklin"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.019fz": "Benjamin Franklin"
    },
    "qid_topic_entity": {
      "Q34969": "Benjamin Franklin"
    },
    "NoisyQuestion": "where did benjaimn franklin work?"
  },
  {
    "QuestionId": "WebQTest-1356",
    "RawQuestion": "what drug killed marilyn monroe?",
    "ProcessedQuestion": "what drug killed marilyn monroe",
    "Parses": [
      {
        "ParseId": "WebQTest-1356.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04wqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04wqr ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "marilyn monroe",
        "TopicEntityName": "Marilyn Monroe",
        "TopicEntityMid": "m.04wqr",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bwj2gf",
            "EntityName": "Barbiturate overdose"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04wqr": "Marilyn Monroe"
    },
    "qid_topic_entity": {
      "Q4616": "Marilyn Monroe"
    },
    "NoisyQuestion": "what drug killed marilyn monroe?"
  },
  {
    "QuestionId": "WebQTest-1477",
    "RawQuestion": "what episode of how i met your mother is carrie underwood on?",
    "ProcessedQuestion": "what episode of how i met your mother is carrie underwood on",
    "Parses": [
      {
        "ParseId": "WebQTest-1477.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.058s57)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.058s57 ns:tv.tv_actor.guest_roles ?y .\n?y ns:tv.tv_guest_role.episodes_appeared_in ?x .\n?x ns:tv.tv_series_episode.series ns:m.07zhjj .\n}\n",
        "PotentialTopicEntityMention": "carrie underwood",
        "TopicEntityName": "Carrie Underwood",
        "TopicEntityMid": "m.058s57",
        "InferentialChain": [
          "tv.tv_actor.guest_roles",
          "tv.tv_guest_role.episodes_appeared_in"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.07zhjj",
            "EntityName": "How I Met Your Mother",
            "SourceNodeIndex": 1,
            "NodePredicate": "tv.tv_series_episode.series",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bbt_3x",
            "EntityName": "Hooked"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.058s57": "Carrie Underwood"
    },
    "qid_topic_entity": {
      "Q215546": "Carrie Underwood"
    },
    "NoisyQuestion": "what episode of how i met your mother is carrie underwrd on?"
  },
  {
    "QuestionId": "WebQTest-1387",
    "RawQuestion": "what time zone is toronto gmt?",
    "ProcessedQuestion": "what time zone is toronto gmt",
    "Parses": [
      {
        "ParseId": "WebQTest-1387.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "??"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7h6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7h6 ns:location.location.time_zones ?x .\n}\n",
        "PotentialTopicEntityMention": "toronto",
        "TopicEntityName": "Toronto",
        "TopicEntityMid": "m.0h7h6",
        "InferentialChain": [
          "location.location.time_zones"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02hcv8",
            "EntityName": "Eastern Time Zone"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0h7h6": "Toronto"
    },
    "qid_topic_entity": {
      "Q172": "Toronto"
    },
    "NoisyQuestion": "what time zone is torontu gmt?"
  },
  {
    "QuestionId": "WebQTest-245",
    "RawQuestion": "what year was the first miss america pageant held?",
    "ProcessedQuestion": "what year was the first miss america pageant held",
    "Parses": [
      {
        "ParseId": "WebQTest-245.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bk3n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bk3n ns:time.recurring_event.date_of_first_occurance ?x .\n}\n",
        "PotentialTopicEntityMention": "miss america pageant",
        "TopicEntityName": "Miss America",
        "TopicEntityMid": "m.01bk3n",
        "InferentialChain": [
          "time.recurring_event.date_of_first_occurance"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "1921-09",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01bk3n": "Miss America"
    },
    "qid_topic_entity": {
      "Q859497": "Miss America"
    },
    "NoisyQuestion": "what year was the first miss america pageant held?"
  },
  {
    "QuestionId": "WebQTest-614",
    "RawQuestion": "when did the battle of alamo start?",
    "ProcessedQuestion": "when did the battle of alamo start",
    "Parses": [
      {
        "ParseId": "WebQTest-614.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hztm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hztm ns:time.event.start_date ?x .\n}\n",
        "PotentialTopicEntityMention": "battle of alamo",
        "TopicEntityName": "Battle of the Alamo",
        "TopicEntityMid": "m.02hztm",
        "InferentialChain": [
          "time.event.start_date"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "1836-02-23",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02hztm": "Battle of the Alamo"
    },
    "qid_topic_entity": {
      "Q235344": "Battle of the Alamo"
    },
    "NoisyQuestion": "when did the battle of alamO start?"
  },
  {
    "QuestionId": "WebQTest-1604",
    "RawQuestion": "what countries speak english natively?",
    "ProcessedQuestion": "what countries speak english natively",
    "Parses": [
      {
        "ParseId": "WebQTest-1604.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? native language"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.main_country ?x .\n}\n",
        "PotentialTopicEntityMention": "english",
        "TopicEntityName": "English Language",
        "TopicEntityMid": "m.02h40lc",
        "InferentialChain": [
          "language.human_language.main_country"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.014tss",
            "EntityName": "Kingdom of Great Britain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rt9",
            "EntityName": "Republic of Ireland"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07ssc",
            "EntityName": "United Kingdom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0chghy",
            "EntityName": "Australia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ctw_b",
            "EntityName": "New Zealand"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02h40lc": "English Language"
    },
    "qid_topic_entity": {
      "Q1860": "English Language"
    },
    "NoisyQuestion": "what countries speak englisn natively?"
  },
  {
    "QuestionId": "WebQTest-1685",
    "RawQuestion": "where did benjamin franklin went to school?",
    "ProcessedQuestion": "where did benjamin franklin went to school",
    "Parses": [
      {
        "ParseId": "WebQTest-1685.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PotentialTopicEntityMention": "benjamin franklin",
        "TopicEntityName": "Benjamin Franklin",
        "TopicEntityMid": "m.019fz",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02kj7g",
            "EntityName": "Boston Latin School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.019fz": "Benjamin Franklin"
    },
    "qid_topic_entity": {
      "Q34969": "Benjamin Franklin"
    },
    "NoisyQuestion": "where did benjamin franklin wnt to school?"
  },
  {
    "QuestionId": "WebQTest-1030",
    "RawQuestion": "what are italians classified as?",
    "ProcessedQuestion": "what are italians classified as",
    "Parses": [
      {
        "ParseId": "WebQTest-1030.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0222qb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0222qb ns:people.ethnicity.included_in_group ?x .\n}\n",
        "PotentialTopicEntityMention": "italians",
        "TopicEntityName": "Italian people",
        "TopicEntityMid": "m.0222qb",
        "InferentialChain": [
          "people.ethnicity.included_in_group"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03rkmh",
            "EntityName": "Latin European peoples"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.043_yvy",
            "EntityName": "Europeans"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0222qb": "Italian people"
    },
    "qid_topic_entity": {
      "Q50001": "Italian people"
    },
    "NoisyQuestion": "what are italians classifed as?"
  },
  {
    "QuestionId": "WebQTest-1308",
    "RawQuestion": "what college did jrr tolkien go to?",
    "ProcessedQuestion": "what college did jrr tolkien go to",
    "Parses": [
      {
        "ParseId": "WebQTest-1308.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.041h0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.041h0 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "jrr tolkien",
        "TopicEntityName": "J. R. R. Tolkien",
        "TopicEntityMid": "m.041h0",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07tgn",
            "EntityName": "University of Oxford"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ylvj",
            "EntityName": "Exeter College, Oxford"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.041h0": "J. R. R. Tolkien"
    },
    "qid_topic_entity": {
      "Q892": "J. R. R. Tolkien"
    },
    "NoisyQuestion": "what college did jrr tolkien go to?"
  },
  {
    "QuestionId": "WebQTest-1145",
    "RawQuestion": "where did romney graduated college?",
    "ProcessedQuestion": "where did romney graduated college",
    "Parses": [
      {
        "ParseId": "WebQTest-1145.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:m.014mlp .\n}\n",
        "PotentialTopicEntityMention": "romney",
        "TopicEntityName": "Mitt Romney",
        "TopicEntityMid": "m.0271_s",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.014mlp",
            "EntityName": "Bachelor of Arts",
            "SourceNodeIndex": 0,
            "NodePredicate": "education.education.degree",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0l2tk",
            "EntityName": "Brigham Young University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0271_s": "Mitt Romney"
    },
    "qid_topic_entity": {
      "Q4496": "Mitt Romney"
    },
    "NoisyQuestion": "where did romney graduated colleg?"
  },
  {
    "QuestionId": "WebQTest-278",
    "RawQuestion": "who's dating claire danes?",
    "ProcessedQuestion": "who 's dating claire danes",
    "Parses": [
      {
        "ParseId": "WebQTest-278.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01gq0b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01gq0b ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n?y ns:celebrities.romantic_relationship.relationship_type ns:m.02_7k44 .\nFILTER(NOT EXISTS {?y ns:celebrities.romantic_relationship.start_date ?sk0} || \nEXISTS {?y ns:celebrities.romantic_relationship.start_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:celebrities.romantic_relationship.end_date ?sk2} || \nEXISTS {?y ns:celebrities.romantic_relationship.end_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "claire danes",
        "TopicEntityName": "Claire Danes",
        "TopicEntityMid": "m.01gq0b",
        "InferentialChain": [
          "celebrities.celebrity.sexual_relationships",
          "celebrities.romantic_relationship.celebrity"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02_7k44",
            "EntityName": "Dated",
            "SourceNodeIndex": 0,
            "NodePredicate": "celebrities.romantic_relationship.relationship_type",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "celebrities.romantic_relationship.start_date",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "celebrities.romantic_relationship.end_date",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02tc5y",
            "EntityName": "Hugh Dancy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01gq0b": "Claire Danes"
    },
    "qid_topic_entity": {
      "Q867813": "Claire Danes"
    },
    "NoisyQuestion": "who's dating claire danes?"
  },
  {
    "QuestionId": "WebQTest-1446",
    "RawQuestion": "what year did jimmy the rev sullivan die?",
    "ProcessedQuestion": "what year did jimmy the rev sullivan die",
    "Parses": [
      {
        "ParseId": "WebQTest-1446.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025sf_8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025sf_8 ns:people.deceased_person.date_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "jimmy the rev sullivan",
        "TopicEntityName": "The Rev",
        "TopicEntityMid": "m.025sf_8",
        "InferentialChain": [
          "people.deceased_person.date_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "2009-12-28",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.025sf_8": "The Rev"
    },
    "qid_topic_entity": {
      "Q1057003": "The Rev"
    },
    "NoisyQuestion": "what year did jimmmy the rev sullivan die?"
  },
  {
    "QuestionId": "WebQTest-521",
    "RawQuestion": "who was anakin skywalker?",
    "ProcessedQuestion": "who was anakin skywalker",
    "Parses": [
      {
        "ParseId": "WebQTest-521.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.125_cxx77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.125_cxx77 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "anakin skywalker",
        "TopicEntityName": "Anakin Skywalker",
        "TopicEntityMid": "g.125_cxx77",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jzmgh",
            "EntityName": "Ted Bracewell"
          }
        ]
      }
    ],
    "topic_entity": {
      "g.125_cxx77": "Anakin Skywalker"
    },
    "qid_topic_entity": {
      "UnknownQID": "Anakin Skywalker"
    },
    "NoisyQuestion": "who was anakin skywaker?"
  },
  {
    "QuestionId": "WebQTest-588",
    "RawQuestion": "what wars did robert e lee served in?",
    "ProcessedQuestion": "what wars did robert e lee served in",
    "Parses": [
      {
        "ParseId": "WebQTest-588.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06f5j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06f5j ns:military.military_commander.military_commands ?y .\n?y ns:military.military_command.military_conflict ?x .\n}\n",
        "PotentialTopicEntityMention": "robert e lee",
        "TopicEntityName": "Robert E. Lee",
        "TopicEntityMid": "m.06f5j",
        "InferentialChain": [
          "military.military_commander.military_commands",
          "military.military_command.military_conflict"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012lb3ht",
            "EntityName": "Battle of Malvern Hill"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01jnm",
            "EntityName": "Battle of Gettysburg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01mwc1",
            "EntityName": "Battle of Fort Stedman"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027r0yc",
            "EntityName": "Battle of Darbytown and New Market Roads"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02n29c",
            "EntityName": "Battle of South Mountain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03xzs_",
            "EntityName": "Seven Days Battles"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047g1bq",
            "EntityName": "Battle of Franklin's Crossing"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jnfr",
            "EntityName": "Second Battle of Rappahannock Station"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04lf234",
            "EntityName": "Battle of Frederick"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04q33ft",
            "EntityName": "John Brown's raid on Harpers Ferry"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vqf8",
            "EntityName": "Battle of Oak Grove"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vqhq",
            "EntityName": "Battle of Beaver Dam Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vqpt",
            "EntityName": "Battle of Gaines's Mill"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vqyp",
            "EntityName": "Battle of Glendale"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04vt26",
            "EntityName": "Battle of Cheat Mountain"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04wbkc",
            "EntityName": "Battle of Williamsport"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04xsb_",
            "EntityName": "Overland Campaign"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0541vp",
            "EntityName": "Battle of Chaffin's Farm"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.054pn2",
            "EntityName": "Battle of Appomattox Court House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05740w",
            "EntityName": "Gettysburg Campaign"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05jzx8",
            "EntityName": "Second Battle of Petersburg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05k0fs",
            "EntityName": "Third Battle of Petersburg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05k4d6",
            "EntityName": "Battle of White Oak Road"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05kxs5",
            "EntityName": "Battle of Mine Run"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05lhjt",
            "EntityName": "Battle of Totopotomoy Creek"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05lv52",
            "EntityName": "Northern Virginia Campaign"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05lxjz",
            "EntityName": "Maryland Campaign"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zhyqj",
            "EntityName": "Stoneman's 1863 Raid"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.097_v4",
            "EntityName": "Siege of Fort Pulaski"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09q9fk",
            "EntityName": "Battle of Cumberland Church"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c00cv3",
            "EntityName": "Richmond in the American Civil War"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c16t",
            "EntityName": "Mexican–American War"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0mw",
            "EntityName": "Battle of Chancellorsville"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0y7",
            "EntityName": "Battle of Fredericksburg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0yp",
            "EntityName": "Battle of the Wilderness"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d20b",
            "EntityName": "Battle of Spotsylvania Court House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d220",
            "EntityName": "Battle of Cold Harbor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dgkk",
            "EntityName": "Battle of the Crater"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f777",
            "EntityName": "Second Battle of Bull Run"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fgkhp",
            "EntityName": "Second Battle of Deep Bottom"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h1hwvh",
            "EntityName": "Western Virginia Campaign"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kbcg",
            "EntityName": "Siege of Petersburg"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kbq",
            "EntityName": "American Civil War"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0lkxb",
            "EntityName": "Battle of Antietam"
          }
        ]
      },
      {
        "ParseId": "WebQTest-588.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06f5j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06f5j ns:military.military_person.participated_in_conflicts ?x .\n}\n",
        "PotentialTopicEntityMention": "robert e lee",
        "TopicEntityName": "Robert E. Lee",
        "TopicEntityMid": "m.06f5j",
        "InferentialChain": [
          "military.military_person.participated_in_conflicts"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c16t",
            "EntityName": "Mexican–American War"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d0mw",
            "EntityName": "Battle of Chancellorsville"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kbq",
            "EntityName": "American Civil War"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06f5j": "Robert E. Lee"
    },
    "qid_topic_entity": {
      "Q165557": "Robert E. Lee"
    },
    "NoisyQuestion": "what wars did robert e leee served in?"
  },
  {
    "QuestionId": "WebQTest-605",
    "RawQuestion": "what degrees did obama get in college?",
    "ProcessedQuestion": "what degrees did obama get in college",
    "Parses": [
      {
        "ParseId": "WebQTest-605.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n",
        "PotentialTopicEntityMention": "obama",
        "TopicEntityName": "Barack Obama",
        "TopicEntityMid": "m.02mjmr",
        "InferentialChain": [
          "people.person.education",
          "education.education.degree"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.013zdg",
            "EntityName": "Juris Doctor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.014mlp",
            "EntityName": "Bachelor of Arts"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02mjmr": "Barack Obama"
    },
    "qid_topic_entity": {
      "Q76": "Barack Obama"
    },
    "NoisyQuestion": "what degrees did obama get in colleg?"
  },
  {
    "QuestionId": "WebQTest-1028",
    "RawQuestion": "who plays john connor?",
    "ProcessedQuestion": "who plays john connor",
    "Parses": [
      {
        "ParseId": "WebQTest-1028.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06nsv4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06nsv4 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "john connor",
        "TopicEntityName": "John Connor",
        "TopicEntityMid": "m.06nsv4",
        "InferentialChain": [
          "film.film_character.portrayed_in_films",
          "film.performance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01wy5m",
            "EntityName": "Christian Bale"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02mylf",
            "EntityName": "Edward Furlong"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03nnb_y",
            "EntityName": "Michael Edwards"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059s7d",
            "EntityName": "Nick Stahl"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dc87cw",
            "EntityName": "Dalton Abbott"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06nsv4": "John Connor"
    },
    "qid_topic_entity": {
      "Q376577": "John Connor"
    },
    "NoisyQuestion": "who plays jhon connor?"
  },
  {
    "QuestionId": "WebQTest-36",
    "RawQuestion": "what highschool did harper lee go to?",
    "ProcessedQuestion": "what highschool did harper lee go to",
    "Parses": [
      {
        "ParseId": "WebQTest-36.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq7x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq7x ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:education.educational_institution.school_type ns:m.0bpgx .\n}\n",
        "PotentialTopicEntityMention": "harper lee",
        "TopicEntityName": "Harper Lee",
        "TopicEntityMid": "m.01bq7x",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0bpgx",
            "EntityName": "High school",
            "SourceNodeIndex": 1,
            "NodePredicate": "education.educational_institution.school_type",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crdc8g",
            "EntityName": "Monroe County High School"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01bq7x": "Harper Lee"
    },
    "qid_topic_entity": {
      "Q182658": "Harper Lee"
    },
    "NoisyQuestion": "what highschool did harper lea go to?"
  },
  {
    "QuestionId": "WebQTest-1750",
    "RawQuestion": "what city does paul ryan live in?",
    "ProcessedQuestion": "what city does paul ryan live in",
    "Parses": [
      {
        "ParseId": "WebQTest-1750.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.024v2j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.024v2j ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "paul ryan",
        "TopicEntityName": "Paul Ryan",
        "TopicEntityMid": "m.024v2j",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.place_lived.end_date",
            "ValueType": "DateTime"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.place_lived.start_date",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01mm_c",
            "EntityName": "Janesville"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.024v2j": "Paul Ryan"
    },
    "qid_topic_entity": {
      "Q203966": "Paul Ryan"
    },
    "NoisyQuestion": "what city does pual ryan live in?"
  },
  {
    "QuestionId": "WebQTest-1457",
    "RawQuestion": "what kind of currency does mexico use?",
    "ProcessedQuestion": "what kind of currency does mexico use",
    "Parses": [
      {
        "ParseId": "WebQTest-1457.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "mexico",
        "TopicEntityName": "Mexico",
        "TopicEntityMid": "m.0b90_r",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012ts8",
            "EntityName": "Mexican peso"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0b90_r": "Mexico"
    },
    "qid_topic_entity": {
      "Q96": "Mexico"
    },
    "NoisyQuestion": "what kind of currency does mexco use?"
  },
  {
    "QuestionId": "WebQTest-271",
    "RawQuestion": "where did mitt romney's parents come from?",
    "ProcessedQuestion": "where did mitt romney 's parents come from",
    "Parses": [
      {
        "ParseId": "WebQTest-271.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "mitt romney",
        "TopicEntityName": "Mitt Romney",
        "TopicEntityMid": "m.0271_s",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02dtg",
            "EntityName": "Detroit"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0271_s": "Mitt Romney"
    },
    "qid_topic_entity": {
      "Q4496": "Mitt Romney"
    },
    "NoisyQuestion": "where did mitt romney's parent come from?"
  },
  {
    "QuestionId": "WebQTest-112",
    "RawQuestion": "what was robert burns?",
    "ProcessedQuestion": "what was robert burns",
    "Parses": [
      {
        "ParseId": "WebQTest-112.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09482)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09482 ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "robert burns",
        "TopicEntityName": "Robert Burns",
        "TopicEntityMid": "m.09482",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05z96",
            "EntityName": "Poet"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0knj1",
            "EntityName": "Bard"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kyk",
            "EntityName": "Author"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09482": "Robert Burns"
    },
    "qid_topic_entity": {
      "Q81960": "Robert Burns"
    },
    "NoisyQuestion": "what was robert burnz?"
  },
  {
    "QuestionId": "WebQTest-751",
    "RawQuestion": "who owns google 2012?",
    "ProcessedQuestion": "who owns google 2012",
    "Parses": [
      {
        "ParseId": "WebQTest-751.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "? somewhat ambiguous how to define own."
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045c7b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045c7b ns:organization.organization.leadership ?y .\n?y ns:organization.leadership.person ?x .\nFILTER(NOT EXISTS {?y ns:organization.leadership.from ?sk0} || \nEXISTS {?y ns:organization.leadership.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2012-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:organization.leadership.to ?sk2} || \nEXISTS {?y ns:organization.leadership.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2012-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "google",
        "TopicEntityName": "Google",
        "TopicEntityMid": "m.045c7b",
        "InferentialChain": [
          "organization.organization.leadership",
          "organization.leadership.person"
        ],
        "Constraints": [
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2012-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "organization.leadership.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2012-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "organization.leadership.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2012-01-01",
          "End": "2012-12-31",
          "AssociatedConstraints": [
            0,
            1
          ],
          "PotentialTimeMention": "2012"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025v9nm",
            "EntityName": "Vic Gundotra"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04q1q10",
            "EntityName": "Patrick Pichette"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05687l1",
            "EntityName": "Nikesh Arora"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09v3lbs",
            "EntityName": "David Drummond"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gjpq",
            "EntityName": "Larry Page"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.045c7b": "Google"
    },
    "qid_topic_entity": {
      "Q95": "Google"
    },
    "NoisyQuestion": "who owns google 2012?"
  },
  {
    "QuestionId": "WebQTest-88",
    "RawQuestion": "who is willow smith mom name?",
    "ProcessedQuestion": "who is willow smith mom name",
    "Parses": [
      {
        "ParseId": "WebQTest-88.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gq433)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gq433 ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.02zsn .\n}\n",
        "PotentialTopicEntityMention": "willow smith",
        "TopicEntityName": "Willow Smith",
        "TopicEntityMid": "m.03gq433",
        "InferentialChain": [
          "people.person.parents"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.02zsn",
            "EntityName": "Female",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.person.gender",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01j7z7",
            "EntityName": "Jada Pinkett Smith"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03gq433": "Willow Smith"
    },
    "qid_topic_entity": {
      "Q298209": "Willow Smith"
    },
    "NoisyQuestion": "who is willow smith momb name?"
  },
  {
    "QuestionId": "WebQTest-939",
    "RawQuestion": "what type of art did pablo picasso paint?",
    "ProcessedQuestion": "what type of art did pablo picasso paint",
    "Parses": [
      {
        "ParseId": "WebQTest-939.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.060_7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.060_7 ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PotentialTopicEntityMention": "pablo picasso",
        "TopicEntityName": "Pablo Picasso",
        "TopicEntityMid": "m.060_7",
        "InferentialChain": [
          "visual_art.visual_artist.associated_periods_or_movements"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015r61",
            "EntityName": "Modern art"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.070vcg",
            "EntityName": "Analytic cubism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.071bmq",
            "EntityName": "Picasso's Rose Period"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.072333",
            "EntityName": "Picasso's Blue Period"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.073_6",
            "EntityName": "Surrealism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07hm5p",
            "EntityName": "Picasso's African Period"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07pcpz",
            "EntityName": "Synthetic cubism"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09ff3",
            "EntityName": "Cubism"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.060_7": "Pablo Picasso"
    },
    "qid_topic_entity": {
      "Q5593": "Pablo Picasso"
    },
    "NoisyQuestion": "what type of art did pablo picasso pain?"
  },
  {
    "QuestionId": "WebQTest-1017",
    "RawQuestion": "who plays charlie in the santa clause movies?",
    "ProcessedQuestion": "who plays charlie in the santa clause movies",
    "Parses": [
      {
        "ParseId": "WebQTest-1017.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0129g2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0129g2 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0dlsybb .\n}\n",
        "PotentialTopicEntityMention": "the santa clause",
        "TopicEntityName": "The Santa Clause",
        "TopicEntityMid": "m.0129g2",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0dlsybb",
            "EntityName": "Charlie Calvin",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d7whx",
            "EntityName": "Eric Lloyd"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0129g2": "The Santa Clause"
    },
    "qid_topic_entity": {
      "Q497850": "The Santa Clause"
    },
    "NoisyQuestion": "who plays charlie in the santa clause movies?"
  },
  {
    "QuestionId": "WebQTest-1971",
    "RawQuestion": "what movies gerard butler has been in?",
    "ProcessedQuestion": "what movies gerard butler has been in",
    "Parses": [
      {
        "ParseId": "WebQTest-1971.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.038rzr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.038rzr ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "gerard butler",
        "TopicEntityName": "Gerard Butler",
        "TopicEntityMid": "m.038rzr",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010vzxsl",
            "EntityName": "London Has Fallen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01242_",
            "EntityName": "Mrs Brown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0124x_l1",
            "EntityName": "Geostorm"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015yl2",
            "EntityName": "Reign of Fire"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01sxdy",
            "EntityName": "The Phantom of the Opera"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01v1ln",
            "EntityName": "Tomorrow Never Dies"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0292qb",
            "EntityName": "Lara Croft Tomb Raider: The Cradle of Life"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02p1fl7",
            "EntityName": "Shooters"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02pjkz7",
            "EntityName": "Gamer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qk3fk",
            "EntityName": "P.S. I Love You"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02r3rry",
            "EntityName": "Wrath of Gods"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02vvwqg",
            "EntityName": "RocknRolla"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03c6w7q",
            "EntityName": "Harrison's Flowers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03g_sj5",
            "EntityName": "Nim's Island"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047qxs",
            "EntityName": "Timeline"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047rkcm",
            "EntityName": "The Ugly Truth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04f10b5",
            "EntityName": "One More Kiss"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04f52jw",
            "EntityName": "How to Train Your Dragon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04j04w7",
            "EntityName": "Fast Food"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jdgq",
            "EntityName": "Dracula 2000"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yb52q",
            "EntityName": "Jewel of the Sahara"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05dj6d",
            "EntityName": "Dear Frankie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05h4_qt",
            "EntityName": "Law Abiding Citizen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05lm43",
            "EntityName": "The Game of Their Lives"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05p2gz3",
            "EntityName": "Tales of the Black Freighter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06w9zfg",
            "EntityName": "The Bounty Hunter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07f_t4",
            "EntityName": "300"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09210y",
            "EntityName": "Beowulf & Grendel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bh8x1y",
            "EntityName": "Coriolanus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bwhkkw",
            "EntityName": "Machine Gun Preacher"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1p6zg",
            "EntityName": "Trailer for a Remake of Gore Vidal's Caligula"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c1z3g",
            "EntityName": "Butterfly on a Wheel"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crvp0c",
            "EntityName": "How to Train Your Dragon: Legend of the Boneknapper Dragon"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crz6lg",
            "EntityName": "The Cherry Orchard"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dlk_qn",
            "EntityName": "Movie 43"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f0w6n",
            "EntityName": "Attila"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gmglbv",
            "EntityName": "Playing for Keeps"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gwp_k3",
            "EntityName": "How to Train Your Dragon 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hhggp1",
            "EntityName": "Chasing Mavericks"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hnd78z",
            "EntityName": "How to Train Your Dragon: Gift of the Night Fury"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hz7mx7",
            "EntityName": "Thunder Run"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0m_cnk_",
            "EntityName": "How to Train Your Dragon 3"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0n43ym4",
            "EntityName": "Olympus Has Fallen"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0v3yjg1",
            "EntityName": "Justin and the Knights of Valour"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0w0l3pk",
            "EntityName": "Gods of Egypt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0w17vsj",
            "EntityName": "Dynamo"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.038rzr": "Gerard Butler"
    },
    "qid_topic_entity": {
      "Q169982": "Gerard Butler"
    },
    "NoisyQuestion": "what movies gerard butler has been in?"
  },
  {
    "QuestionId": "WebQTest-695",
    "RawQuestion": "what role did paul mccartney play in the beatles?",
    "ProcessedQuestion": "what role did paul mccartney play in the beatles",
    "Parses": [
      {
        "ParseId": "WebQTest-695.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03j24kf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03j24kf ns:music.group_member.membership ?y .\n?y ns:music.group_membership.role ?x .\n?y ns:music.group_membership.group ns:m.07c0j .\n}\n",
        "PotentialTopicEntityMention": "paul mccartney",
        "TopicEntityName": "Paul McCartney",
        "TopicEntityMid": "m.03j24kf",
        "InferentialChain": [
          "music.group_member.membership",
          "music.group_membership.role"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.07c0j",
            "EntityName": "The Beatles",
            "SourceNodeIndex": 0,
            "NodePredicate": "music.group_membership.group",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_sv_90",
            "EntityName": "Lead Vocals"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01vj9c",
            "EntityName": "Bass"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03_vpw",
            "EntityName": "Backing vocalist"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03j24kf": "Paul McCartney"
    },
    "qid_topic_entity": {
      "Q2599": "Paul McCartney"
    },
    "NoisyQuestion": "what role did pual mccartney play in the beatles?"
  },
  {
    "QuestionId": "WebQTest-1760",
    "RawQuestion": "who plays ziva david on ncis?",
    "ProcessedQuestion": "who plays ziva david on ncis",
    "Parses": [
      {
        "ParseId": "WebQTest-1760.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.093xn8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.093xn8 ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.03m8sg .\n}\n",
        "PotentialTopicEntityMention": "ziva david",
        "TopicEntityName": "Mossad Agent Ziva David",
        "TopicEntityMid": "m.093xn8",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.03m8sg",
            "EntityName": "NCIS",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.series",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cpd76",
            "EntityName": "Cote de Pablo"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.093xn8": "Mossad Agent Ziva David"
    },
    "qid_topic_entity": {
      "Q839093": "Mossad Agent Ziva David"
    },
    "NoisyQuestion": "who plays ziva david on ncis?"
  },
  {
    "QuestionId": "WebQTest-1968",
    "RawQuestion": "what was the cause of death for laci peterson?",
    "ProcessedQuestion": "what was the cause of death for laci peterson",
    "Parses": [
      {
        "ParseId": "WebQTest-1968.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f6vb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f6vb ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "laci peterson",
        "TopicEntityName": "Laci Peterson",
        "TopicEntityMid": "m.01f6vb",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051_y",
            "EntityName": "Murder"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01f6vb": "Laci Peterson"
    },
    "qid_topic_entity": {
      "UnknownQID": "Laci Peterson"
    },
    "NoisyQuestion": "what was the cause of death for laci petersen?"
  },
  {
    "QuestionId": "WebQTest-876",
    "RawQuestion": "who does japan import from?",
    "ProcessedQuestion": "who does japan import from",
    "Parses": [
      {
        "ParseId": "WebQTest-876.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.statistical_region.places_imported_from ?y .\n?y ns:location.imports_and_exports.imported_from ?x .\n}\n",
        "PotentialTopicEntityMention": "japan",
        "TopicEntityName": "Japan",
        "TopicEntityMid": "m.03_3d",
        "InferentialChain": [
          "location.statistical_region.places_imported_from",
          "location.imports_and_exports.imported_from"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.047t_",
            "EntityName": "Kiribati"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06tw8",
            "EntityName": "Sudan"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07dzf",
            "EntityName": "Tanzania"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09c7w0",
            "EntityName": "United States of America"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ctw_b",
            "EntityName": "New Zealand"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d060g",
            "EntityName": "Canada"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03_3d": "Japan"
    },
    "qid_topic_entity": {
      "Q17": "Japan"
    },
    "NoisyQuestion": "who does jpan import from?"
  },
  {
    "QuestionId": "WebQTest-1233",
    "RawQuestion": "what are the colors of the ny giants?",
    "ProcessedQuestion": "what are the colors of the ny giants",
    "Parses": [
      {
        "ParseId": "WebQTest-1233.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05gg4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05gg4 ns:sports.sports_team.colors ?x .\n}\n",
        "PotentialTopicEntityMention": "ny giants",
        "TopicEntityName": "New York Giants",
        "TopicEntityMid": "m.05gg4",
        "InferentialChain": [
          "sports.sports_team.colors"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01g5v",
            "EntityName": "Blue"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.036k5h",
            "EntityName": "Grey"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06fvc",
            "EntityName": "Red"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.083jv",
            "EntityName": "White"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05gg4": "New York Giants"
    },
    "qid_topic_entity": {
      "Q190618": "New York Giants"
    },
    "NoisyQuestion": "what are the colors of the ny jiants?"
  },
  {
    "QuestionId": "WebQTest-74",
    "RawQuestion": "who did benjamin franklin get married to?",
    "ProcessedQuestion": "who did benjamin franklin get married to",
    "Parses": [
      {
        "ParseId": "WebQTest-74.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.01bl8s .\n}\n",
        "PotentialTopicEntityMention": "benjamin franklin",
        "TopicEntityName": "Benjamin Franklin",
        "TopicEntityMid": "m.019fz",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01bl8s",
            "EntityName": "Common-law marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0b15_0",
            "EntityName": "Deborah Read"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.019fz": "Benjamin Franklin"
    },
    "qid_topic_entity": {
      "Q34969": "Benjamin Franklin"
    },
    "NoisyQuestion": "who did benjamin franksin get married to?"
  },
  {
    "QuestionId": "WebQTest-962",
    "RawQuestion": "what county is san diego ca?",
    "ProcessedQuestion": "what county is san diego ca",
    "Parses": [
      {
        "ParseId": "WebQTest-962.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.071vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.071vr ns:location.hud_county_place.county ?x .\n}\n",
        "PotentialTopicEntityMention": "san diego ca",
        "TopicEntityName": "San Diego",
        "TopicEntityMid": "m.071vr",
        "InferentialChain": [
          "location.hud_county_place.county"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0l2rj",
            "EntityName": "San Diego County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.071vr": "San Diego"
    },
    "qid_topic_entity": {
      "Q16552": "San Diego"
    },
    "NoisyQuestion": "what county is san diegO ca?"
  },
  {
    "QuestionId": "WebQTest-1069",
    "RawQuestion": "what is the name of the currency used in china?",
    "ProcessedQuestion": "what is the name of the currency used in china",
    "Parses": [
      {
        "ParseId": "WebQTest-1069.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05w3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05w3 ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "china",
        "TopicEntityName": "China",
        "TopicEntityMid": "m.0d05w3",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0hn4_",
            "EntityName": "Renminbi"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0d05w3": "China"
    },
    "qid_topic_entity": {
      "Q148": "China"
    },
    "NoisyQuestion": "what is the name of the currency used in chna?"
  },
  {
    "QuestionId": "WebQTest-344",
    "RawQuestion": "what county is west st paul in?",
    "ProcessedQuestion": "what county is west st paul in",
    "Parses": [
      {
        "ParseId": "WebQTest-344.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vz77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vz77 ns:location.hud_county_place.county ?x .\n}\n",
        "PotentialTopicEntityMention": "west st paul",
        "TopicEntityName": "West St. Paul",
        "TopicEntityMid": "m.0vz77",
        "InferentialChain": [
          "location.hud_county_place.county"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0nhr5",
            "EntityName": "Dakota County"
          }
        ]
      },
      {
        "ParseId": "WebQTest-344.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vz77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vz77 ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.0kpym_ .\n}\n",
        "PotentialTopicEntityMention": "west st paul",
        "TopicEntityName": "West St. Paul",
        "TopicEntityMid": "m.0vz77",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0kpym_",
            "EntityName": "US County",
            "SourceNodeIndex": 0,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0nhr5",
            "EntityName": "Dakota County"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0vz77": "West St. Paul"
    },
    "qid_topic_entity": {
      "Q2036838": "West St. Paul"
    },
    "NoisyQuestion": "what county is west st pual in?"
  },
  {
    "QuestionId": "WebQTest-779",
    "RawQuestion": "where does carlos santana live?",
    "ProcessedQuestion": "where does carlos santana live",
    "Parses": [
      {
        "ParseId": "WebQTest-779.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01304j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01304j ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PotentialTopicEntityMention": "carlos santana",
        "TopicEntityName": "Carlos Santana",
        "TopicEntityMid": "m.01304j",
        "InferentialChain": [
          "people.person.places_lived",
          "people.place_lived.location"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01btyw",
            "EntityName": "Jalisco"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d6lp",
            "EntityName": "San Francisco"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0pswc",
            "EntityName": "Tijuana"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01304j": "Carlos Santana"
    },
    "qid_topic_entity": {
      "Q819016": "Carlos Santana"
    },
    "NoisyQuestion": "where does carlos santana liv?"
  },
  {
    "QuestionId": "WebQTest-1453",
    "RawQuestion": "who is nick lachey married to?",
    "ProcessedQuestion": "who is nick lachey married to",
    "Parses": [
      {
        "ParseId": "WebQTest-1453.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.039bpc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.039bpc ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "nick lachey",
        "TopicEntityName": "Nick Lachey",
        "TopicEntityMid": "m.039bpc",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2015-08-10",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": true,
          "Start": "0000-00-00",
          "End": "0000-00-00",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": null
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.063yvp",
            "EntityName": "Vanessa Lachey"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.039bpc": "Nick Lachey"
    },
    "qid_topic_entity": {
      "Q356109": "Nick Lachey"
    },
    "NoisyQuestion": "who is nick lacheey married to?"
  },
  {
    "QuestionId": "WebQTest-1092",
    "RawQuestion": "who did viggo mortensen play in lord of the rings?",
    "ProcessedQuestion": "who did viggo mortensen play in lord of the rings",
    "Parses": [
      {
        "ParseId": "WebQTest-1092.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ps2h8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ps2h8 ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.017gl1 .\n}\n",
        "PotentialTopicEntityMention": "viggo mortensen",
        "TopicEntityName": "Viggo Mortensen",
        "TopicEntityMid": "m.01ps2h8",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.017gl1",
            "EntityName": "The Lord of the Rings: The Fellowship of the Ring",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gwlg",
            "EntityName": "Aragorn"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1092.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ps2h8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ps2h8 ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.017jd9 .\n}\n",
        "PotentialTopicEntityMention": "viggo mortensen",
        "TopicEntityName": "Viggo Mortensen",
        "TopicEntityMid": "m.01ps2h8",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.017jd9",
            "EntityName": "The Lord of the Rings: The Return of the King",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gwlg",
            "EntityName": "Aragorn"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1092.P2",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ps2h8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ps2h8 ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.017gm7 .\n}\n",
        "PotentialTopicEntityMention": "viggo mortensen",
        "TopicEntityName": "Viggo Mortensen",
        "TopicEntityMid": "m.01ps2h8",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.017gm7",
            "EntityName": "The Lord of the Rings: The Two Towers",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gwlg",
            "EntityName": "Aragorn"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1092.P3",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017gl1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017gl1 ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:m.01ps2h8 .\n}\n",
        "PotentialTopicEntityMention": "lord of the rings",
        "TopicEntityName": "The Lord of the Rings: The Fellowship of the Ring",
        "TopicEntityMid": "m.017gl1",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01ps2h8",
            "EntityName": "Viggo Mortensen",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.actor",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gwlg",
            "EntityName": "Aragorn"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1092.P4",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017jd9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017jd9 ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:m.01ps2h8 .\n}\n",
        "PotentialTopicEntityMention": "lord of the rings",
        "TopicEntityName": "The Lord of the Rings: The Return of the King",
        "TopicEntityMid": "m.017jd9",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01ps2h8",
            "EntityName": "Viggo Mortensen",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.actor",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gwlg",
            "EntityName": "Aragorn"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01ps2h8": "Viggo Mortensen",
      "m.017gl1": "The Lord of the Rings: The Fellowship of the Ring",
      "m.017jd9": "The Lord of the Rings: The Return of the King"
    },
    "qid_topic_entity": {
      "Q171363": "Viggo Mortensen",
      "Q127367": "The Lord of the Rings: The Fellowship of the Ring",
      "Q131074": "The Lord of the Rings: The Return of the King"
    },
    "NoisyQuestion": "who did viggo mortensen play in lord of the rings?"
  },
  {
    "QuestionId": "WebQTest-881",
    "RawQuestion": "what movies does nick cannon play in?",
    "ProcessedQuestion": "what movies does nick cannon play in",
    "Parses": [
      {
        "ParseId": "WebQTest-881.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01d1st)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01d1st ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "nick cannon",
        "TopicEntityName": "Nick Cannon",
        "TopicEntityMid": "m.01d1st",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0134yc8y",
            "EntityName": "Chiraq"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01yzvd",
            "EntityName": "Garfield: The Movie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qzrt_",
            "EntityName": "Even Money"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rhxt_",
            "EntityName": "American Son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.031t2d",
            "EntityName": "Men in Black II"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.043dz8",
            "EntityName": "Shall We Dance?"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0464t_m",
            "EntityName": "Ball Don't Lie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04ybhxs",
            "EntityName": "The Killing Room"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07kjm8q",
            "EntityName": "Weapons"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07mj_0",
            "EntityName": "Underclassman"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07pnlt",
            "EntityName": "Roll Bounce"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07y9w5",
            "EntityName": "Monster House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08_wh0",
            "EntityName": "Goal II: Living the Dream"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08jml6",
            "EntityName": "Drumline"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08r4x3",
            "EntityName": "Bobby"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09flkf",
            "EntityName": "Love Don't Cost a Thing"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09zg5d",
            "EntityName": "Day of the Dead"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c34n5",
            "EntityName": "Whatever It Takes"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ftc14",
            "EntityName": "The Adventures of Brer Rabbit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gj9fmj",
            "EntityName": "A Very School Gyrls Holla-Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0mzmnx4",
            "EntityName": "Drumline: A New Beat"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01d1st": "Nick Cannon"
    },
    "qid_topic_entity": {
      "Q348533": "Nick Cannon"
    },
    "NoisyQuestion": "what movies does nick cannon play in?"
  },
  {
    "QuestionId": "WebQTest-1920",
    "RawQuestion": "who is rick scott?",
    "ProcessedQuestion": "who is rick scott",
    "Parses": [
      {
        "ParseId": "WebQTest-1920.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0btx2g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0btx2g ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "rick scott",
        "TopicEntityName": "Rick Scott",
        "TopicEntityMid": "m.0btx2g",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012t_z",
            "EntityName": "Businessperson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.025sppp",
            "EntityName": "Investor"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0289fz",
            "EntityName": "Executive officer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04gc2",
            "EntityName": "Lawyer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fj9f",
            "EntityName": "Politician"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0btx2g": "Rick Scott"
    },
    "qid_topic_entity": {
      "Q439729": "Rick Scott"
    },
    "NoisyQuestion": "who is rick scto?"
  },
  {
    "QuestionId": "WebQTest-1658",
    "RawQuestion": "where do they speak turkish?",
    "ProcessedQuestion": "where do they speak turkish",
    "Parses": [
      {
        "ParseId": "WebQTest-1658.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hwyss)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hwyss ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PotentialTopicEntityMention": "turkish",
        "TopicEntityName": "Turkish Language",
        "TopicEntityMid": "m.02hwyss",
        "InferentialChain": [
          "language.human_language.countries_spoken_in"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01ppq",
            "EntityName": "Cyprus"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01znc_",
            "EntityName": "Turkey"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04fh3",
            "EntityName": "Republic of Kosovo"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bjv6",
            "EntityName": "Republic of Macedonia"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0h7x",
            "EntityName": "Austria"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02hwyss": "Turkish Language"
    },
    "qid_topic_entity": {
      "Q256": "Turkish Language"
    },
    "NoisyQuestion": "where do they speak turkish?"
  },
  {
    "QuestionId": "WebQTest-94",
    "RawQuestion": "what did randy savage died of?",
    "ProcessedQuestion": "what did randy savage died of",
    "Parses": [
      {
        "ParseId": "WebQTest-94.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p7_z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p7_z ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "randy savage",
        "TopicEntityName": "Randy Savage",
        "TopicEntityMid": "m.02p7_z",
        "InferentialChain": [
          "people.deceased_person.cause_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gk4g",
            "EntityName": "heart attack"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02p7_z": "Randy Savage"
    },
    "qid_topic_entity": {
      "Q59635": "Randy Savage"
    },
    "NoisyQuestion": "what did randy savagge died of?"
  },
  {
    "QuestionId": "WebQTest-1426",
    "RawQuestion": "where is ibrahim afellay from?",
    "ProcessedQuestion": "where is ibrahim afellay from",
    "Parses": [
      {
        "ParseId": "WebQTest-1426.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08w78j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08w78j ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "ibrahim afellay",
        "TopicEntityName": "Ibrahim Afellay",
        "TopicEntityMid": "m.08w78j",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d9s5",
            "EntityName": "Utrecht"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.08w78j": "Ibrahim Afellay"
    },
    "qid_topic_entity": {
      "Q165014": "Ibrahim Afellay"
    },
    "NoisyQuestion": "where is ibrahim afellay from?"
  },
  {
    "QuestionId": "WebQTest-468",
    "RawQuestion": "where did venus williams come from?",
    "ProcessedQuestion": "where did venus williams come from",
    "Parses": [
      {
        "ParseId": "WebQTest-468.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016cff)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016cff ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "venus williams",
        "TopicEntityName": "Venus Williams",
        "TopicEntityMid": "m.016cff",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0r0ls",
            "EntityName": "Lynwood"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.016cff": "Venus Williams"
    },
    "qid_topic_entity": {
      "Q11578": "Venus Williams"
    },
    "NoisyQuestion": "where did Venus Williams come from?"
  },
  {
    "QuestionId": "WebQTest-878",
    "RawQuestion": "who do islamic people pray to?",
    "ProcessedQuestion": "who do islamic people pray to",
    "Parses": [
      {
        "ParseId": "WebQTest-878.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.deities ?x .\n}\n",
        "PotentialTopicEntityMention": "islamic",
        "TopicEntityName": "Islam",
        "TopicEntityMid": "m.0flw86",
        "InferentialChain": [
          "religion.religion.deities"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.055v4c",
            "EntityName": "Ramdev Pir"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d05l6",
            "EntityName": "God"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jfd",
            "EntityName": "Allah"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0flw86": "Islam"
    },
    "qid_topic_entity": {
      "Q432": "Islam"
    },
    "NoisyQuestion": "who do islamic people pray to?"
  },
  {
    "QuestionId": "WebQTest-957",
    "RawQuestion": "what language did the sioux indians speak?",
    "ProcessedQuestion": "what language did the sioux indians speak",
    "Parses": [
      {
        "ParseId": "WebQTest-957.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fk3s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fk3s ns:people.ethnicity.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "sioux indians",
        "TopicEntityName": "Sioux",
        "TopicEntityMid": "m.0fk3s",
        "InferentialChain": [
          "people.ethnicity.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02h40lc",
            "EntityName": "English Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0565z6",
            "EntityName": "Sioux language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.064_8sq",
            "EntityName": "French"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0fk3s": "Sioux"
    },
    "qid_topic_entity": {
      "Q107434": "Sioux"
    },
    "NoisyQuestion": "what language did the sioux indians speak?"
  },
  {
    "QuestionId": "WebQTest-1146",
    "RawQuestion": "who did johnny depp play in corpse bride?",
    "ProcessedQuestion": "who did johnny depp play in corpse bride",
    "Parses": [
      {
        "ParseId": "WebQTest-1146.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jfx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jfx1 ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.050xxm .\n}\n",
        "PotentialTopicEntityMention": "johnny depp",
        "TopicEntityName": "Johnny Depp",
        "TopicEntityMid": "m.0jfx1",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.050xxm",
            "EntityName": "Corpse Bride",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.film",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04fllb9",
            "EntityName": "Victor Van Dort"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1146.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.050xxm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.050xxm ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:m.0jfx1 .\n}\n",
        "PotentialTopicEntityMention": "corpse bride",
        "TopicEntityName": "Corpse Bride",
        "TopicEntityMid": "m.050xxm",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0jfx1",
            "EntityName": "Johnny Depp",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.actor",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04fllb9",
            "EntityName": "Victor Van Dort"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0jfx1": "Johnny Depp",
      "m.050xxm": "Corpse Bride"
    },
    "qid_topic_entity": {
      "Q37175": "Johnny Depp",
      "Q164417": "Corpse Bride"
    },
    "NoisyQuestion": "who did jhonny depp play in corpse bride?"
  },
  {
    "QuestionId": "WebQTest-298",
    "RawQuestion": "what year did the orioles go to the world series?",
    "ProcessedQuestion": "what year did the orioles go to the world series",
    "Parses": [
      {
        "ParseId": "WebQTest-298.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01d6g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01d6g ns:sports.sports_team.championships ?x .\n}\n",
        "PotentialTopicEntityMention": "orioles",
        "TopicEntityName": "Baltimore Orioles",
        "TopicEntityMid": "m.01d6g",
        "InferentialChain": [
          "sports.sports_team.championships"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.046_p6",
            "EntityName": "1983 World Series"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04jg7y",
            "EntityName": "1970 World Series"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04td_d",
            "EntityName": "1966 World Series"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01d6g": "Baltimore Orioles"
    },
    "qid_topic_entity": {
      "Q650816": "Baltimore Orioles"
    },
    "NoisyQuestion": "what year did the orioles go to the worlde series?"
  },
  {
    "QuestionId": "WebQTest-1276",
    "RawQuestion": "when are the summer and winter olympics held?",
    "ProcessedQuestion": "when are the summer and winter olympics held",
    "Parses": [
      {
        "ParseId": "WebQTest-1276.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? close but not quite"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nd_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nd_ ns:time.recurring_event.current_frequency ?x .\n}\n",
        "PotentialTopicEntityMention": "olympics",
        "TopicEntityName": "Olympic Games",
        "TopicEntityMid": "m.05nd_",
        "InferentialChain": [
          "time.recurring_event.current_frequency"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04q0_4f",
            "EntityName": "Quadrennial"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05nd_": "Olympic Games"
    },
    "qid_topic_entity": {
      "Q5389": "Olympic Games"
    },
    "NoisyQuestion": "when are the summer and winter olympics held?"
  },
  {
    "QuestionId": "WebQTest-1536",
    "RawQuestion": "where did john steinbeck go to college?",
    "ProcessedQuestion": "where did john steinbeck go to college",
    "Parses": [
      {
        "ParseId": "WebQTest-1536.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04107)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04107 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "john steinbeck",
        "TopicEntityName": "John Steinbeck",
        "TopicEntityMid": "m.04107",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06pwq",
            "EntityName": "Stanford University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04107": "John Steinbeck"
    },
    "qid_topic_entity": {
      "Q39212": "John Steinbeck"
    },
    "NoisyQuestion": "where did jhon steinbeck go to college?"
  },
  {
    "QuestionId": "WebQTest-1934",
    "RawQuestion": "where michael jackson from?",
    "ProcessedQuestion": "where michael jackson from",
    "Parses": [
      {
        "ParseId": "WebQTest-1934.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:music.artist.origin ?x .\n}\n",
        "PotentialTopicEntityMention": "michael jackson",
        "TopicEntityName": "Michael Jackson",
        "TopicEntityMid": "m.09889g",
        "InferentialChain": [
          "music.artist.origin"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03b12",
            "EntityName": "Gary"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1934.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "michael jackson",
        "TopicEntityName": "Michael Jackson",
        "TopicEntityMid": "m.09889g",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03b12",
            "EntityName": "Gary"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09889g": "Michael Jackson"
    },
    "qid_topic_entity": {
      "Q2831": "Michael Jackson"
    },
    "NoisyQuestion": "where michael jackson frm?"
  },
  {
    "QuestionId": "WebQTest-409",
    "RawQuestion": "where did giuliana rancic grow up?",
    "ProcessedQuestion": "where did giuliana rancic grow up",
    "Parses": [
      {
        "ParseId": "WebQTest-409.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b0tw3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b0tw3 ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "giuliana rancic",
        "TopicEntityName": "Giuliana Rancic",
        "TopicEntityMid": "m.0b0tw3",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fhsz",
            "EntityName": "Naples"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0b0tw3": "Giuliana Rancic"
    },
    "qid_topic_entity": {
      "Q1281335": "Giuliana Rancic"
    },
    "NoisyQuestion": "where did giuliana rancic grow up?"
  },
  {
    "QuestionId": "WebQTest-142",
    "RawQuestion": "who developed the tcp ip reference model?",
    "ProcessedQuestion": "who developed the tcp ip reference model",
    "Parses": [
      {
        "ParseId": "WebQTest-142.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07hzk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07hzk ns:base.argumentmaps.original_idea.innovator ?x .\n}\n",
        "PotentialTopicEntityMention": "tcp",
        "TopicEntityName": "Transmission Control Protocol",
        "TopicEntityMid": "m.07hzk",
        "InferentialChain": [
          "base.argumentmaps.original_idea.innovator"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_z5v",
            "EntityName": "Robert  E. Kahn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07z23",
            "EntityName": "Vint Cerf"
          }
        ]
      },
      {
        "ParseId": "WebQTest-142.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07hzk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07hzk ns:law.invention.inventor ?x .\n}\n",
        "PotentialTopicEntityMention": "tcp",
        "TopicEntityName": "Transmission Control Protocol",
        "TopicEntityMid": "m.07hzk",
        "InferentialChain": [
          "law.invention.inventor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01_z5v",
            "EntityName": "Robert  E. Kahn"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07z23",
            "EntityName": "Vint Cerf"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07hzk": "Transmission Control Protocol"
    },
    "qid_topic_entity": {
      "Q8803": "Transmission Control Protocol"
    },
    "NoisyQuestion": "who developed the tcp ip refernce model?"
  },
  {
    "QuestionId": "WebQTest-250",
    "RawQuestion": "what type of government does usa follow?",
    "ProcessedQuestion": "what type of government does usa follow",
    "Parses": [
      {
        "ParseId": "WebQTest-250.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "usa",
        "TopicEntityName": "United States of America",
        "TopicEntityMid": "m.09c7w0",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d9r3",
            "EntityName": "Presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j729",
            "EntityName": "Federal republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.09c7w0": "United States of America"
    },
    "qid_topic_entity": {
      "Q30": "United States of America"
    },
    "NoisyQuestion": "what type of government does Usa follow?"
  },
  {
    "QuestionId": "WebQTest-1653",
    "RawQuestion": "what boarding school did mark zuckerberg go to?",
    "ProcessedQuestion": "what boarding school did mark zuckerberg go to",
    "Parses": [
      {
        "ParseId": "WebQTest-1653.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.086dny)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.086dny ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:education.educational_institution.school_type ns:m.0m4mb .\n}\n",
        "PotentialTopicEntityMention": "mark zuckerberg",
        "TopicEntityName": "Mark Zuckerberg",
        "TopicEntityMid": "m.086dny",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0m4mb",
            "EntityName": "Boarding school",
            "SourceNodeIndex": 1,
            "NodePredicate": "education.educational_institution.school_type",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01cyd5",
            "EntityName": "Phillips Exeter Academy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.086dny": "Mark Zuckerberg"
    },
    "qid_topic_entity": {
      "Q36215": "Mark Zuckerberg"
    },
    "NoisyQuestion": "what boarding school did mark zuckerberg go to?"
  },
  {
    "QuestionId": "WebQTest-873",
    "RawQuestion": "where does toronto get its water from?",
    "ProcessedQuestion": "where does toronto get its water from",
    "Parses": [
      {
        "ParseId": "WebQTest-873.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7h6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7h6 ns:base.infrastructure.infrastructural_municipality.sewage_treatment_plant ?x .\n}\n",
        "PotentialTopicEntityMention": "toronto",
        "TopicEntityName": "Toronto",
        "TopicEntityMid": "m.0h7h6",
        "InferentialChain": [
          "base.infrastructure.infrastructural_municipality.sewage_treatment_plant"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02vnl7x",
            "EntityName": "Ashbridges Bay Wastewater Treatment Plant"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0h7h6": "Toronto"
    },
    "qid_topic_entity": {
      "Q172": "Toronto"
    },
    "NoisyQuestion": "where does toronot get its water from?"
  },
  {
    "QuestionId": "WebQTest-1197",
    "RawQuestion": "what language do people speak in brazil?",
    "ProcessedQuestion": "what language do people speak in brazil",
    "Parses": [
      {
        "ParseId": "WebQTest-1197.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "brazil",
        "TopicEntityName": "Brazil",
        "TopicEntityMid": "m.015fr",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bjrlw",
            "EntityName": "Italian Language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02zj58",
            "EntityName": "Brazilian Portuguese"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zjd",
            "EntityName": "Portuguese Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1197.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "brazil",
        "TopicEntityName": "Brazil",
        "TopicEntityMid": "m.015fr",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zjd",
            "EntityName": "Portuguese Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.015fr": "Brazil"
    },
    "qid_topic_entity": {
      "Q155": "Brazil"
    },
    "NoisyQuestion": "what language do people speak in brasil?"
  },
  {
    "QuestionId": "WebQTest-1736",
    "RawQuestion": "where is holy roman empire located?",
    "ProcessedQuestion": "where is holy roman empire located",
    "Parses": [
      {
        "ParseId": "WebQTest-1736.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gk2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gk2 ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "holy roman empire",
        "TopicEntityName": "Holy Roman Empire",
        "TopicEntityMid": "m.03gk2",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02j9z",
            "EntityName": "Europe"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03gk2": "Holy Roman Empire"
    },
    "qid_topic_entity": {
      "Q12548": "Holy Roman Empire"
    },
    "NoisyQuestion": "where is holy romen empire located?"
  },
  {
    "QuestionId": "WebQTest-1096",
    "RawQuestion": "what movies queen latifah is in?",
    "ProcessedQuestion": "what movies queen latifah is in",
    "Parses": [
      {
        "ParseId": "WebQTest-1096.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wgcvn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wgcvn ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PotentialTopicEntityMention": "queen latifah",
        "TopicEntityName": "Queen Latifah",
        "TopicEntityMid": "m.01wgcvn",
        "InferentialChain": [
          "film.actor.film",
          "film.performance.film"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.11bc95kg2q",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010p_crb",
            "EntityName": "Kung Faux: Vol. 4"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01345yx_",
            "EntityName": "Bessie"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01370796",
            "EntityName": "Barbershop 3"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.016f62",
            "EntityName": "Jungle Fever"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01cmp9",
            "EntityName": "Chicago"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01yzjg",
            "EntityName": "Bringing Out the Dead"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.027j9wd",
            "EntityName": "Ice Age: Dawn of the Dinosaurs"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02b5v3",
            "EntityName": "Taxi"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02ntj8",
            "EntityName": "Barbershop 2: Back in Business"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rg6sm",
            "EntityName": "Arctic Tale"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02wc6sp",
            "EntityName": "Mad Money"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02z84b3",
            "EntityName": "Life Support"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.032knp",
            "EntityName": "Set It Off"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03c3vl6",
            "EntityName": "What Happens in Vegas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03cljvq",
            "EntityName": "The Perfect Holiday"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03l6q0",
            "EntityName": "Scary Movie 3"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04f9bz6",
            "EntityName": "The Secret Life of Bees"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04rncw",
            "EntityName": "Sphere"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.054vql",
            "EntityName": "House Party 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0569lx",
            "EntityName": "The Muppets' Wizard of Oz"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05bzxn0",
            "EntityName": "We Are One: The Obama Inaugural Celebration at the Lincoln Memorial"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05p46dv",
            "EntityName": "Hairspray 2: White Lipstick"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05rkmv",
            "EntityName": "Beauty Shop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05zynv8",
            "EntityName": "Living with the Dead"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06_wqk4",
            "EntityName": "Valentine's Day"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.060p1m",
            "EntityName": "Hoodlum"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06bks2",
            "EntityName": "The Cookout"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06fwns",
            "EntityName": "The Bone Collector"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06n95j",
            "EntityName": "The Country Bears"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07_3vm",
            "EntityName": "Brown Sugar"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0729rh",
            "EntityName": "Ice Age: The Meltdown"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07kbj2s",
            "EntityName": "Just Wright"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nt4j",
            "EntityName": "Last Holiday"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08qsz2",
            "EntityName": "Bringing Down the House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08w51z",
            "EntityName": "Juice"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bm2nq",
            "EntityName": "Stranger than Fiction"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bt3j9",
            "EntityName": "Hairspray"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0bvpwc6",
            "EntityName": "Mama Flora's Family"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c3_662",
            "EntityName": "The Dilemma"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crt91p",
            "EntityName": "The Making of What's Going On: An All-Star Tribute"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crv_pd",
            "EntityName": "Kung Faux: Vol. 1"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crvchf",
            "EntityName": "We Are Family"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crvfd7",
            "EntityName": "Kung Faux: Vol. 3"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crw1rn",
            "EntityName": "Breaking Out: The Alcatraz Concert"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crw75p",
            "EntityName": "Kung Faux: Vol. 5"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0crxknq",
            "EntityName": "One Love: The Bob Marley All-Star Tribute"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cryhb4",
            "EntityName": "Queen Latifah - Unauthorized"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cs2r3l",
            "EntityName": "Through the Years of Hip-Hop: Vol. 1: Graffiti"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cs45fr",
            "EntityName": "Life in the 310: Vol. 3"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cs85c7",
            "EntityName": "Kung Faux: Vol. 2"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ds27b",
            "EntityName": "My Life"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0fpgp26",
            "EntityName": "Ice Age: Continental Drift"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g54bw9",
            "EntityName": "Joyful Noise"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gym9j6",
            "EntityName": "Zac Efron's Pool Party"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j24hls",
            "EntityName": "Ice Age: A Mammoth Christmas"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j72nq9",
            "EntityName": "Steel Magnolias"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kvh49",
            "EntityName": "Living Out Loud"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0v_w91n",
            "EntityName": "22 Jump Street"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01wgcvn": "Queen Latifah"
    },
    "qid_topic_entity": {
      "Q1112005": "Queen Latifah"
    },
    "NoisyQuestion": "what movies queen latifah is in?"
  },
  {
    "QuestionId": "WebQTest-1853",
    "RawQuestion": "what made richard hammond famous?",
    "ProcessedQuestion": "what made richard hammond famous",
    "Parses": [
      {
        "ParseId": "WebQTest-1853.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? "
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02508x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02508x ns:people.person.profession ?x .\n}\n",
        "PotentialTopicEntityMention": "richard hammond",
        "TopicEntityName": "Richard Hammond",
        "TopicEntityMid": "m.02508x",
        "InferentialChain": [
          "people.person.profession"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.015cjr",
            "EntityName": "Presenter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01tkqy",
            "EntityName": "Stunt Performer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gjzk",
            "EntityName": "Television producer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.08z956",
            "EntityName": "Radio personality"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cbd2",
            "EntityName": "Writer"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d8qb",
            "EntityName": "Journalist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dxtg",
            "EntityName": "Screenwriter"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0kyk",
            "EntityName": "Author"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0np9r",
            "EntityName": "Voice Actor"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02508x": "Richard Hammond"
    },
    "qid_topic_entity": {
      "Q297265": "Richard Hammond"
    },
    "NoisyQuestion": "what made richard hambond famous?"
  },
  {
    "QuestionId": "WebQTest-845",
    "RawQuestion": "who are the virginia senators 2013?",
    "ProcessedQuestion": "who are the virginia senators 2013",
    "Parses": [
      {
        "ParseId": "WebQTest-845.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "Filter year = 2013"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07z1m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07z1m ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.governmental_body ns:m.07t58 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2013-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2013-01-01\"^^xsd:dateTime) })\n}\n",
        "PotentialTopicEntityMention": "virginia",
        "TopicEntityName": "Virginia",
        "TopicEntityMid": "m.07z1m",
        "InferentialChain": [
          "government.political_district.representatives",
          "government.government_position_held.office_holder"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.07t58",
            "EntityName": "United States Senate",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.governmental_body",
            "ValueType": "String"
          },
          {
            "Operator": "LessOrEqual",
            "ArgumentType": "Value",
            "Argument": "2013-12-31",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.from",
            "ValueType": "DateTime"
          },
          {
            "Operator": "GreaterOrEqual",
            "ArgumentType": "Value",
            "Argument": "2013-01-01",
            "EntityName": "",
            "SourceNodeIndex": 0,
            "NodePredicate": "government.government_position_held.to",
            "ValueType": "DateTime"
          }
        ],
        "Time": {
          "IsRelativeToNow": false,
          "Start": "2013-01-01",
          "End": "2013-12-31",
          "AssociatedConstraints": [
            1,
            2
          ],
          "PotentialTimeMention": "2013"
        },
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.024mm1",
            "EntityName": "Mark Warner"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.053f8h",
            "EntityName": "Tim Kaine"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0574xy",
            "EntityName": "Jim Webb"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07z1m": "Virginia"
    },
    "qid_topic_entity": {
      "Q1370": "Virginia"
    },
    "NoisyQuestion": "who are the virginia senatos 2013?"
  },
  {
    "QuestionId": "WebQTest-2006",
    "RawQuestion": "what race is vanessa carlton?",
    "ProcessedQuestion": "what race is vanessa carlton",
    "Parses": [
      {
        "ParseId": "WebQTest-2006.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02sj66)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02sj66 ns:people.person.ethnicity ?x .\n}\n",
        "PotentialTopicEntityMention": "vanessa carlton",
        "TopicEntityName": "Vanessa Carlton",
        "TopicEntityMid": "m.02sj66",
        "InferentialChain": [
          "people.person.ethnicity"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05t0ydg",
            "EntityName": "Scandinavians"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0g6ff",
            "EntityName": "Russian"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02sj66": "Vanessa Carlton"
    },
    "qid_topic_entity": {
      "Q233081": "Vanessa Carlton"
    },
    "NoisyQuestion": "what race is vanessa carlton?"
  },
  {
    "QuestionId": "WebQTest-1801",
    "RawQuestion": "who plays simon birch?",
    "ProcessedQuestion": "who plays simon birch",
    "Parses": [
      {
        "ParseId": "WebQTest-1801.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.070m8v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.070m8v ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0gwwcp6 .\n}\n",
        "PotentialTopicEntityMention": "simon birch",
        "TopicEntityName": "Simon Birch",
        "TopicEntityMid": "m.070m8v",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0gwwcp6",
            "EntityName": "Simon Birch",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cp8vl",
            "EntityName": "Ian Michael Smith"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.070m8v": "Simon Birch"
    },
    "qid_topic_entity": {
      "Q1540008": "Simon Birch"
    },
    "NoisyQuestion": "who plays simon birch?"
  },
  {
    "QuestionId": "WebQTest-819",
    "RawQuestion": "where was bin laden found and killed?",
    "ProcessedQuestion": "where was bin laden found and killed",
    "Parses": [
      {
        "ParseId": "WebQTest-819.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05mg9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05mg9 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "bin laden",
        "TopicEntityName": "Osama bin Laden",
        "TopicEntityMid": "m.05mg9",
        "InferentialChain": [
          "people.deceased_person.place_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011hs1",
            "EntityName": "Abbottabad"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.05mg9": "Osama bin Laden"
    },
    "qid_topic_entity": {
      "Q1317": "Osama bin Laden"
    },
    "NoisyQuestion": "where was bin ladan found and killed?"
  },
  {
    "QuestionId": "WebQTest-262",
    "RawQuestion": "what tv shows did shawnee smith play in?",
    "ProcessedQuestion": "what tv shows did shawnee smith play in",
    "Parses": [
      {
        "ParseId": "WebQTest-262.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06t3nj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06t3nj ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.series ?x .\n}\n",
        "PotentialTopicEntityMention": "shawnee smith",
        "TopicEntityName": "Shawnee Smith",
        "TopicEntityMid": "m.06t3nj",
        "InferentialChain": [
          "tv.tv_actor.starring_roles",
          "tv.regular_tv_appearance.series"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012kcrc2",
            "EntityName": "Brand New Life"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.033d80",
            "EntityName": "Becker"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yc_fw",
            "EntityName": "Scream Queens"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051yg69",
            "EntityName": "30 Days of Night: Dust to Dust"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07cdxwj",
            "EntityName": "The Tom Show"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07chqg3",
            "EntityName": "All is Forgiven"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.09fc83",
            "EntityName": "The Stand"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gvvdpf",
            "EntityName": "Arsenio"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j635r0",
            "EntityName": "Anger Management"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06t3nj": "Shawnee Smith"
    },
    "qid_topic_entity": {
      "Q233313": "Shawnee Smith"
    },
    "NoisyQuestion": "what tv shows did shawnee smyth play in?"
  },
  {
    "QuestionId": "WebQTest-711",
    "RawQuestion": "who plays chuck bass in gossip girl?",
    "ProcessedQuestion": "who plays chuck bass in gossip girl",
    "Parses": [
      {
        "ParseId": "WebQTest-711.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g0jx7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g0jx7 ns:base.gossipgirl.character.played_by ?x .\n}\n",
        "PotentialTopicEntityMention": "chuck bass",
        "TopicEntityName": "Chuck Bass",
        "TopicEntityMid": "m.0g0jx7",
        "InferentialChain": [
          "base.gossipgirl.character.played_by"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w4x29",
            "EntityName": "Ed Westwick"
          }
        ]
      },
      {
        "ParseId": "WebQTest-711.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gfzgl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gfzgl ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.0g0jx7 .\n}\n",
        "PotentialTopicEntityMention": "gossip girl",
        "TopicEntityName": "Gossip Girl",
        "TopicEntityMid": "m.0gfzgl",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0g0jx7",
            "EntityName": "Chuck Bass",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02w4x29",
            "EntityName": "Ed Westwick"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0g0jx7": "Chuck Bass",
      "m.0gfzgl": "Gossip Girl"
    },
    "qid_topic_entity": {
      "Q2336506": "Chuck Bass",
      "Q199853": "Gossip Girl"
    },
    "NoisyQuestion": "who plays chuk bass in gossip girl?"
  },
  {
    "QuestionId": "WebQTest-552",
    "RawQuestion": "what language do most italians speak?",
    "ProcessedQuestion": "what language do most italians speak",
    "Parses": [
      {
        "ParseId": "WebQTest-552.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "italians",
        "TopicEntityName": "Italy",
        "TopicEntityMid": "m.03rjj",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bjrlw",
            "EntityName": "Italian Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03rjj": "Italy"
    },
    "qid_topic_entity": {
      "Q38": "Italy"
    },
    "NoisyQuestion": "what language do most italians speek?"
  },
  {
    "QuestionId": "WebQTest-426",
    "RawQuestion": "where is giza pyramids located?",
    "ProcessedQuestion": "where is giza pyramids located",
    "Parses": [
      {
        "ParseId": "WebQTest-426.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07s6gb8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07s6gb8 ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "giza pyramids",
        "TopicEntityName": "Giza Necropolis",
        "TopicEntityMid": "m.07s6gb8",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012b0q",
            "EntityName": "Giza"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02k54",
            "EntityName": "Egypt"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07s6gb8": "Giza Necropolis"
    },
    "qid_topic_entity": {
      "Q12508": "Giza Necropolis"
    },
    "NoisyQuestion": "where is giza pyramids located?"
  },
  {
    "QuestionId": "WebQTest-401",
    "RawQuestion": "who plays edward scissorhands?",
    "ProcessedQuestion": "who plays edward scissorhands",
    "Parses": [
      {
        "ParseId": "WebQTest-401.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01s3vk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01s3vk ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0gmm518 .\n}\n",
        "PotentialTopicEntityMention": "edward scissorhands",
        "TopicEntityName": "Edward Scissorhands",
        "TopicEntityMid": "m.01s3vk",
        "InferentialChain": [
          "film.film.starring",
          "film.performance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0gmm518",
            "EntityName": "Edward Scissorhands",
            "SourceNodeIndex": 0,
            "NodePredicate": "film.performance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0jfx1",
            "EntityName": "Johnny Depp"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01s3vk": "Edward Scissorhands"
    },
    "qid_topic_entity": {
      "Q217182": "Edward Scissorhands"
    },
    "NoisyQuestion": "who plays edward scissorhands?"
  },
  {
    "QuestionId": "WebQTest-2020",
    "RawQuestion": "what are the mountains in northern italy called?",
    "ProcessedQuestion": "what are the mountains in northern italy called",
    "Parses": [
      {
        "ParseId": "WebQTest-2020.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01cg88)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01cg88 ns:type.object.name ?x .\n}\n",
        "PotentialTopicEntityMention": "mountains in northern italy",
        "TopicEntityName": "Apennine Mountains",
        "TopicEntityMid": "m.01cg88",
        "InferentialChain": [
          "type.object.name"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "Apennine Mountains",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01cg88": "Apennine Mountains"
    },
    "qid_topic_entity": {
      "Q1285": "Apennine Mountains"
    },
    "NoisyQuestion": "what are the mountains in northern italy called?"
  },
  {
    "QuestionId": "WebQTest-64",
    "RawQuestion": "what other books did charles dickens write?",
    "ProcessedQuestion": "what other books did charles dickens write",
    "Parses": [
      {
        "ParseId": "WebQTest-64.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01v9724)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01v9724 ns:book.author.book_editions_published ?x .\n}\n",
        "PotentialTopicEntityMention": "charles dickens",
        "TopicEntityName": "Charles Dickens",
        "TopicEntityMid": "m.01v9724",
        "InferentialChain": [
          "book.author.book_editions_published"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028x_z3",
            "EntityName": "The Old Curiosity Shop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028y4jr",
            "EntityName": "The Old Curiosity Shop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_dcd",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_dcw",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_ddb",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_ddt",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_df8",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_dfr",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_dg5",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_dgn",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_dh3",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_dhl",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_djh",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_dql",
            "EntityName": "The life and adventures of Nicholas Nickleby"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_dqx",
            "EntityName": "The life and adventures of Nicholas Nickleby"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_fzb",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_hj1",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_hjf",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_kp7",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_kpq",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_kqs",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04t_kr7",
            "EntityName": "Oliver Twist"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqhs",
            "EntityName": "The cricket on the hearth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzqjs",
            "EntityName": "The cricket on the hearth"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztj0",
            "EntityName": "Our mutual friend"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztjh",
            "EntityName": "Our mutual friend"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tztjz",
            "EntityName": "Our mutual friend"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzw25",
            "EntityName": "Our mutual friend."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzxdm",
            "EntityName": "Our mutual friend"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzxf2",
            "EntityName": "Our mutual friend"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04tzxfk",
            "EntityName": "Our mutual friend"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_cp5",
            "EntityName": "The old curiosity shop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_cpx",
            "EntityName": "The old curiosity shop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_cqc",
            "EntityName": "The old curiosity shop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_ggt",
            "EntityName": "The old curiosity shop."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v_kqz",
            "EntityName": "The old curiosity shop"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00pl",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00q2",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00qk",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00r8",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00s0",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00sh",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00st",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00t8",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00tr",
            "EntityName": "Bleak house"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00vg",
            "EntityName": "Bleak House."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00vy",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00w7",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00wq",
            "EntityName": "Bleak House."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00x5",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00xn",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00y3",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00yl",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v00zw",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v015x",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0176",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v017p",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0184",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v018m",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0192",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v019k",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01b8",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01cz",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01df",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01dx",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01fd",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01fw",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01gc",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01gv",
            "EntityName": "Great expectations."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01h9",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v01j0",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v02_r",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v02z9",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v02zk",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v030g",
            "EntityName": "Hard times"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03bs",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03c7",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03d5",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03tx",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03vv",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v03wk",
            "EntityName": "Bleak House"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v05lp",
            "EntityName": "Great Expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07k8",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07kr",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07l4",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07ly",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07mp",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07nn",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07p3",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07pl",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v07q1",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rjz",
            "EntityName": "The mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rkf",
            "EntityName": "The mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rkx",
            "EntityName": "The mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rlt",
            "EntityName": "The mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rm8",
            "EntityName": "The mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rml",
            "EntityName": "The Mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rn2",
            "EntityName": "The mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rnd",
            "EntityName": "The mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rnw",
            "EntityName": "The mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0rqd",
            "EntityName": "The mystery of Edwin Drood"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v45",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v5p",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v64",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v6m",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v72",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v7k",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v80",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v8h",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v8z",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0v9z",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0vbq",
            "EntityName": "David Copperfield."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0ws9",
            "EntityName": "The Pickwick papers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0wt5",
            "EntityName": "The Pickwick papers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0wtn",
            "EntityName": "The Pickwick Papers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0wv3",
            "EntityName": "The Pickwick papers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0wwg",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0wy1",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0wzg",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v0x0w",
            "EntityName": "David Copperfield"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xs6",
            "EntityName": "Little Dorrit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xsp",
            "EntityName": "Little Dorrit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xt4",
            "EntityName": "Little Dorrit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xtm",
            "EntityName": "Little Dorrit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v2xv2",
            "EntityName": "Little Dorrit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v3014",
            "EntityName": "Little Dorrit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v301v",
            "EntityName": "Little Dorrit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v302s",
            "EntityName": "Little Dorrit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v303_",
            "EntityName": "Little Dorrit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4zb0",
            "EntityName": "Sketches by Boz"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v4zbs",
            "EntityName": "Sketches by Boz"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v504r",
            "EntityName": "Sketches by Boz"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5p1n",
            "EntityName": "Martin Chuzzlewit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5p2p",
            "EntityName": "Martin Chuzzlewit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5p3f",
            "EntityName": "Martin Chuzzlewit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5p3v",
            "EntityName": "Martin Chuzzlewit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5p47",
            "EntityName": "Martin Chuzzlewit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5p4q",
            "EntityName": "Martin Chuzzlewit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5p5d",
            "EntityName": "Martin Chuzzlewit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5q3s",
            "EntityName": "Martin Chuzzlewit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5vb4",
            "EntityName": "Dombey and Son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5vbn",
            "EntityName": "Dombey and Son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5vcc",
            "EntityName": "Dombey and Son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5vcv",
            "EntityName": "Dombey and Son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5vd4",
            "EntityName": "Dombey and Son."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5x2r",
            "EntityName": "Dombey and son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5x3d",
            "EntityName": "Dombey and Son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04v5y5v",
            "EntityName": "Dombey and Son"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb00",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb09",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb0l",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb0w",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb1_",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb14",
            "EntityName": "A Christmas Carol (Reissue)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb1f",
            "EntityName": "A Christmas Carol (Reissue)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb1q",
            "EntityName": "A Christmas Carol (Reissue)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb29",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb2m",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb2y",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb37",
            "EntityName": "A Christmas Carol (Dramascripts)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb3k",
            "EntityName": "A Christmas Carol. (Lernmaterialien)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb3w",
            "EntityName": "A Christmas Carol (Dramascripts)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb44",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb4g",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb4s",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb51",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb5c",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb5n",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb5z",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb67",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb6k",
            "EntityName": "A Christmas Carol (Soundings)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb6v",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb74",
            "EntityName": "A Christmas Carol"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb7g",
            "EntityName": "A Christmas Carol (R)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb7r",
            "EntityName": "A CHRISTMAS CAROL"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb81",
            "EntityName": "A Christmas Carol. (Lernmaterialien)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb8r",
            "EntityName": "A Christmas Carol. (Lernmaterialien)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb91",
            "EntityName": "A Christmas Carol (Puffin Choice)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb9b",
            "EntityName": "A Christmas Carol (Puffin Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb9m",
            "EntityName": "A Christmas Carol (Puffin Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqb9x",
            "EntityName": "A Christmas Carol (Puffin Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbb5",
            "EntityName": "A Christmas Carol (Classics Illustrated)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbbg",
            "EntityName": "A Christmas Carol (Scholastic Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbbr",
            "EntityName": "A Christmas Carol (Apple Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbc0",
            "EntityName": "A Christmas Carol (Whole Story)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbcb",
            "EntityName": "A Christmas Carol (Whole Story)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbcn",
            "EntityName": "A Christmas Carol (Aladdin Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbcz",
            "EntityName": "A Christmas Carol (Bantam Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbd8",
            "EntityName": "A Christmas Carol (Ladybird Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbdl",
            "EntityName": "A Christmas Carol (Watermill Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbdw",
            "EntityName": "A Christmas Carol (Watermill Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbf5",
            "EntityName": "A Christmas Carol (Bantam Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbfg",
            "EntityName": "A Christmas Carol (Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbfs",
            "EntityName": "A Christmas Carol (Radio Theatre)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbg1",
            "EntityName": "A Christmas Carol (Radio Theatre)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbgb",
            "EntityName": "A Christmas Carol (Great Stories)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbgn",
            "EntityName": "A Christmas Carol (Saddleback Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbgz",
            "EntityName": "A Christmas Carol (Illustrated Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbh7",
            "EntityName": "A Christmas Carol (Audio Editions)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbhj",
            "EntityName": "A Christmas Carol (Family Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbht",
            "EntityName": "A Christmas Carol (Large Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbj3",
            "EntityName": "A Christmas Carol (Cover to Cover)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbjd",
            "EntityName": "A Christmas Carol (Classic Fiction)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbjp",
            "EntityName": "A Christmas Carol (Classic Fiction)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbjz",
            "EntityName": "A Christmas Carol (Pacemaker Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbk8",
            "EntityName": "A Christmas Carol (Tor Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbkk",
            "EntityName": "A Christmas Carol (Pacemaker Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbkv",
            "EntityName": "A Christmas Carol (Children's Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbl6",
            "EntityName": "A Christmas Carol (Acting Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqblj",
            "EntityName": "A Christmas Carol (Classic Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqblv",
            "EntityName": "A Christmas Carol (Limited Editions)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbm_",
            "EntityName": "A Christmas Carol (Clear Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbm3",
            "EntityName": "A Christmas Carol (Take Part)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbmf",
            "EntityName": "A Christmas Carol (Cp 1135)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbmq",
            "EntityName": "A Christmas Carol (Enriched Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbn9",
            "EntityName": "A Christmas Carol (Illustrated Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbnm",
            "EntityName": "A Christmas Carol (Value Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbny",
            "EntityName": "A Christmas Carol (Penguin Student Editions)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbp6",
            "EntityName": "A Christmas Carol (Ladybird Children's Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbpl",
            "EntityName": "A Christmas Carol (Penguin Readers, Level 2)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbpx",
            "EntityName": "A Christmas Carol (Usborne Young Reading)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbq6",
            "EntityName": "A Christmas Carol (Read & Listen Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbqj",
            "EntityName": "A Christmas Carol (Through the Magic Window Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbqv",
            "EntityName": "A Christmas Carol (Illustrated Classics (Graphic Novels))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbr3",
            "EntityName": "A Christmas Carol (Classic Books on Cassettes Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbrf",
            "EntityName": "A Christmas Carol (Classics for Young Adults and Adults)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbrr",
            "EntityName": "A Christmas Carol (Green Integer, 50)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbs1",
            "EntityName": "A Christmas Carol (Chrysalis Children's Classics Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbsc",
            "EntityName": "A Christmas Carol (Wordsworth Collection) (Wordsworth Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbsz",
            "EntityName": "A Christmas Carol (Everyman's Library Children's Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbt8",
            "EntityName": "A Christmas Carol (Dramascripts Classic Texts)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbtl",
            "EntityName": "A Christmas Carol (Thornes Classic Novels)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbtx",
            "EntityName": "A Christmas Carol (Young Reading Series 2)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbv6",
            "EntityName": "A Christmas Carol (Penguin Student Editions)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbvj",
            "EntityName": "A Christmas Carol (Nelson Graded Readers)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbvx",
            "EntityName": "A Christmas Carol (Oxford Bookworms Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbw5",
            "EntityName": "A Christmas Carol (The Kennett Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbwg",
            "EntityName": "A Christmas Carol (Gollancz Children's Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbws",
            "EntityName": "A Christmas Carol (Webster's Portuguese Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbx2",
            "EntityName": "A Christmas Carol (Webster's Korean Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbxd",
            "EntityName": "A Christmas Carol (Classic, Picture, Ladybird)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqbxq",
            "EntityName": "A Christmas Carol (New Longman Literature)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04yqby0",
            "EntityName": "A Christmas Carol (Children's Theatre Playscript)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051jjhl",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051jjj0",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051jjjh",
            "EntityName": "Great expectations."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051jjjs",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051jjk_",
            "EntityName": "Great Expectations."
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051jjk7",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051jjkj",
            "EntityName": "Great expectations"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cj_7",
            "EntityName": "A Tale of Two Cities (10 Cassettes)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cj_j",
            "EntityName": "A Tale of Two Cities (Student's Novels)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cj_t",
            "EntityName": "A Tale of Two Cities (Oxford Playscripts)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjld",
            "EntityName": "A Tale of Two Cities"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjlp",
            "EntityName": "A Tale of Two Cities"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjlz",
            "EntityName": "A Tale of Two Cities"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjm7",
            "EntityName": "A Tale of Two Cities"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjmj",
            "EntityName": "A Tale of Two Cities"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjmv",
            "EntityName": "A Tale of Two Cities"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjn_",
            "EntityName": "A Tale of Two Cities (Soundings)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjn3",
            "EntityName": "A TALE OF TWO CITIES"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjnd",
            "EntityName": "A Tale of Two Cities"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjnq",
            "EntityName": "A Tale of Two Cities (Dramatized)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjp8",
            "EntityName": "A Tale of Two Cities (Masterworks)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjpl",
            "EntityName": "A Tale of Two Cities (Puffin Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjpw",
            "EntityName": "A Tale of Two Cities (Penguin Popular Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjq_",
            "EntityName": "A Tale of Two Cities (Illustrated Junior Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjq4",
            "EntityName": "A Tale of Two Cities (Prentice Hall Science)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjqf",
            "EntityName": "A Tale of Two Cities (Penguin Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjqq",
            "EntityName": "A Tale of Two Cities (Silver Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjr8",
            "EntityName": "A Tale of Two Cities (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjrk",
            "EntityName": "A Tale of Two Cities (Signet Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjrv",
            "EntityName": "A Tale of Two Cities (Everyman's Library (Paper))"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjs_",
            "EntityName": "A Tale of Two Cities (Bantam Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjs3",
            "EntityName": "A Tale of Two Cities (Classic Retelling)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjsd",
            "EntityName": "A Tale of Two Cities (Dover Thrift Editions)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjsq",
            "EntityName": "A Tale of Two Cities (Enriched Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjt9",
            "EntityName": "A Tale of Two Cities (Paperback Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjtm",
            "EntityName": "A Tale of Two Cities (Ladybird Children's Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjty",
            "EntityName": "A Tale of Two Cities (Bantam Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjv6",
            "EntityName": "A Tale of Two Cities (Courage Literary Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjvj",
            "EntityName": "A Tale of Two Cities (Saddleback Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjvv",
            "EntityName": "A Tale of Two Cities (Illustrated Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjw_",
            "EntityName": "A Tale of Two Cities (Collector's Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjw3",
            "EntityName": "A Tale of Two Cities (Cover to Cover Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjwd",
            "EntityName": "A Tale of Two Cities (Cover to Cover Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjwp",
            "EntityName": "A Tale of Two Cities (Classics Illustrated Notes)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjx9",
            "EntityName": "A Tale Of Two Cities (Adult Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjxl",
            "EntityName": "A Tale of Two Cities (The Classic Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjxw",
            "EntityName": "A Tale of Two Cities (Konemann Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjy5",
            "EntityName": "A Tale of Two Cities (Wordsworth Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjyh",
            "EntityName": "A Tale of Two Cities (Everyman's Library Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjyt",
            "EntityName": "A Tale of Two Cities (Naxos AudioBooks)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjz2",
            "EntityName": "A Tale of Two Cities (Oxford Bookworms Library)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjzc",
            "EntityName": "A Tale of Two Cities (Acting Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjzn",
            "EntityName": "A Tale of Two Cities (Tor Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059cjzy",
            "EntityName": "A Tale of Two Cities (Longman Fiction)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck02",
            "EntityName": "A Tale of Two Cities (Progressive English)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck0d",
            "EntityName": "A Tale of Two Cities (Everyman Paperbacks)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck0p",
            "EntityName": "A Tale of Two Cities (Piccolo Books)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck0z",
            "EntityName": "A Tale of Two Cities (Macmillan Students' Novels)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck17",
            "EntityName": "A Tale of Two Cities (Dramascripts S.)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck1j",
            "EntityName": "A Tale of Two Cities (Simple English)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck1v",
            "EntityName": "A Tale of Two Cities (Classics Illustrated)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck23",
            "EntityName": "A Tale of Two Cities (Adopted Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck2f",
            "EntityName": "A Tale of Two Cities (Compact English Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck2r",
            "EntityName": "A Tale of Two Cities (Pacemaker Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck30",
            "EntityName": "A Tale of Two Cities (Unabridged Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck39",
            "EntityName": "A Tale of Two Cities (Dodo Press)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck3m",
            "EntityName": "A Tale of Two Cities (Large Print Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck3y",
            "EntityName": "A Tale of Two Cities (Clear Print)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck47",
            "EntityName": "A Tale of Two Cities (Cyber Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck4t",
            "EntityName": "A Tale of Two Cities (Cyber Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck55",
            "EntityName": "A Tale of Two Cities (Ultimate Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck5g",
            "EntityName": "A Tale of Two Cities (BBC Audio Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck5r",
            "EntityName": "A Tale of Two Cities (Illustrated Classics)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck61",
            "EntityName": "A Tale of Two Cities (Cassette (1 Hr).)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck6b",
            "EntityName": "A Tale Of Two Cities (Adult Classics in Audio)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck6m",
            "EntityName": "A Tale of Two Cities (Classic Fiction)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck6x",
            "EntityName": "A Tale of Two Cities (New Oxford Illustrated Dickens)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck75",
            "EntityName": "A Tale of Two Cities (The Greatest Historical Novels)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck7h",
            "EntityName": "A Tale of Two Cities (Penguin Readers, Level 5)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck7t",
            "EntityName": "A Tale of Two Cities (Collected Works of Charles Dickens)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck8_",
            "EntityName": "A Tale of Two Cities (Classic Literature with Classical Music)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck82",
            "EntityName": "A Tale of Two Cities (Amsco Literature Program - N 380 ALS)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck8d",
            "EntityName": "A Tale of Two Cities (Unabridged Classics for High School and Adults)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck8p",
            "EntityName": "A Tale of Two Cities (Barnes & Noble Classics Series)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck98",
            "EntityName": "A Tale of Two Cities (Bookcassette(r) Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck9k",
            "EntityName": "A Tale of Two Cities (Webster's Chinese-Simplified Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ck9w",
            "EntityName": "A Tale of Two Cities (Webster's German Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckb5",
            "EntityName": "A Tale of Two Cities (Webster's Italian Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckbt",
            "EntityName": "A Tale of Two Cities (Webster's Chinese-Traditional Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckc3",
            "EntityName": "A Tale of Two Cities (Webster's Portuguese Thesaurus Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckcf",
            "EntityName": "A Tale of Two Cities (Longman Classics, Stage 2)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckcr",
            "EntityName": "A Tale of Two Cities (Lake Illustrated Classics, Collection 2)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckd1",
            "EntityName": "A Tale of Two Cities (Isis Clear Type Classic)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckdc",
            "EntityName": "A Tale Of Two Cities (Classic Books on Cassettes Collection)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckdn",
            "EntityName": "A Tale of Two Cities (40th Anniversary Edition)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckdy",
            "EntityName": "A Tale of Two Cities (Lake Illustrated Classics, Collection 2)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckf7",
            "EntityName": "A Tale of Two Cities (Unabridged Classics for High School and Adults)"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.059ckfj",
            "EntityName": "A Tale of Two Cities (Unabridged Classics for High School and Adults)"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01v9724": "Charles Dickens"
    },
    "qid_topic_entity": {
      "Q5686": "Charles Dickens"
    },
    "NoisyQuestion": "what other books did charels dickens write?"
  },
  {
    "QuestionId": "WebQTest-912",
    "RawQuestion": "what currency should i take to turkey?",
    "ProcessedQuestion": "what currency should i take to turkey",
    "Parses": [
      {
        "ParseId": "WebQTest-912.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "turkey",
        "TopicEntityName": "Turkey",
        "TopicEntityMid": "m.01znc_",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04dq0w",
            "EntityName": "Turkish lira"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01znc_": "Turkey"
    },
    "qid_topic_entity": {
      "Q43": "Turkey"
    },
    "NoisyQuestion": "what currency should i take to Turky?"
  },
  {
    "QuestionId": "WebQTest-734",
    "RawQuestion": "who did roger federer married?",
    "ProcessedQuestion": "who did roger federer married",
    "Parses": [
      {
        "ParseId": "WebQTest-734.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01my95)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01my95 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PotentialTopicEntityMention": "roger federer",
        "TopicEntityName": "Roger Federer",
        "TopicEntityMid": "m.01my95",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07w9t_",
            "EntityName": "Mirka Federer"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01my95": "Roger Federer"
    },
    "qid_topic_entity": {
      "Q1426": "Roger Federer"
    },
    "NoisyQuestion": "who did roger federer marrid?"
  },
  {
    "QuestionId": "WebQTest-780",
    "RawQuestion": "what is the new movie john carter about?",
    "ProcessedQuestion": "what is the new movie john carter about",
    "Parses": [
      {
        "ParseId": "WebQTest-780.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03whyr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03whyr ns:film.film.genre ?x .\n}\n",
        "PotentialTopicEntityMention": "movie john carter",
        "TopicEntityName": "John Carter",
        "TopicEntityMid": "m.03whyr",
        "InferentialChain": [
          "film.film.genre"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01hmnh",
            "EntityName": "Fantasy"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02kdv5l",
            "EntityName": "Action Film"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03k9fj",
            "EntityName": "Adventure Film"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06n90",
            "EntityName": "Science Fiction"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03whyr": "John Carter"
    },
    "qid_topic_entity": {
      "Q235347": "John Carter"
    },
    "NoisyQuestion": "what is the new movie jhon carter about?"
  },
  {
    "QuestionId": "WebQTest-1421",
    "RawQuestion": "who did woody harrelson play on cheers?",
    "ProcessedQuestion": "who did woody harrelson play on cheers",
    "Parses": [
      {
        "ParseId": "WebQTest-1421.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0170s4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0170s4 ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.01s81 .\n}\n",
        "PotentialTopicEntityMention": "woody harrelson",
        "TopicEntityName": "Woody Harrelson",
        "TopicEntityMid": "m.0170s4",
        "InferentialChain": [
          "tv.tv_actor.starring_roles",
          "tv.regular_tv_appearance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01s81",
            "EntityName": "Cheers",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.series",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065xmv",
            "EntityName": "Woody Boyd"
          }
        ]
      },
      {
        "ParseId": "WebQTest-1421.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01s81)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01s81 ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.actor ns:m.0170s4 .\n}\n",
        "PotentialTopicEntityMention": "cheers",
        "TopicEntityName": "Cheers",
        "TopicEntityMid": "m.01s81",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.character"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0170s4",
            "EntityName": "Woody Harrelson",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.actor",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.065xmv",
            "EntityName": "Woody Boyd"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0170s4": "Woody Harrelson",
      "m.01s81": "Cheers"
    },
    "qid_topic_entity": {
      "Q201279": "Woody Harrelson",
      "Q732063": "Cheers"
    },
    "NoisyQuestion": "who did woody harrelson play on cheerz?"
  },
  {
    "QuestionId": "WebQTest-1238",
    "RawQuestion": "who was the artist of mickey mouse?",
    "ProcessedQuestion": "who was the artist of mickey mouse",
    "Parses": [
      {
        "ParseId": "WebQTest-1238.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.057ph)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.057ph ns:fictional_universe.fictional_character.character_created_by ?x .\n}\n",
        "PotentialTopicEntityMention": "mickey mouse",
        "TopicEntityName": "Mickey Mouse",
        "TopicEntityMid": "m.057ph",
        "InferentialChain": [
          "fictional_universe.fictional_character.character_created_by"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.081nh",
            "EntityName": "Walt Disney"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f2ml",
            "EntityName": "Ub Iwerks"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.057ph": "Mickey Mouse"
    },
    "qid_topic_entity": {
      "Q11934": "Mickey Mouse"
    },
    "NoisyQuestion": "who was the artist of mickey mous?"
  },
  {
    "QuestionId": "WebQTest-659",
    "RawQuestion": "what form of government is the uk?",
    "ProcessedQuestion": "what form of government is the uk",
    "Parses": [
      {
        "ParseId": "WebQTest-659.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "uk",
        "TopicEntityName": "United Kingdom",
        "TopicEntityMid": "m.07ssc",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.018wl5",
            "EntityName": "Parliamentary system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fpfn",
            "EntityName": "Unitary state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01q20",
            "EntityName": "Constitutional monarchy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07ssc": "United Kingdom"
    },
    "qid_topic_entity": {
      "Q145": "United Kingdom"
    },
    "NoisyQuestion": "what form of government is the uK?"
  },
  {
    "QuestionId": "WebQTest-522",
    "RawQuestion": "where did adolf hitler die?",
    "ProcessedQuestion": "where did adolf hitler die",
    "Parses": [
      {
        "ParseId": "WebQTest-522.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PotentialTopicEntityMention": "adolf hitler",
        "TopicEntityName": "Adolf Hitler",
        "TopicEntityMid": "m.07_m9_",
        "InferentialChain": [
          "people.deceased_person.place_of_death"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0156q",
            "EntityName": "Berlin"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07_m9_": "Adolf Hitler"
    },
    "qid_topic_entity": {
      "Q352": "Adolf Hitler"
    },
    "NoisyQuestion": "where did adolf hitler die?"
  },
  {
    "QuestionId": "WebQTest-2000",
    "RawQuestion": "who played berger in sex and the city?",
    "ProcessedQuestion": "who played berger in sex and the city",
    "Parses": [
      {
        "ParseId": "WebQTest-2000.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0l76z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0l76z ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.0c7lfjk .\n}\n",
        "PotentialTopicEntityMention": "sex and the city",
        "TopicEntityName": "Sex and the City",
        "TopicEntityMid": "m.0l76z",
        "InferentialChain": [
          "tv.tv_program.regular_cast",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.0c7lfjk",
            "EntityName": "Jack Berger",
            "SourceNodeIndex": 0,
            "NodePredicate": "tv.regular_tv_appearance.character",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02bpxg",
            "EntityName": "Ron Livingston"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0l76z": "Sex and the City"
    },
    "qid_topic_entity": {
      "Q35791": "Sex and the City"
    },
    "NoisyQuestion": "who played beger in sex and the city?"
  },
  {
    "QuestionId": "WebQTest-613",
    "RawQuestion": "what college did deion sanders jr go to?",
    "ProcessedQuestion": "what college did deion sanders jr go to",
    "Parses": [
      {
        "ParseId": "WebQTest-613.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03n69x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03n69x ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "deion sanders",
        "TopicEntityName": "Deion Sanders",
        "TopicEntityMid": "m.03n69x",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01jq0j",
            "EntityName": "Florida State University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03n69x": "Deion Sanders"
    },
    "qid_topic_entity": {
      "Q954184": "Deion Sanders"
    },
    "NoisyQuestion": "what college did deion sanders jnr go to?"
  },
  {
    "QuestionId": "WebQTest-1011",
    "RawQuestion": "where do they speak tibetan?",
    "ProcessedQuestion": "where do they speak tibetan",
    "Parses": [
      {
        "ParseId": "WebQTest-1011.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.064r7fk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.064r7fk ns:language.human_language.main_country ?x .\n}\n",
        "PotentialTopicEntityMention": "tibetan",
        "TopicEntityName": "Standard Tibetan",
        "TopicEntityMid": "m.064r7fk",
        "InferentialChain": [
          "language.human_language.main_country"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0d05w3",
            "EntityName": "China"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0f8nf",
            "EntityName": "Tibet"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.064r7fk": "Standard Tibetan"
    },
    "qid_topic_entity": {
      "Q34271": "Standard Tibetan"
    },
    "NoisyQuestion": "where do they speak tibetan?"
  },
  {
    "QuestionId": "WebQTest-863",
    "RawQuestion": "who plays marshall eriksen?",
    "ProcessedQuestion": "who plays marshall eriksen",
    "Parses": [
      {
        "ParseId": "WebQTest-863.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "Answer is Jason Segel (mid = m.06q5t7) according to freebase.com, but the Freebase dump is missing m.02vkmj9."
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vkmj9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vkmj9 ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PotentialTopicEntityMention": "marshall eriksen",
        "TopicEntityName": "Marshall Eriksen",
        "TopicEntityMid": "m.02vkmj9",
        "InferentialChain": [
          "tv.tv_character.appeared_in_tv_program",
          "tv.regular_tv_appearance.actor"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": []
      }
    ],
    "topic_entity": {
      "m.02vkmj9": "Marshall Eriksen"
    },
    "qid_topic_entity": {
      "Q1081532": "Marshall Eriksen"
    },
    "NoisyQuestion": "who plays marshall eriksen?"
  },
  {
    "QuestionId": "WebQTest-9",
    "RawQuestion": "who was richard nixon married to?",
    "ProcessedQuestion": "who was richard nixon married to",
    "Parses": [
      {
        "ParseId": "WebQTest-9.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c97)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c97 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PotentialTopicEntityMention": "richard nixon",
        "TopicEntityName": "Richard Nixon",
        "TopicEntityMid": "m.06c97",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.spouse"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.023v03",
            "EntityName": "Pat Nixon"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.06c97": "Richard Nixon"
    },
    "qid_topic_entity": {
      "Q9588": "Richard Nixon"
    },
    "NoisyQuestion": "who was rIchard nixon married to?"
  },
  {
    "QuestionId": "WebQTest-869",
    "RawQuestion": "where is ancient phoenician?",
    "ProcessedQuestion": "where is ancient phoenician",
    "Parses": [
      {
        "ParseId": "WebQTest-869.P0",
        "AnnotatorId": 2,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0617q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0617q ns:location.location.containedby ?x .\n}\n",
        "PotentialTopicEntityMention": "phoenician",
        "TopicEntityName": "Phoenicia",
        "TopicEntityMid": "m.0617q",
        "InferentialChain": [
          "location.location.containedby"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04hqz",
            "EntityName": "Lebanon"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0617q": "Phoenicia"
    },
    "qid_topic_entity": {
      "Q41642": "Phoenicia"
    },
    "NoisyQuestion": "where is ancient phoenician?"
  },
  {
    "QuestionId": "WebQTest-336",
    "RawQuestion": "what currency should you take to morocco?",
    "ProcessedQuestion": "what currency should you take to morocco",
    "Parses": [
      {
        "ParseId": "WebQTest-336.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04wgh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04wgh ns:location.country.currency_used ?x .\n}\n",
        "PotentialTopicEntityMention": "morocco",
        "TopicEntityName": "Morocco",
        "TopicEntityMid": "m.04wgh",
        "InferentialChain": [
          "location.country.currency_used"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06qsj1",
            "EntityName": "Moroccan dirham"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.04wgh": "Morocco"
    },
    "qid_topic_entity": {
      "Q1028": "Morocco"
    },
    "NoisyQuestion": "what currency should you take to morroco?"
  },
  {
    "QuestionId": "WebQTest-738",
    "RawQuestion": "what kind of government does japan have now?",
    "ProcessedQuestion": "what kind of government does japan have now",
    "Parses": [
      {
        "ParseId": "WebQTest-738.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "japan",
        "TopicEntityName": "Japan",
        "TopicEntityMid": "m.03_3d",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.018wl5",
            "EntityName": "Parliamentary system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fpfn",
            "EntityName": "Unitary state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01q20",
            "EntityName": "Constitutional monarchy"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.03_3d": "Japan"
    },
    "qid_topic_entity": {
      "Q17": "Japan"
    },
    "NoisyQuestion": "what kind of government does jpan have now?"
  },
  {
    "QuestionId": "WebQTest-810",
    "RawQuestion": "what language do people from greece speak?",
    "ProcessedQuestion": "what language do people from greece speak",
    "Parses": [
      {
        "ParseId": "WebQTest-810.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035qy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035qy ns:location.country.languages_spoken ?x .\n}\n",
        "PotentialTopicEntityMention": "greece",
        "TopicEntityName": "Greece",
        "TopicEntityMid": "m.035qy",
        "InferentialChain": [
          "location.country.languages_spoken"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.012v8",
            "EntityName": "Albanian language"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0349s",
            "EntityName": "Greek Language"
          }
        ]
      },
      {
        "ParseId": "WebQTest-810.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035qy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035qy ns:location.country.official_language ?x .\n}\n",
        "PotentialTopicEntityMention": "greece",
        "TopicEntityName": "Greece",
        "TopicEntityMid": "m.035qy",
        "InferentialChain": [
          "location.country.official_language"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0349s",
            "EntityName": "Greek Language"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.035qy": "Greece"
    },
    "qid_topic_entity": {
      "Q41": "Greece"
    },
    "NoisyQuestion": "what language do people from greece speak?"
  },
  {
    "QuestionId": "WebQTest-500",
    "RawQuestion": "what is the zip code for trenton?",
    "ProcessedQuestion": "what is the zip code for trenton",
    "Parses": [
      {
        "ParseId": "WebQTest-500.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fvxz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fvxz ns:location.citytown.postal_codes ?x .\n}\n",
        "PotentialTopicEntityMention": "trenton",
        "TopicEntityName": "Trenton",
        "TopicEntityMid": "m.0fvxz",
        "InferentialChain": [
          "location.citytown.postal_codes"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0206ng_",
            "EntityName": "08628"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0206njw",
            "EntityName": "08618"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0206nlg",
            "EntityName": "08638"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0206qfx",
            "EntityName": "08610"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0206qgw",
            "EntityName": "08619"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0206qlh",
            "EntityName": "08620"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0206qq6",
            "EntityName": "08691"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0206qr2",
            "EntityName": "08611"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02075l8",
            "EntityName": "08609"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02075s5",
            "EntityName": "08608"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02075z3",
            "EntityName": "08629"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03dtqlk",
            "EntityName": "08625"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03dtqmy",
            "EntityName": "08641"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03dtqnj",
            "EntityName": "08690"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtm_",
            "EntityName": "08695"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtn6",
            "EntityName": "08666"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtnf",
            "EntityName": "08650"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtnn",
            "EntityName": "08647"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtnw",
            "EntityName": "08646"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtp2",
            "EntityName": "08645"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtp9",
            "EntityName": "08607"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtpj",
            "EntityName": "08606"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtpr",
            "EntityName": "08605"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtpz",
            "EntityName": "08604"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtq5",
            "EntityName": "08603"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtqd",
            "EntityName": "08602"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.07nrtqm",
            "EntityName": "08601"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0fvxz": "Trenton"
    },
    "qid_topic_entity": {
      "Q25330": "Trenton"
    },
    "NoisyQuestion": "what is the zip code for trenton?"
  },
  {
    "QuestionId": "WebQTest-2011",
    "RawQuestion": "where is bob marley buried?",
    "ProcessedQuestion": "where is bob marley buried",
    "Parses": [
      {
        "ParseId": "WebQTest-2011.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bkf4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bkf4 ns:people.deceased_person.place_of_burial ?x .\n}\n",
        "PotentialTopicEntityMention": "bob marley",
        "TopicEntityName": "Bob Marley",
        "TopicEntityMid": "m.0bkf4",
        "InferentialChain": [
          "people.deceased_person.place_of_burial"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ggh7j1",
            "EntityName": "Bob Marley Mausoleum"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0bkf4": "Bob Marley"
    },
    "qid_topic_entity": {
      "Q409": "Bob Marley"
    },
    "NoisyQuestion": "where is Bob Marley buried?"
  },
  {
    "QuestionId": "WebQTest-790",
    "RawQuestion": "where did richard arkwright grow up?",
    "ProcessedQuestion": "where did richard arkwright grow up",
    "Parses": [
      {
        "ParseId": "WebQTest-790.P0",
        "AnnotatorId": 3,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tglh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tglh ns:people.person.place_of_birth ?x .\n}\n",
        "PotentialTopicEntityMention": "richard arkwright",
        "TopicEntityName": "Richard Arkwright",
        "TopicEntityMid": "m.01tglh",
        "InferentialChain": [
          "people.person.place_of_birth"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0m7dd",
            "EntityName": "Preston, Lancashire"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01tglh": "Richard Arkwright"
    },
    "qid_topic_entity": {
      "Q294153": "Richard Arkwright"
    },
    "NoisyQuestion": "where did richard arkwright grow up?"
  },
  {
    "QuestionId": "WebQTest-1456",
    "RawQuestion": "what college did john stockton go to?",
    "ProcessedQuestion": "what college did john stockton go to",
    "Parses": [
      {
        "ParseId": "WebQTest-1456.P0",
        "AnnotatorId": 5,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r6lw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r6lw ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PotentialTopicEntityMention": "john stockton",
        "TopicEntityName": "John Stockton",
        "TopicEntityMid": "m.01r6lw",
        "InferentialChain": [
          "people.person.education",
          "education.education.institution"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.01y2hnl",
            "EntityName": "College/University",
            "SourceNodeIndex": 1,
            "NodePredicate": "common.topic.notable_types",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01b1mj",
            "EntityName": "Gonzaga University"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01r6lw": "John Stockton"
    },
    "qid_topic_entity": {
      "Q213346": "John Stockton"
    },
    "NoisyQuestion": "what college did jhon stockton go to?"
  },
  {
    "QuestionId": "WebQTest-773",
    "RawQuestion": "where is the sony ericsson company?",
    "ProcessedQuestion": "where is the sony ericsson company",
    "Parses": [
      {
        "ParseId": "WebQTest-773.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01spxd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01spxd ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PotentialTopicEntityMention": "sony",
        "TopicEntityName": "Sony Mobile Communications",
        "TopicEntityMid": "m.01spxd",
        "InferentialChain": [
          "organization.organization.headquarters",
          "location.mailing_address.citytown"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.024bqj",
            "EntityName": "Minato"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.01spxd": "Sony Mobile Communications"
    },
    "qid_topic_entity": {
      "Q376692": "Sony Mobile Communications"
    },
    "NoisyQuestion": "where is the sony ericsson companie?"
  },
  {
    "QuestionId": "WebQTest-663",
    "RawQuestion": "what age did william penn get married?",
    "ProcessedQuestion": "what age did william penn get married",
    "Parses": [
      {
        "ParseId": "WebQTest-663.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": ""
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083qr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083qr ns:people.person.spouse_s ?y .\n?y ns:people.marriage.from ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PotentialTopicEntityMention": "william penn",
        "TopicEntityName": "William Penn",
        "TopicEntityMid": "m.083qr",
        "InferentialChain": [
          "people.person.spouse_s",
          "people.marriage.from"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.04ztj",
            "EntityName": "Marriage",
            "SourceNodeIndex": 0,
            "NodePredicate": "people.marriage.type_of_union",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Value",
            "AnswerArgument": "1672-04-04",
            "EntityName": null
          }
        ]
      }
    ],
    "topic_entity": {
      "m.083qr": "William Penn"
    },
    "qid_topic_entity": {
      "Q209152": "William Penn"
    },
    "NoisyQuestion": "what age did william penna get married?"
  },
  {
    "QuestionId": "WebQTest-1278",
    "RawQuestion": "what are some major events in venezuela?",
    "ProcessedQuestion": "what are some major events in venezuela",
    "Parses": [
      {
        "ParseId": "WebQTest-1278.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ylj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ylj ns:location.location.events ?x .\n}\n",
        "PotentialTopicEntityMention": "venezuela",
        "TopicEntityName": "Venezuela",
        "TopicEntityMid": "m.07ylj",
        "InferentialChain": [
          "location.location.events"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "g.122dshgz",
            "EntityName": ""
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_s2b74",
            "EntityName": "2014–15 Venezuelan protests"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0_yl8cs",
            "EntityName": "2014 NACAM Rally Championship"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01082t0z",
            "EntityName": "Battle of Santa Inés"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.010pvsz8",
            "EntityName": "2014 Caribbean Earthquake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011nwg_8",
            "EntityName": "2014 Festival Internacional de Cine Infantil y Juvenil"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.011sm70c",
            "EntityName": "Dutch–Venezuelan crisis of 1908"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qb83",
            "EntityName": "Venezuelan War of Independence"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02qlx__",
            "EntityName": "Battle of La Victoria"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02r0mx4",
            "EntityName": "Machurucuto Incident"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02rf6lc",
            "EntityName": "2007 RCTV protests"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0461c3",
            "EntityName": "2002 Venezuelan coup d'état attempt"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.080bblj",
            "EntityName": "Los Maniceros massacre"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c0349z",
            "EntityName": "12th G-15 summit"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0cnymms",
            "EntityName": "Dutch–Venezuela War"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0dgqgqf",
            "EntityName": "Venezuelan crisis of 1902–03"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ggbq0x",
            "EntityName": "Bombardment of Fort San Carlos"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0gys1lh",
            "EntityName": "2011 ALBA Games"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0ryskwc",
            "EntityName": "2013 Venezuela Transaereo 5074 Britten-Norman Islander crash"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.07ylj": "Venezuela"
    },
    "qid_topic_entity": {
      "Q717": "Venezuela"
    },
    "NoisyQuestion": "what are some major events in venezuela?"
  },
  {
    "QuestionId": "WebQTest-213",
    "RawQuestion": "who did scarlett johansson date?",
    "ProcessedQuestion": "who did scarlett johansson date",
    "Parses": [
      {
        "ParseId": "WebQTest-213.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02114t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02114t ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n",
        "PotentialTopicEntityMention": "scarlett johansson",
        "TopicEntityName": "Scarlett Johansson",
        "TopicEntityMid": "m.02114t",
        "InferentialChain": [
          "base.popstra.celebrity.dated",
          "base.popstra.dated.participant"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01g0jn",
            "EntityName": "nm1157013"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01kgv4",
            "EntityName": "Josh Hartnett"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.028r4y",
            "EntityName": "Topher Grace"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fybl",
            "EntityName": "Jared Leto"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.036hf4",
            "EntityName": "Ryan Reynolds"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.055zkh",
            "EntityName": "Patrick Wilson"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j1yf",
            "EntityName": "Justin Timberlake"
          }
        ]
      },
      {
        "ParseId": "WebQTest-213.P1",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02114t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02114t ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n}\n",
        "PotentialTopicEntityMention": "scarlett johansson",
        "TopicEntityName": "Scarlett Johansson",
        "TopicEntityMid": "m.02114t",
        "InferentialChain": [
          "celebrities.celebrity.sexual_relationships",
          "celebrities.romantic_relationship.celebrity"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01g0jn",
            "EntityName": "nm1157013"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01kgv4",
            "EntityName": "Josh Hartnett"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01qscs",
            "EntityName": "Benicio del Toro"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.02fybl",
            "EntityName": "Jared Leto"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0j1yf",
            "EntityName": "Justin Timberlake"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0wz5p2s",
            "EntityName": "Romain Dauriac"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.02114t": "Scarlett Johansson"
    },
    "qid_topic_entity": {
      "Q34436": "Scarlett Johansson"
    },
    "NoisyQuestion": "who did scarlett johansson date?"
  },
  {
    "QuestionId": "WebQTest-1348",
    "RawQuestion": "what team did peyton manning's dad play for?",
    "ProcessedQuestion": "what team did peyton manning 's dad play for",
    "Parses": [
      {
        "ParseId": "WebQTest-1348.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "!Manual Sparql. Comment: F longer chain. Original comment: F "
        },
        "Sparql": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nns:m.027jv8 ns:people.person.parents ?y .\n?y ns:people.person.gender ns:m.05zppz . #Male\n?y ns:sports.pro_athlete.teams ?z .\n?z ns:sports.sports_team_roster.team ?x .\n}",
        "PotentialTopicEntityMention": "peyton manning",
        "TopicEntityName": "Peyton Manning",
        "TopicEntityMid": "m.027jv8",
        "InferentialChain": null,
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.03gqb0k",
            "EntityName": "Ole Miss Rebels football"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.04nmxtk",
            "EntityName": "Houston Oilers"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.051q5",
            "EntityName": "Minnesota Vikings"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05g3v",
            "EntityName": "New Orleans Saints"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.027jv8": "Peyton Manning"
    },
    "qid_topic_entity": {
      "Q7539": "Peyton Manning"
    },
    "NoisyQuestion": "what team did peyton manning's dad play for?"
  },
  {
    "QuestionId": "WebQTest-238",
    "RawQuestion": "who did the chargers draft in 2011?",
    "ProcessedQuestion": "who did the chargers draft in 2011",
    "Parses": [
      {
        "ParseId": "WebQTest-238.P0",
        "AnnotatorId": 4,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Low",
          "FreeFormComment": "?"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06rpd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06rpd ns:sports.professional_sports_team.draft_picks ?y .\n?y ns:sports.sports_league_draft_pick.player ?x .\n?y ns:sports.sports_league_draft_pick.draft ns:m.05sys3j .\n}\n",
        "PotentialTopicEntityMention": "chargers",
        "TopicEntityName": "San Diego Chargers",
        "TopicEntityMid": "m.06rpd",
        "InferentialChain": [
          "sports.professional_sports_team.draft_picks",
          "sports.sports_league_draft_pick.player"
        ],
        "Constraints": [
          {
            "Operator": "Equal",
            "ArgumentType": "Entity",
            "Argument": "m.05sys3j",
            "EntityName": "2011 NFL draft",
            "SourceNodeIndex": 0,
            "NodePredicate": "sports.sports_league_draft_pick.draft",
            "ValueType": "String"
          }
        ],
        "Time": null,
        "Order": null,
        "Answers": []
      }
    ],
    "topic_entity": {
      "m.06rpd": "San Diego Chargers"
    },
    "qid_topic_entity": {
      "Q17015216": "San Diego Chargers"
    },
    "NoisyQuestion": "who did the chargers draft in 2011?"
  },
  {
    "QuestionId": "WebQTest-1061",
    "RawQuestion": "where does greek language come from?",
    "ProcessedQuestion": "where does greek language come from",
    "Parses": [
      {
        "ParseId": "WebQTest-1061.P0",
        "AnnotatorId": 1,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "VeryLow",
          "FreeFormComment": "?? "
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0349s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0349s ns:base.rosetta.languoid.parent ?x .\n}\n",
        "PotentialTopicEntityMention": "greek language",
        "TopicEntityName": "Greek Language",
        "TopicEntityMid": "m.0349s",
        "InferentialChain": [
          "base.rosetta.languoid.parent"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.05tk2xx",
            "EntityName": "Attic Group"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.0349s": "Greek Language"
    },
    "qid_topic_entity": {
      "Q9129": "Greek Language"
    },
    "NoisyQuestion": "where does greekk language come from?"
  },
  {
    "QuestionId": "WebQTest-1941",
    "RawQuestion": "what kind of government does peru?",
    "ProcessedQuestion": "what kind of government does peru",
    "Parses": [
      {
        "ParseId": "WebQTest-1941.P0",
        "AnnotatorId": 0,
        "AnnotatorComment": {
          "ParseQuality": "Complete",
          "QuestionQuality": "Good",
          "Confidence": "Normal",
          "FreeFormComment": "First-round parse verification"
        },
        "Sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016wzw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016wzw ns:location.country.form_of_government ?x .\n}\n",
        "PotentialTopicEntityMention": "peru",
        "TopicEntityName": "Peru",
        "TopicEntityMid": "m.016wzw",
        "InferentialChain": [
          "location.country.form_of_government"
        ],
        "Constraints": [],
        "Time": null,
        "Order": null,
        "Answers": [
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01d9r3",
            "EntityName": "Presidential system"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.01fpfn",
            "EntityName": "Unitary state"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.06cx9",
            "EntityName": "Republic"
          },
          {
            "AnswerType": "Entity",
            "AnswerArgument": "m.0c9rw5",
            "EntityName": "Constitutional republic"
          }
        ]
      }
    ],
    "topic_entity": {
      "m.016wzw": "Peru"
    },
    "qid_topic_entity": {
      "Q419": "Peru"
    },
    "NoisyQuestion": "what kind of government does peur?"
  }
]